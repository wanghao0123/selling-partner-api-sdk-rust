/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderItemAcknowledgement {
  /// Line item sequence number for the item.
  #[serde(rename = "itemSequenceNumber")]
  item_sequence_number: String,
  /// Buyer's standard identification number (ASIN) of an item.
  #[serde(rename = "buyerProductIdentifier")]
  buyer_product_identifier: Option<String>,
  /// The vendor selected product identification of the item. Should be the same as was provided in the purchase order.
  #[serde(rename = "vendorProductIdentifier")]
  vendor_product_identifier: Option<String>,
  /// Details of quantity acknowledged with the above acknowledgement code.
  #[serde(rename = "acknowledgedQuantity")]
  acknowledged_quantity: ::models::ItemQuantity
}

impl OrderItemAcknowledgement {
  pub fn new(item_sequence_number: String, acknowledged_quantity: ::models::ItemQuantity) -> OrderItemAcknowledgement {
    OrderItemAcknowledgement {
      item_sequence_number: item_sequence_number,
      buyer_product_identifier: None,
      vendor_product_identifier: None,
      acknowledged_quantity: acknowledged_quantity
    }
  }

  pub fn set_item_sequence_number(&mut self, item_sequence_number: String) {
    self.item_sequence_number = item_sequence_number;
  }

  pub fn with_item_sequence_number(mut self, item_sequence_number: String) -> OrderItemAcknowledgement {
    self.item_sequence_number = item_sequence_number;
    self
  }

  pub fn item_sequence_number(&self) -> &String {
    &self.item_sequence_number
  }


  pub fn set_buyer_product_identifier(&mut self, buyer_product_identifier: String) {
    self.buyer_product_identifier = Some(buyer_product_identifier);
  }

  pub fn with_buyer_product_identifier(mut self, buyer_product_identifier: String) -> OrderItemAcknowledgement {
    self.buyer_product_identifier = Some(buyer_product_identifier);
    self
  }

  pub fn buyer_product_identifier(&self) -> Option<&String> {
    self.buyer_product_identifier.as_ref()
  }

  pub fn reset_buyer_product_identifier(&mut self) {
    self.buyer_product_identifier = None;
  }

  pub fn set_vendor_product_identifier(&mut self, vendor_product_identifier: String) {
    self.vendor_product_identifier = Some(vendor_product_identifier);
  }

  pub fn with_vendor_product_identifier(mut self, vendor_product_identifier: String) -> OrderItemAcknowledgement {
    self.vendor_product_identifier = Some(vendor_product_identifier);
    self
  }

  pub fn vendor_product_identifier(&self) -> Option<&String> {
    self.vendor_product_identifier.as_ref()
  }

  pub fn reset_vendor_product_identifier(&mut self) {
    self.vendor_product_identifier = None;
  }

  pub fn set_acknowledged_quantity(&mut self, acknowledged_quantity: ::models::ItemQuantity) {
    self.acknowledged_quantity = acknowledged_quantity;
  }

  pub fn with_acknowledged_quantity(mut self, acknowledged_quantity: ::models::ItemQuantity) -> OrderItemAcknowledgement {
    self.acknowledged_quantity = acknowledged_quantity;
    self
  }

  pub fn acknowledged_quantity(&self) -> &::models::ItemQuantity {
    &self.acknowledged_quantity
  }


}



