/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderItem {
  /// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
  #[serde(rename = "itemSequenceNumber")]
  item_sequence_number: String,
  /// Buyer's standard identification number (ASIN) of an item.
  #[serde(rename = "buyerProductIdentifier")]
  buyer_product_identifier: Option<String>,
  /// The vendor selected product identification of the item.
  #[serde(rename = "vendorProductIdentifier")]
  vendor_product_identifier: Option<String>,
  /// Title for the item.
  #[serde(rename = "title")]
  title: Option<String>,
  /// Item quantity ordered.
  #[serde(rename = "orderedQuantity")]
  ordered_quantity: ::models::ItemQuantity,
  /// Details for the scheduled delivery shipment.
  #[serde(rename = "scheduledDeliveryShipment")]
  scheduled_delivery_shipment: Option<::models::ScheduledDeliveryShipment>,
  /// Gift message and wrapId details.
  #[serde(rename = "giftDetails")]
  gift_details: Option<::models::GiftDetails>,
  /// Net price (before tax) to vendor with currency details.
  #[serde(rename = "netPrice")]
  net_price: ::models::Money,
  /// Total tax details for the line item.
  #[serde(rename = "taxDetails")]
  tax_details: Option<Value>,
  /// The price to Amazon each (cost).
  #[serde(rename = "totalPrice")]
  total_price: Option<::models::Money>
}

impl OrderItem {
  pub fn new(item_sequence_number: String, ordered_quantity: ::models::ItemQuantity, net_price: ::models::Money) -> OrderItem {
    OrderItem {
      item_sequence_number: item_sequence_number,
      buyer_product_identifier: None,
      vendor_product_identifier: None,
      title: None,
      ordered_quantity: ordered_quantity,
      scheduled_delivery_shipment: None,
      gift_details: None,
      net_price: net_price,
      tax_details: None,
      total_price: None
    }
  }

  pub fn set_item_sequence_number(&mut self, item_sequence_number: String) {
    self.item_sequence_number = item_sequence_number;
  }

  pub fn with_item_sequence_number(mut self, item_sequence_number: String) -> OrderItem {
    self.item_sequence_number = item_sequence_number;
    self
  }

  pub fn item_sequence_number(&self) -> &String {
    &self.item_sequence_number
  }


  pub fn set_buyer_product_identifier(&mut self, buyer_product_identifier: String) {
    self.buyer_product_identifier = Some(buyer_product_identifier);
  }

  pub fn with_buyer_product_identifier(mut self, buyer_product_identifier: String) -> OrderItem {
    self.buyer_product_identifier = Some(buyer_product_identifier);
    self
  }

  pub fn buyer_product_identifier(&self) -> Option<&String> {
    self.buyer_product_identifier.as_ref()
  }

  pub fn reset_buyer_product_identifier(&mut self) {
    self.buyer_product_identifier = None;
  }

  pub fn set_vendor_product_identifier(&mut self, vendor_product_identifier: String) {
    self.vendor_product_identifier = Some(vendor_product_identifier);
  }

  pub fn with_vendor_product_identifier(mut self, vendor_product_identifier: String) -> OrderItem {
    self.vendor_product_identifier = Some(vendor_product_identifier);
    self
  }

  pub fn vendor_product_identifier(&self) -> Option<&String> {
    self.vendor_product_identifier.as_ref()
  }

  pub fn reset_vendor_product_identifier(&mut self) {
    self.vendor_product_identifier = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> OrderItem {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_ordered_quantity(&mut self, ordered_quantity: ::models::ItemQuantity) {
    self.ordered_quantity = ordered_quantity;
  }

  pub fn with_ordered_quantity(mut self, ordered_quantity: ::models::ItemQuantity) -> OrderItem {
    self.ordered_quantity = ordered_quantity;
    self
  }

  pub fn ordered_quantity(&self) -> &::models::ItemQuantity {
    &self.ordered_quantity
  }


  pub fn set_scheduled_delivery_shipment(&mut self, scheduled_delivery_shipment: ::models::ScheduledDeliveryShipment) {
    self.scheduled_delivery_shipment = Some(scheduled_delivery_shipment);
  }

  pub fn with_scheduled_delivery_shipment(mut self, scheduled_delivery_shipment: ::models::ScheduledDeliveryShipment) -> OrderItem {
    self.scheduled_delivery_shipment = Some(scheduled_delivery_shipment);
    self
  }

  pub fn scheduled_delivery_shipment(&self) -> Option<&::models::ScheduledDeliveryShipment> {
    self.scheduled_delivery_shipment.as_ref()
  }

  pub fn reset_scheduled_delivery_shipment(&mut self) {
    self.scheduled_delivery_shipment = None;
  }

  pub fn set_gift_details(&mut self, gift_details: ::models::GiftDetails) {
    self.gift_details = Some(gift_details);
  }

  pub fn with_gift_details(mut self, gift_details: ::models::GiftDetails) -> OrderItem {
    self.gift_details = Some(gift_details);
    self
  }

  pub fn gift_details(&self) -> Option<&::models::GiftDetails> {
    self.gift_details.as_ref()
  }

  pub fn reset_gift_details(&mut self) {
    self.gift_details = None;
  }

  pub fn set_net_price(&mut self, net_price: ::models::Money) {
    self.net_price = net_price;
  }

  pub fn with_net_price(mut self, net_price: ::models::Money) -> OrderItem {
    self.net_price = net_price;
    self
  }

  pub fn net_price(&self) -> &::models::Money {
    &self.net_price
  }


  pub fn set_tax_details(&mut self, tax_details: Value) {
    self.tax_details = Some(tax_details);
  }

  pub fn with_tax_details(mut self, tax_details: Value) -> OrderItem {
    self.tax_details = Some(tax_details);
    self
  }

  pub fn tax_details(&self) -> Option<&Value> {
    self.tax_details.as_ref()
  }

  pub fn reset_tax_details(&mut self) {
    self.tax_details = None;
  }

  pub fn set_total_price(&mut self, total_price: ::models::Money) {
    self.total_price = Some(total_price);
  }

  pub fn with_total_price(mut self, total_price: ::models::Money) -> OrderItem {
    self.total_price = Some(total_price);
    self
  }

  pub fn total_price(&self) -> Option<&::models::Money> {
    self.total_price.as_ref()
  }

  pub fn reset_total_price(&mut self) {
    self.total_price = None;
  }

}



