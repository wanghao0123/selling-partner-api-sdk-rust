/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrderDetails : Details of an order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderDetails {
  /// The customer order number.
  #[serde(rename = "customerOrderNumber")]
  customer_order_number: String,
  /// The date the order was placed. This field is expected to be in ISO-8601 date/time format, for example:2018-07-16T23:00:00Z/ 2018-07-16T23:00:00-05:00 /2018-07-16T23:00:00-08:00. If no time zone is specified, UTC should be assumed.
  #[serde(rename = "orderDate")]
  order_date: String,
  /// Current status of the order.
  #[serde(rename = "orderStatus")]
  order_status: Option<String>,
  #[serde(rename = "shipmentDetails")]
  shipment_details: ::models::ShipmentDetails,
  #[serde(rename = "taxTotal")]
  tax_total: Option<Value>,
  /// PartyID of vendor code.
  #[serde(rename = "sellingParty")]
  selling_party: ::models::PartyIdentification,
  /// PartyID of vendor's warehouse.
  #[serde(rename = "shipFromParty")]
  ship_from_party: ::models::PartyIdentification,
  /// Name/Address and tax details of the ship to party.
  #[serde(rename = "shipToParty")]
  ship_to_party: ::models::Address,
  /// Name/Address and tax details of the bill to party.
  #[serde(rename = "billToParty")]
  bill_to_party: ::models::PartyIdentification,
  /// A list of items in this purchase order.
  #[serde(rename = "items")]
  items: Vec<::models::OrderItem>
}

impl OrderDetails {
  /// Details of an order.
  pub fn new(customer_order_number: String, order_date: String, shipment_details: ::models::ShipmentDetails, selling_party: ::models::PartyIdentification, ship_from_party: ::models::PartyIdentification, ship_to_party: ::models::Address, bill_to_party: ::models::PartyIdentification, items: Vec<::models::OrderItem>) -> OrderDetails {
    OrderDetails {
      customer_order_number: customer_order_number,
      order_date: order_date,
      order_status: None,
      shipment_details: shipment_details,
      tax_total: None,
      selling_party: selling_party,
      ship_from_party: ship_from_party,
      ship_to_party: ship_to_party,
      bill_to_party: bill_to_party,
      items: items
    }
  }

  pub fn set_customer_order_number(&mut self, customer_order_number: String) {
    self.customer_order_number = customer_order_number;
  }

  pub fn with_customer_order_number(mut self, customer_order_number: String) -> OrderDetails {
    self.customer_order_number = customer_order_number;
    self
  }

  pub fn customer_order_number(&self) -> &String {
    &self.customer_order_number
  }


  pub fn set_order_date(&mut self, order_date: String) {
    self.order_date = order_date;
  }

  pub fn with_order_date(mut self, order_date: String) -> OrderDetails {
    self.order_date = order_date;
    self
  }

  pub fn order_date(&self) -> &String {
    &self.order_date
  }


  pub fn set_order_status(&mut self, order_status: String) {
    self.order_status = Some(order_status);
  }

  pub fn with_order_status(mut self, order_status: String) -> OrderDetails {
    self.order_status = Some(order_status);
    self
  }

  pub fn order_status(&self) -> Option<&String> {
    self.order_status.as_ref()
  }

  pub fn reset_order_status(&mut self) {
    self.order_status = None;
  }

  pub fn set_shipment_details(&mut self, shipment_details: ::models::ShipmentDetails) {
    self.shipment_details = shipment_details;
  }

  pub fn with_shipment_details(mut self, shipment_details: ::models::ShipmentDetails) -> OrderDetails {
    self.shipment_details = shipment_details;
    self
  }

  pub fn shipment_details(&self) -> &::models::ShipmentDetails {
    &self.shipment_details
  }


  pub fn set_tax_total(&mut self, tax_total: Value) {
    self.tax_total = Some(tax_total);
  }

  pub fn with_tax_total(mut self, tax_total: Value) -> OrderDetails {
    self.tax_total = Some(tax_total);
    self
  }

  pub fn tax_total(&self) -> Option<&Value> {
    self.tax_total.as_ref()
  }

  pub fn reset_tax_total(&mut self) {
    self.tax_total = None;
  }

  pub fn set_selling_party(&mut self, selling_party: ::models::PartyIdentification) {
    self.selling_party = selling_party;
  }

  pub fn with_selling_party(mut self, selling_party: ::models::PartyIdentification) -> OrderDetails {
    self.selling_party = selling_party;
    self
  }

  pub fn selling_party(&self) -> &::models::PartyIdentification {
    &self.selling_party
  }


  pub fn set_ship_from_party(&mut self, ship_from_party: ::models::PartyIdentification) {
    self.ship_from_party = ship_from_party;
  }

  pub fn with_ship_from_party(mut self, ship_from_party: ::models::PartyIdentification) -> OrderDetails {
    self.ship_from_party = ship_from_party;
    self
  }

  pub fn ship_from_party(&self) -> &::models::PartyIdentification {
    &self.ship_from_party
  }


  pub fn set_ship_to_party(&mut self, ship_to_party: ::models::Address) {
    self.ship_to_party = ship_to_party;
  }

  pub fn with_ship_to_party(mut self, ship_to_party: ::models::Address) -> OrderDetails {
    self.ship_to_party = ship_to_party;
    self
  }

  pub fn ship_to_party(&self) -> &::models::Address {
    &self.ship_to_party
  }


  pub fn set_bill_to_party(&mut self, bill_to_party: ::models::PartyIdentification) {
    self.bill_to_party = bill_to_party;
  }

  pub fn with_bill_to_party(mut self, bill_to_party: ::models::PartyIdentification) -> OrderDetails {
    self.bill_to_party = bill_to_party;
    self
  }

  pub fn bill_to_party(&self) -> &::models::PartyIdentification {
    &self.bill_to_party
  }


  pub fn set_items(&mut self, items: Vec<::models::OrderItem>) {
    self.items = items;
  }

  pub fn with_items(mut self, items: Vec<::models::OrderItem>) -> OrderDetails {
    self.items = items;
    self
  }

  pub fn items(&self) -> &Vec<::models::OrderItem> {
    &self.items
  }


}



