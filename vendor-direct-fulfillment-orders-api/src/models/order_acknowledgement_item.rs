/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrderAcknowledgementItem : Details of an individual order being acknowledged.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderAcknowledgementItem {
  /// The purchase order number for this order. Formatting Notes: alpha-numeric code.
  #[serde(rename = "purchaseOrderNumber")]
  purchase_order_number: String,
  /// The vendor's order number for this order.
  #[serde(rename = "vendorOrderNumber")]
  vendor_order_number: String,
  /// The date and time when the order is acknowledged, in ISO-8601 date/time format. For example: 2018-07-16T23:00:00Z / 2018-07-16T23:00:00-05:00 / 2018-07-16T23:00:00-08:00.
  #[serde(rename = "acknowledgementDate")]
  acknowledgement_date: String,
  /// Status of acknowledgement.
  #[serde(rename = "acknowledgementStatus")]
  acknowledgement_status: ::models::AcknowledgementStatus,
  /// PartyID as vendor code.
  #[serde(rename = "sellingParty")]
  selling_party: ::models::PartyIdentification,
  /// PartyID as the vendor's warehouseId.
  #[serde(rename = "shipFromParty")]
  ship_from_party: ::models::PartyIdentification,
  /// Item details including acknowledged quantity.
  #[serde(rename = "itemAcknowledgements")]
  item_acknowledgements: Vec<::models::OrderItemAcknowledgement>
}

impl OrderAcknowledgementItem {
  /// Details of an individual order being acknowledged.
  pub fn new(purchase_order_number: String, vendor_order_number: String, acknowledgement_date: String, acknowledgement_status: ::models::AcknowledgementStatus, selling_party: ::models::PartyIdentification, ship_from_party: ::models::PartyIdentification, item_acknowledgements: Vec<::models::OrderItemAcknowledgement>) -> OrderAcknowledgementItem {
    OrderAcknowledgementItem {
      purchase_order_number: purchase_order_number,
      vendor_order_number: vendor_order_number,
      acknowledgement_date: acknowledgement_date,
      acknowledgement_status: acknowledgement_status,
      selling_party: selling_party,
      ship_from_party: ship_from_party,
      item_acknowledgements: item_acknowledgements
    }
  }

  pub fn set_purchase_order_number(&mut self, purchase_order_number: String) {
    self.purchase_order_number = purchase_order_number;
  }

  pub fn with_purchase_order_number(mut self, purchase_order_number: String) -> OrderAcknowledgementItem {
    self.purchase_order_number = purchase_order_number;
    self
  }

  pub fn purchase_order_number(&self) -> &String {
    &self.purchase_order_number
  }


  pub fn set_vendor_order_number(&mut self, vendor_order_number: String) {
    self.vendor_order_number = vendor_order_number;
  }

  pub fn with_vendor_order_number(mut self, vendor_order_number: String) -> OrderAcknowledgementItem {
    self.vendor_order_number = vendor_order_number;
    self
  }

  pub fn vendor_order_number(&self) -> &String {
    &self.vendor_order_number
  }


  pub fn set_acknowledgement_date(&mut self, acknowledgement_date: String) {
    self.acknowledgement_date = acknowledgement_date;
  }

  pub fn with_acknowledgement_date(mut self, acknowledgement_date: String) -> OrderAcknowledgementItem {
    self.acknowledgement_date = acknowledgement_date;
    self
  }

  pub fn acknowledgement_date(&self) -> &String {
    &self.acknowledgement_date
  }


  pub fn set_acknowledgement_status(&mut self, acknowledgement_status: ::models::AcknowledgementStatus) {
    self.acknowledgement_status = acknowledgement_status;
  }

  pub fn with_acknowledgement_status(mut self, acknowledgement_status: ::models::AcknowledgementStatus) -> OrderAcknowledgementItem {
    self.acknowledgement_status = acknowledgement_status;
    self
  }

  pub fn acknowledgement_status(&self) -> &::models::AcknowledgementStatus {
    &self.acknowledgement_status
  }


  pub fn set_selling_party(&mut self, selling_party: ::models::PartyIdentification) {
    self.selling_party = selling_party;
  }

  pub fn with_selling_party(mut self, selling_party: ::models::PartyIdentification) -> OrderAcknowledgementItem {
    self.selling_party = selling_party;
    self
  }

  pub fn selling_party(&self) -> &::models::PartyIdentification {
    &self.selling_party
  }


  pub fn set_ship_from_party(&mut self, ship_from_party: ::models::PartyIdentification) {
    self.ship_from_party = ship_from_party;
  }

  pub fn with_ship_from_party(mut self, ship_from_party: ::models::PartyIdentification) -> OrderAcknowledgementItem {
    self.ship_from_party = ship_from_party;
    self
  }

  pub fn ship_from_party(&self) -> &::models::PartyIdentification {
    &self.ship_from_party
  }


  pub fn set_item_acknowledgements(&mut self, item_acknowledgements: Vec<::models::OrderItemAcknowledgement>) {
    self.item_acknowledgements = item_acknowledgements;
  }

  pub fn with_item_acknowledgements(mut self, item_acknowledgements: Vec<::models::OrderItemAcknowledgement>) -> OrderAcknowledgementItem {
    self.item_acknowledgements = item_acknowledgements;
    self
  }

  pub fn item_acknowledgements(&self) -> &Vec<::models::OrderItemAcknowledgement> {
    &self.item_acknowledgements
  }


}



