/* 
 * Selling Partner API for Direct Fulfillment Orders
 *
 * The Selling Partner API for Direct Fulfillment Orders provides programmatic access to a direct fulfillment vendor's order data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ShipmentDetails : Shipment details required for the shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShipmentDetails {
  /// When true, this is a priority shipment.
  #[serde(rename = "isPriorityShipment")]
  is_priority_shipment: bool,
  /// When true, this order is part of a scheduled delivery program.
  #[serde(rename = "isScheduledDeliveryShipment")]
  is_scheduled_delivery_shipment: Option<bool>,
  /// When true, a packing slip is required to be sent to the customer.
  #[serde(rename = "isPslipRequired")]
  is_pslip_required: bool,
  /// When true, the order contain a gift. Include the gift message and gift wrap information.
  #[serde(rename = "isGift")]
  is_gift: Option<bool>,
  /// Ship method to be used for shipping the order. Amazon defines ship method codes indicating the shipping carrier and shipment service level. To see the full list of ship methods in use, including both the code and the friendly name, search the 'Help' section on Vendor Central for 'ship methods'.
  #[serde(rename = "shipMethod")]
  ship_method: String,
  #[serde(rename = "shipmentDates")]
  shipment_dates: ::models::ShipmentDates,
  /// Message to customer for order status.
  #[serde(rename = "messageToCustomer")]
  message_to_customer: String
}

impl ShipmentDetails {
  /// Shipment details required for the shipment.
  pub fn new(is_priority_shipment: bool, is_pslip_required: bool, ship_method: String, shipment_dates: ::models::ShipmentDates, message_to_customer: String) -> ShipmentDetails {
    ShipmentDetails {
      is_priority_shipment: is_priority_shipment,
      is_scheduled_delivery_shipment: None,
      is_pslip_required: is_pslip_required,
      is_gift: None,
      ship_method: ship_method,
      shipment_dates: shipment_dates,
      message_to_customer: message_to_customer
    }
  }

  pub fn set_is_priority_shipment(&mut self, is_priority_shipment: bool) {
    self.is_priority_shipment = is_priority_shipment;
  }

  pub fn with_is_priority_shipment(mut self, is_priority_shipment: bool) -> ShipmentDetails {
    self.is_priority_shipment = is_priority_shipment;
    self
  }

  pub fn is_priority_shipment(&self) -> &bool {
    &self.is_priority_shipment
  }


  pub fn set_is_scheduled_delivery_shipment(&mut self, is_scheduled_delivery_shipment: bool) {
    self.is_scheduled_delivery_shipment = Some(is_scheduled_delivery_shipment);
  }

  pub fn with_is_scheduled_delivery_shipment(mut self, is_scheduled_delivery_shipment: bool) -> ShipmentDetails {
    self.is_scheduled_delivery_shipment = Some(is_scheduled_delivery_shipment);
    self
  }

  pub fn is_scheduled_delivery_shipment(&self) -> Option<&bool> {
    self.is_scheduled_delivery_shipment.as_ref()
  }

  pub fn reset_is_scheduled_delivery_shipment(&mut self) {
    self.is_scheduled_delivery_shipment = None;
  }

  pub fn set_is_pslip_required(&mut self, is_pslip_required: bool) {
    self.is_pslip_required = is_pslip_required;
  }

  pub fn with_is_pslip_required(mut self, is_pslip_required: bool) -> ShipmentDetails {
    self.is_pslip_required = is_pslip_required;
    self
  }

  pub fn is_pslip_required(&self) -> &bool {
    &self.is_pslip_required
  }


  pub fn set_is_gift(&mut self, is_gift: bool) {
    self.is_gift = Some(is_gift);
  }

  pub fn with_is_gift(mut self, is_gift: bool) -> ShipmentDetails {
    self.is_gift = Some(is_gift);
    self
  }

  pub fn is_gift(&self) -> Option<&bool> {
    self.is_gift.as_ref()
  }

  pub fn reset_is_gift(&mut self) {
    self.is_gift = None;
  }

  pub fn set_ship_method(&mut self, ship_method: String) {
    self.ship_method = ship_method;
  }

  pub fn with_ship_method(mut self, ship_method: String) -> ShipmentDetails {
    self.ship_method = ship_method;
    self
  }

  pub fn ship_method(&self) -> &String {
    &self.ship_method
  }


  pub fn set_shipment_dates(&mut self, shipment_dates: ::models::ShipmentDates) {
    self.shipment_dates = shipment_dates;
  }

  pub fn with_shipment_dates(mut self, shipment_dates: ::models::ShipmentDates) -> ShipmentDetails {
    self.shipment_dates = shipment_dates;
    self
  }

  pub fn shipment_dates(&self) -> &::models::ShipmentDates {
    &self.shipment_dates
  }


  pub fn set_message_to_customer(&mut self, message_to_customer: String) {
    self.message_to_customer = message_to_customer;
  }

  pub fn with_message_to_customer(mut self, message_to_customer: String) -> ShipmentDetails {
    self.message_to_customer = message_to_customer;
    self
  }

  pub fn message_to_customer(&self) -> &String {
    &self.message_to_customer
  }


}



