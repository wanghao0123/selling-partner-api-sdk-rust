/* 
 * Selling Partner API for Direct Fulfillment Payments
 *
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TaxDetail : Details of tax amount applied.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TaxDetail {
  /// Type of the tax applied.
  #[serde(rename = "taxType")]
  tax_type: String,
  /// Tax percentage applied. Percentage must be expressed in decimal.
  #[serde(rename = "taxRate")]
  tax_rate: Option<::models::Decimal>,
  /// Total tax amount applied on invoice total or an item total.
  #[serde(rename = "taxAmount")]
  tax_amount: ::models::Money,
  /// This field will contain the invoice amount that is taxable at the rate specified in the tax rate field.
  #[serde(rename = "taxableAmount")]
  taxable_amount: Option<::models::Money>
}

impl TaxDetail {
  /// Details of tax amount applied.
  pub fn new(tax_type: String, tax_amount: ::models::Money) -> TaxDetail {
    TaxDetail {
      tax_type: tax_type,
      tax_rate: None,
      tax_amount: tax_amount,
      taxable_amount: None
    }
  }

  pub fn set_tax_type(&mut self, tax_type: String) {
    self.tax_type = tax_type;
  }

  pub fn with_tax_type(mut self, tax_type: String) -> TaxDetail {
    self.tax_type = tax_type;
    self
  }

  pub fn tax_type(&self) -> &String {
    &self.tax_type
  }


  pub fn set_tax_rate(&mut self, tax_rate: ::models::Decimal) {
    self.tax_rate = Some(tax_rate);
  }

  pub fn with_tax_rate(mut self, tax_rate: ::models::Decimal) -> TaxDetail {
    self.tax_rate = Some(tax_rate);
    self
  }

  pub fn tax_rate(&self) -> Option<&::models::Decimal> {
    self.tax_rate.as_ref()
  }

  pub fn reset_tax_rate(&mut self) {
    self.tax_rate = None;
  }

  pub fn set_tax_amount(&mut self, tax_amount: ::models::Money) {
    self.tax_amount = tax_amount;
  }

  pub fn with_tax_amount(mut self, tax_amount: ::models::Money) -> TaxDetail {
    self.tax_amount = tax_amount;
    self
  }

  pub fn tax_amount(&self) -> &::models::Money {
    &self.tax_amount
  }


  pub fn set_taxable_amount(&mut self, taxable_amount: ::models::Money) {
    self.taxable_amount = Some(taxable_amount);
  }

  pub fn with_taxable_amount(mut self, taxable_amount: ::models::Money) -> TaxDetail {
    self.taxable_amount = Some(taxable_amount);
    self
  }

  pub fn taxable_amount(&self) -> Option<&::models::Money> {
    self.taxable_amount.as_ref()
  }

  pub fn reset_taxable_amount(&mut self) {
    self.taxable_amount = None;
  }

}



