/* 
 * Selling Partner API for Direct Fulfillment Payments
 *
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InvoiceDetail {
  /// The unique invoice number.
  #[serde(rename = "invoiceNumber")]
  invoice_number: String,
  /// Invoice date.
  #[serde(rename = "invoiceDate")]
  invoice_date: String,
  /// An additional unique reference number used for regulatory or other purposes.
  #[serde(rename = "referenceNumber")]
  reference_number: Option<String>,
  /// Name, address and tax details of the party receiving the payment of this invoice.
  #[serde(rename = "remitToParty")]
  remit_to_party: ::models::PartyIdentification,
  /// Warehouse code of the vendor as in the order.
  #[serde(rename = "shipFromParty")]
  ship_from_party: ::models::PartyIdentification,
  /// Name, address and tax details of the party to whom this invoice is issued.
  #[serde(rename = "billToParty")]
  bill_to_party: Option<::models::PartyIdentification>,
  /// Ship-to country code.
  #[serde(rename = "shipToCountryCode")]
  ship_to_country_code: Option<String>,
  /// The payment terms for the invoice.
  #[serde(rename = "paymentTermsCode")]
  payment_terms_code: Option<String>,
  /// Total amount details of the invoice.
  #[serde(rename = "invoiceTotal")]
  invoice_total: ::models::Money,
  /// Individual tax details per line item.
  #[serde(rename = "taxTotals")]
  tax_totals: Option<Vec<::models::TaxDetail>>,
  /// Additional details provided by the selling party, for tax related or other purposes.
  #[serde(rename = "additionalDetails")]
  additional_details: Option<Vec<::models::AdditionalDetails>>,
  /// Total charge amount details for all line items.
  #[serde(rename = "chargeDetails")]
  charge_details: Option<Vec<::models::ChargeDetails>>,
  /// Provides the details of the items in this invoice.
  #[serde(rename = "items")]
  items: Vec<::models::InvoiceItem>
}

impl InvoiceDetail {
  pub fn new(invoice_number: String, invoice_date: String, remit_to_party: ::models::PartyIdentification, ship_from_party: ::models::PartyIdentification, invoice_total: ::models::Money, items: Vec<::models::InvoiceItem>) -> InvoiceDetail {
    InvoiceDetail {
      invoice_number: invoice_number,
      invoice_date: invoice_date,
      reference_number: None,
      remit_to_party: remit_to_party,
      ship_from_party: ship_from_party,
      bill_to_party: None,
      ship_to_country_code: None,
      payment_terms_code: None,
      invoice_total: invoice_total,
      tax_totals: None,
      additional_details: None,
      charge_details: None,
      items: items
    }
  }

  pub fn set_invoice_number(&mut self, invoice_number: String) {
    self.invoice_number = invoice_number;
  }

  pub fn with_invoice_number(mut self, invoice_number: String) -> InvoiceDetail {
    self.invoice_number = invoice_number;
    self
  }

  pub fn invoice_number(&self) -> &String {
    &self.invoice_number
  }


  pub fn set_invoice_date(&mut self, invoice_date: String) {
    self.invoice_date = invoice_date;
  }

  pub fn with_invoice_date(mut self, invoice_date: String) -> InvoiceDetail {
    self.invoice_date = invoice_date;
    self
  }

  pub fn invoice_date(&self) -> &String {
    &self.invoice_date
  }


  pub fn set_reference_number(&mut self, reference_number: String) {
    self.reference_number = Some(reference_number);
  }

  pub fn with_reference_number(mut self, reference_number: String) -> InvoiceDetail {
    self.reference_number = Some(reference_number);
    self
  }

  pub fn reference_number(&self) -> Option<&String> {
    self.reference_number.as_ref()
  }

  pub fn reset_reference_number(&mut self) {
    self.reference_number = None;
  }

  pub fn set_remit_to_party(&mut self, remit_to_party: ::models::PartyIdentification) {
    self.remit_to_party = remit_to_party;
  }

  pub fn with_remit_to_party(mut self, remit_to_party: ::models::PartyIdentification) -> InvoiceDetail {
    self.remit_to_party = remit_to_party;
    self
  }

  pub fn remit_to_party(&self) -> &::models::PartyIdentification {
    &self.remit_to_party
  }


  pub fn set_ship_from_party(&mut self, ship_from_party: ::models::PartyIdentification) {
    self.ship_from_party = ship_from_party;
  }

  pub fn with_ship_from_party(mut self, ship_from_party: ::models::PartyIdentification) -> InvoiceDetail {
    self.ship_from_party = ship_from_party;
    self
  }

  pub fn ship_from_party(&self) -> &::models::PartyIdentification {
    &self.ship_from_party
  }


  pub fn set_bill_to_party(&mut self, bill_to_party: ::models::PartyIdentification) {
    self.bill_to_party = Some(bill_to_party);
  }

  pub fn with_bill_to_party(mut self, bill_to_party: ::models::PartyIdentification) -> InvoiceDetail {
    self.bill_to_party = Some(bill_to_party);
    self
  }

  pub fn bill_to_party(&self) -> Option<&::models::PartyIdentification> {
    self.bill_to_party.as_ref()
  }

  pub fn reset_bill_to_party(&mut self) {
    self.bill_to_party = None;
  }

  pub fn set_ship_to_country_code(&mut self, ship_to_country_code: String) {
    self.ship_to_country_code = Some(ship_to_country_code);
  }

  pub fn with_ship_to_country_code(mut self, ship_to_country_code: String) -> InvoiceDetail {
    self.ship_to_country_code = Some(ship_to_country_code);
    self
  }

  pub fn ship_to_country_code(&self) -> Option<&String> {
    self.ship_to_country_code.as_ref()
  }

  pub fn reset_ship_to_country_code(&mut self) {
    self.ship_to_country_code = None;
  }

  pub fn set_payment_terms_code(&mut self, payment_terms_code: String) {
    self.payment_terms_code = Some(payment_terms_code);
  }

  pub fn with_payment_terms_code(mut self, payment_terms_code: String) -> InvoiceDetail {
    self.payment_terms_code = Some(payment_terms_code);
    self
  }

  pub fn payment_terms_code(&self) -> Option<&String> {
    self.payment_terms_code.as_ref()
  }

  pub fn reset_payment_terms_code(&mut self) {
    self.payment_terms_code = None;
  }

  pub fn set_invoice_total(&mut self, invoice_total: ::models::Money) {
    self.invoice_total = invoice_total;
  }

  pub fn with_invoice_total(mut self, invoice_total: ::models::Money) -> InvoiceDetail {
    self.invoice_total = invoice_total;
    self
  }

  pub fn invoice_total(&self) -> &::models::Money {
    &self.invoice_total
  }


  pub fn set_tax_totals(&mut self, tax_totals: Vec<::models::TaxDetail>) {
    self.tax_totals = Some(tax_totals);
  }

  pub fn with_tax_totals(mut self, tax_totals: Vec<::models::TaxDetail>) -> InvoiceDetail {
    self.tax_totals = Some(tax_totals);
    self
  }

  pub fn tax_totals(&self) -> Option<&Vec<::models::TaxDetail>> {
    self.tax_totals.as_ref()
  }

  pub fn reset_tax_totals(&mut self) {
    self.tax_totals = None;
  }

  pub fn set_additional_details(&mut self, additional_details: Vec<::models::AdditionalDetails>) {
    self.additional_details = Some(additional_details);
  }

  pub fn with_additional_details(mut self, additional_details: Vec<::models::AdditionalDetails>) -> InvoiceDetail {
    self.additional_details = Some(additional_details);
    self
  }

  pub fn additional_details(&self) -> Option<&Vec<::models::AdditionalDetails>> {
    self.additional_details.as_ref()
  }

  pub fn reset_additional_details(&mut self) {
    self.additional_details = None;
  }

  pub fn set_charge_details(&mut self, charge_details: Vec<::models::ChargeDetails>) {
    self.charge_details = Some(charge_details);
  }

  pub fn with_charge_details(mut self, charge_details: Vec<::models::ChargeDetails>) -> InvoiceDetail {
    self.charge_details = Some(charge_details);
    self
  }

  pub fn charge_details(&self) -> Option<&Vec<::models::ChargeDetails>> {
    self.charge_details.as_ref()
  }

  pub fn reset_charge_details(&mut self) {
    self.charge_details = None;
  }

  pub fn set_items(&mut self, items: Vec<::models::InvoiceItem>) {
    self.items = items;
  }

  pub fn with_items(mut self, items: Vec<::models::InvoiceItem>) -> InvoiceDetail {
    self.items = items;
    self
  }

  pub fn items(&self) -> &Vec<::models::InvoiceItem> {
    &self.items
  }


}



