/* 
 * Selling Partner API for Direct Fulfillment Payments
 *
 * The Selling Partner API for Direct Fulfillment Payments provides programmatic access to a direct fulfillment vendor's invoice data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InvoiceItem {
  /// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
  #[serde(rename = "itemSequenceNumber")]
  item_sequence_number: String,
  /// Buyer's standard identification number (ASIN) of an item.
  #[serde(rename = "buyerProductIdentifier")]
  buyer_product_identifier: Option<String>,
  /// The vendor selected product identification of the item.
  #[serde(rename = "vendorProductIdentifier")]
  vendor_product_identifier: Option<String>,
  /// Item quantity invoiced.
  #[serde(rename = "invoicedQuantity")]
  invoiced_quantity: ::models::ItemQuantity,
  /// Net price (before tax) to vendor with currency details.
  #[serde(rename = "netCost")]
  net_cost: ::models::Money,
  /// The purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
  #[serde(rename = "purchaseOrderNumber")]
  purchase_order_number: String,
  /// The vendor's order number for this order.
  #[serde(rename = "vendorOrderNumber")]
  vendor_order_number: Option<String>,
  /// HSN tax code. The HSN number cannot contain alphabets.
  #[serde(rename = "hsnCode")]
  hsn_code: Option<String>,
  /// Individual tax details per line item.
  #[serde(rename = "taxDetails")]
  tax_details: Option<Vec<::models::TaxDetail>>,
  /// Individual charge details per line item.
  #[serde(rename = "chargeDetails")]
  charge_details: Option<Vec<::models::ChargeDetails>>
}

impl InvoiceItem {
  pub fn new(item_sequence_number: String, invoiced_quantity: ::models::ItemQuantity, net_cost: ::models::Money, purchase_order_number: String) -> InvoiceItem {
    InvoiceItem {
      item_sequence_number: item_sequence_number,
      buyer_product_identifier: None,
      vendor_product_identifier: None,
      invoiced_quantity: invoiced_quantity,
      net_cost: net_cost,
      purchase_order_number: purchase_order_number,
      vendor_order_number: None,
      hsn_code: None,
      tax_details: None,
      charge_details: None
    }
  }

  pub fn set_item_sequence_number(&mut self, item_sequence_number: String) {
    self.item_sequence_number = item_sequence_number;
  }

  pub fn with_item_sequence_number(mut self, item_sequence_number: String) -> InvoiceItem {
    self.item_sequence_number = item_sequence_number;
    self
  }

  pub fn item_sequence_number(&self) -> &String {
    &self.item_sequence_number
  }


  pub fn set_buyer_product_identifier(&mut self, buyer_product_identifier: String) {
    self.buyer_product_identifier = Some(buyer_product_identifier);
  }

  pub fn with_buyer_product_identifier(mut self, buyer_product_identifier: String) -> InvoiceItem {
    self.buyer_product_identifier = Some(buyer_product_identifier);
    self
  }

  pub fn buyer_product_identifier(&self) -> Option<&String> {
    self.buyer_product_identifier.as_ref()
  }

  pub fn reset_buyer_product_identifier(&mut self) {
    self.buyer_product_identifier = None;
  }

  pub fn set_vendor_product_identifier(&mut self, vendor_product_identifier: String) {
    self.vendor_product_identifier = Some(vendor_product_identifier);
  }

  pub fn with_vendor_product_identifier(mut self, vendor_product_identifier: String) -> InvoiceItem {
    self.vendor_product_identifier = Some(vendor_product_identifier);
    self
  }

  pub fn vendor_product_identifier(&self) -> Option<&String> {
    self.vendor_product_identifier.as_ref()
  }

  pub fn reset_vendor_product_identifier(&mut self) {
    self.vendor_product_identifier = None;
  }

  pub fn set_invoiced_quantity(&mut self, invoiced_quantity: ::models::ItemQuantity) {
    self.invoiced_quantity = invoiced_quantity;
  }

  pub fn with_invoiced_quantity(mut self, invoiced_quantity: ::models::ItemQuantity) -> InvoiceItem {
    self.invoiced_quantity = invoiced_quantity;
    self
  }

  pub fn invoiced_quantity(&self) -> &::models::ItemQuantity {
    &self.invoiced_quantity
  }


  pub fn set_net_cost(&mut self, net_cost: ::models::Money) {
    self.net_cost = net_cost;
  }

  pub fn with_net_cost(mut self, net_cost: ::models::Money) -> InvoiceItem {
    self.net_cost = net_cost;
    self
  }

  pub fn net_cost(&self) -> &::models::Money {
    &self.net_cost
  }


  pub fn set_purchase_order_number(&mut self, purchase_order_number: String) {
    self.purchase_order_number = purchase_order_number;
  }

  pub fn with_purchase_order_number(mut self, purchase_order_number: String) -> InvoiceItem {
    self.purchase_order_number = purchase_order_number;
    self
  }

  pub fn purchase_order_number(&self) -> &String {
    &self.purchase_order_number
  }


  pub fn set_vendor_order_number(&mut self, vendor_order_number: String) {
    self.vendor_order_number = Some(vendor_order_number);
  }

  pub fn with_vendor_order_number(mut self, vendor_order_number: String) -> InvoiceItem {
    self.vendor_order_number = Some(vendor_order_number);
    self
  }

  pub fn vendor_order_number(&self) -> Option<&String> {
    self.vendor_order_number.as_ref()
  }

  pub fn reset_vendor_order_number(&mut self) {
    self.vendor_order_number = None;
  }

  pub fn set_hsn_code(&mut self, hsn_code: String) {
    self.hsn_code = Some(hsn_code);
  }

  pub fn with_hsn_code(mut self, hsn_code: String) -> InvoiceItem {
    self.hsn_code = Some(hsn_code);
    self
  }

  pub fn hsn_code(&self) -> Option<&String> {
    self.hsn_code.as_ref()
  }

  pub fn reset_hsn_code(&mut self) {
    self.hsn_code = None;
  }

  pub fn set_tax_details(&mut self, tax_details: Vec<::models::TaxDetail>) {
    self.tax_details = Some(tax_details);
  }

  pub fn with_tax_details(mut self, tax_details: Vec<::models::TaxDetail>) -> InvoiceItem {
    self.tax_details = Some(tax_details);
    self
  }

  pub fn tax_details(&self) -> Option<&Vec<::models::TaxDetail>> {
    self.tax_details.as_ref()
  }

  pub fn reset_tax_details(&mut self) {
    self.tax_details = None;
  }

  pub fn set_charge_details(&mut self, charge_details: Vec<::models::ChargeDetails>) {
    self.charge_details = Some(charge_details);
  }

  pub fn with_charge_details(mut self, charge_details: Vec<::models::ChargeDetails>) -> InvoiceItem {
    self.charge_details = Some(charge_details);
    self
  }

  pub fn charge_details(&self) -> Option<&Vec<::models::ChargeDetails>> {
    self.charge_details.as_ref()
  }

  pub fn reset_charge_details(&mut self) {
    self.charge_details = None;
  }

}



