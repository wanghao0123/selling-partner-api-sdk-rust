/* 
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ReportSchedule : Detailed information about a report schedule.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReportSchedule {
  /// The identifier for the report schedule. This identifier is unique only in combination with a seller ID.
  #[serde(rename = "reportScheduleId")]
  report_schedule_id: String,
  /// The report type.
  #[serde(rename = "reportType")]
  report_type: String,
  /// A list of marketplace identifiers. The report document's contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
  #[serde(rename = "marketplaceIds")]
  marketplace_ids: Option<Vec<String>>,
  #[serde(rename = "reportOptions")]
  report_options: Option<::models::ReportOptions>,
  /// An ISO 8601 period value that indicates how often a report should be created.
  #[serde(rename = "period")]
  period: String,
  /// The date and time when the schedule will create its next report, in ISO 8601 date time format.
  #[serde(rename = "nextReportCreationTime")]
  next_report_creation_time: Option<String>
}

impl ReportSchedule {
  /// Detailed information about a report schedule.
  pub fn new(report_schedule_id: String, report_type: String, period: String) -> ReportSchedule {
    ReportSchedule {
      report_schedule_id: report_schedule_id,
      report_type: report_type,
      marketplace_ids: None,
      report_options: None,
      period: period,
      next_report_creation_time: None
    }
  }

  pub fn set_report_schedule_id(&mut self, report_schedule_id: String) {
    self.report_schedule_id = report_schedule_id;
  }

  pub fn with_report_schedule_id(mut self, report_schedule_id: String) -> ReportSchedule {
    self.report_schedule_id = report_schedule_id;
    self
  }

  pub fn report_schedule_id(&self) -> &String {
    &self.report_schedule_id
  }


  pub fn set_report_type(&mut self, report_type: String) {
    self.report_type = report_type;
  }

  pub fn with_report_type(mut self, report_type: String) -> ReportSchedule {
    self.report_type = report_type;
    self
  }

  pub fn report_type(&self) -> &String {
    &self.report_type
  }


  pub fn set_marketplace_ids(&mut self, marketplace_ids: Vec<String>) {
    self.marketplace_ids = Some(marketplace_ids);
  }

  pub fn with_marketplace_ids(mut self, marketplace_ids: Vec<String>) -> ReportSchedule {
    self.marketplace_ids = Some(marketplace_ids);
    self
  }

  pub fn marketplace_ids(&self) -> Option<&Vec<String>> {
    self.marketplace_ids.as_ref()
  }

  pub fn reset_marketplace_ids(&mut self) {
    self.marketplace_ids = None;
  }

  pub fn set_report_options(&mut self, report_options: ::models::ReportOptions) {
    self.report_options = Some(report_options);
  }

  pub fn with_report_options(mut self, report_options: ::models::ReportOptions) -> ReportSchedule {
    self.report_options = Some(report_options);
    self
  }

  pub fn report_options(&self) -> Option<&::models::ReportOptions> {
    self.report_options.as_ref()
  }

  pub fn reset_report_options(&mut self) {
    self.report_options = None;
  }

  pub fn set_period(&mut self, period: String) {
    self.period = period;
  }

  pub fn with_period(mut self, period: String) -> ReportSchedule {
    self.period = period;
    self
  }

  pub fn period(&self) -> &String {
    &self.period
  }


  pub fn set_next_report_creation_time(&mut self, next_report_creation_time: String) {
    self.next_report_creation_time = Some(next_report_creation_time);
  }

  pub fn with_next_report_creation_time(mut self, next_report_creation_time: String) -> ReportSchedule {
    self.next_report_creation_time = Some(next_report_creation_time);
    self
  }

  pub fn next_report_creation_time(&self) -> Option<&String> {
    self.next_report_creation_time.as_ref()
  }

  pub fn reset_next_report_creation_time(&mut self) {
    self.next_report_creation_time = None;
  }

}



