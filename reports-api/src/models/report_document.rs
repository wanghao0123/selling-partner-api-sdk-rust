/* 
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReportDocument {
  /// The identifier for the report document. This identifier is unique only in combination with a seller ID.
  #[serde(rename = "reportDocumentId")]
  report_document_id: String,
  /// A presigned URL for the report document. This URL expires after 5 minutes.
  #[serde(rename = "url")]
  url: String,
  /// If present, the report document contents have been compressed with the provided algorithm.
  #[serde(rename = "compressionAlgorithm")]
  compression_algorithm: Option<String>
}

impl ReportDocument {
  pub fn new(report_document_id: String, url: String) -> ReportDocument {
    ReportDocument {
      report_document_id: report_document_id,
      url: url,
      compression_algorithm: None
    }
  }

  pub fn set_report_document_id(&mut self, report_document_id: String) {
    self.report_document_id = report_document_id;
  }

  pub fn with_report_document_id(mut self, report_document_id: String) -> ReportDocument {
    self.report_document_id = report_document_id;
    self
  }

  pub fn report_document_id(&self) -> &String {
    &self.report_document_id
  }


  pub fn set_url(&mut self, url: String) {
    self.url = url;
  }

  pub fn with_url(mut self, url: String) -> ReportDocument {
    self.url = url;
    self
  }

  pub fn url(&self) -> &String {
    &self.url
  }


  pub fn set_compression_algorithm(&mut self, compression_algorithm: String) {
    self.compression_algorithm = Some(compression_algorithm);
  }

  pub fn with_compression_algorithm(mut self, compression_algorithm: String) -> ReportDocument {
    self.compression_algorithm = Some(compression_algorithm);
    self
  }

  pub fn compression_algorithm(&self) -> Option<&String> {
    self.compression_algorithm.as_ref()
  }

  pub fn reset_compression_algorithm(&mut self) {
    self.compression_algorithm = None;
  }

}



