/* 
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateReportSpecification {
  #[serde(rename = "reportOptions")]
  report_options: Option<::models::ReportOptions>,
  /// The report type.
  #[serde(rename = "reportType")]
  report_type: String,
  /// The start of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
  #[serde(rename = "dataStartTime")]
  data_start_time: Option<String>,
  /// The end of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
  #[serde(rename = "dataEndTime")]
  data_end_time: Option<String>,
  /// A list of marketplace identifiers. The report document's contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise.
  #[serde(rename = "marketplaceIds")]
  marketplace_ids: Vec<String>
}

impl CreateReportSpecification {
  pub fn new(report_type: String, marketplace_ids: Vec<String>) -> CreateReportSpecification {
    CreateReportSpecification {
      report_options: None,
      report_type: report_type,
      data_start_time: None,
      data_end_time: None,
      marketplace_ids: marketplace_ids
    }
  }

  pub fn set_report_options(&mut self, report_options: ::models::ReportOptions) {
    self.report_options = Some(report_options);
  }

  pub fn with_report_options(mut self, report_options: ::models::ReportOptions) -> CreateReportSpecification {
    self.report_options = Some(report_options);
    self
  }

  pub fn report_options(&self) -> Option<&::models::ReportOptions> {
    self.report_options.as_ref()
  }

  pub fn reset_report_options(&mut self) {
    self.report_options = None;
  }

  pub fn set_report_type(&mut self, report_type: String) {
    self.report_type = report_type;
  }

  pub fn with_report_type(mut self, report_type: String) -> CreateReportSpecification {
    self.report_type = report_type;
    self
  }

  pub fn report_type(&self) -> &String {
    &self.report_type
  }


  pub fn set_data_start_time(&mut self, data_start_time: String) {
    self.data_start_time = Some(data_start_time);
  }

  pub fn with_data_start_time(mut self, data_start_time: String) -> CreateReportSpecification {
    self.data_start_time = Some(data_start_time);
    self
  }

  pub fn data_start_time(&self) -> Option<&String> {
    self.data_start_time.as_ref()
  }

  pub fn reset_data_start_time(&mut self) {
    self.data_start_time = None;
  }

  pub fn set_data_end_time(&mut self, data_end_time: String) {
    self.data_end_time = Some(data_end_time);
  }

  pub fn with_data_end_time(mut self, data_end_time: String) -> CreateReportSpecification {
    self.data_end_time = Some(data_end_time);
    self
  }

  pub fn data_end_time(&self) -> Option<&String> {
    self.data_end_time.as_ref()
  }

  pub fn reset_data_end_time(&mut self) {
    self.data_end_time = None;
  }

  pub fn set_marketplace_ids(&mut self, marketplace_ids: Vec<String>) {
    self.marketplace_ids = marketplace_ids;
  }

  pub fn with_marketplace_ids(mut self, marketplace_ids: Vec<String>) -> CreateReportSpecification {
    self.marketplace_ids = marketplace_ids;
    self
  }

  pub fn marketplace_ids(&self) -> &Vec<String> {
    &self.marketplace_ids
  }


}



