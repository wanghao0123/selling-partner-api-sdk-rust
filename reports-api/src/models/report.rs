/* 
 * Selling Partner API for Reports
 *
 * The Selling Partner API for Reports lets you retrieve and manage a variety of reports that can help selling partners manage their businesses.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Report {
  /// A list of marketplace identifiers for the report.
  #[serde(rename = "marketplaceIds")]
  marketplace_ids: Option<Vec<String>>,
  /// The identifier for the report. This identifier is unique only in combination with a seller ID.
  #[serde(rename = "reportId")]
  report_id: String,
  /// The report type.
  #[serde(rename = "reportType")]
  report_type: String,
  /// The start of a date and time range used for selecting the data to report.
  #[serde(rename = "dataStartTime")]
  data_start_time: Option<String>,
  /// The end of a date and time range used for selecting the data to report.
  #[serde(rename = "dataEndTime")]
  data_end_time: Option<String>,
  /// The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID.
  #[serde(rename = "reportScheduleId")]
  report_schedule_id: Option<String>,
  /// The date and time when the report was created.
  #[serde(rename = "createdTime")]
  created_time: String,
  /// The processing status of the report.
  #[serde(rename = "processingStatus")]
  processing_status: String,
  /// The date and time when the report processing started, in ISO 8601 date time format.
  #[serde(rename = "processingStartTime")]
  processing_start_time: Option<String>,
  /// The date and time when the report processing completed, in ISO 8601 date time format.
  #[serde(rename = "processingEndTime")]
  processing_end_time: Option<String>,
  /// The identifier for the report document. Pass this into the getReportDocument operation to get the information you will need to retrieve the report document's contents.
  #[serde(rename = "reportDocumentId")]
  report_document_id: Option<String>
}

impl Report {
  pub fn new(report_id: String, report_type: String, created_time: String, processing_status: String) -> Report {
    Report {
      marketplace_ids: None,
      report_id: report_id,
      report_type: report_type,
      data_start_time: None,
      data_end_time: None,
      report_schedule_id: None,
      created_time: created_time,
      processing_status: processing_status,
      processing_start_time: None,
      processing_end_time: None,
      report_document_id: None
    }
  }

  pub fn set_marketplace_ids(&mut self, marketplace_ids: Vec<String>) {
    self.marketplace_ids = Some(marketplace_ids);
  }

  pub fn with_marketplace_ids(mut self, marketplace_ids: Vec<String>) -> Report {
    self.marketplace_ids = Some(marketplace_ids);
    self
  }

  pub fn marketplace_ids(&self) -> Option<&Vec<String>> {
    self.marketplace_ids.as_ref()
  }

  pub fn reset_marketplace_ids(&mut self) {
    self.marketplace_ids = None;
  }

  pub fn set_report_id(&mut self, report_id: String) {
    self.report_id = report_id;
  }

  pub fn with_report_id(mut self, report_id: String) -> Report {
    self.report_id = report_id;
    self
  }

  pub fn report_id(&self) -> &String {
    &self.report_id
  }


  pub fn set_report_type(&mut self, report_type: String) {
    self.report_type = report_type;
  }

  pub fn with_report_type(mut self, report_type: String) -> Report {
    self.report_type = report_type;
    self
  }

  pub fn report_type(&self) -> &String {
    &self.report_type
  }


  pub fn set_data_start_time(&mut self, data_start_time: String) {
    self.data_start_time = Some(data_start_time);
  }

  pub fn with_data_start_time(mut self, data_start_time: String) -> Report {
    self.data_start_time = Some(data_start_time);
    self
  }

  pub fn data_start_time(&self) -> Option<&String> {
    self.data_start_time.as_ref()
  }

  pub fn reset_data_start_time(&mut self) {
    self.data_start_time = None;
  }

  pub fn set_data_end_time(&mut self, data_end_time: String) {
    self.data_end_time = Some(data_end_time);
  }

  pub fn with_data_end_time(mut self, data_end_time: String) -> Report {
    self.data_end_time = Some(data_end_time);
    self
  }

  pub fn data_end_time(&self) -> Option<&String> {
    self.data_end_time.as_ref()
  }

  pub fn reset_data_end_time(&mut self) {
    self.data_end_time = None;
  }

  pub fn set_report_schedule_id(&mut self, report_schedule_id: String) {
    self.report_schedule_id = Some(report_schedule_id);
  }

  pub fn with_report_schedule_id(mut self, report_schedule_id: String) -> Report {
    self.report_schedule_id = Some(report_schedule_id);
    self
  }

  pub fn report_schedule_id(&self) -> Option<&String> {
    self.report_schedule_id.as_ref()
  }

  pub fn reset_report_schedule_id(&mut self) {
    self.report_schedule_id = None;
  }

  pub fn set_created_time(&mut self, created_time: String) {
    self.created_time = created_time;
  }

  pub fn with_created_time(mut self, created_time: String) -> Report {
    self.created_time = created_time;
    self
  }

  pub fn created_time(&self) -> &String {
    &self.created_time
  }


  pub fn set_processing_status(&mut self, processing_status: String) {
    self.processing_status = processing_status;
  }

  pub fn with_processing_status(mut self, processing_status: String) -> Report {
    self.processing_status = processing_status;
    self
  }

  pub fn processing_status(&self) -> &String {
    &self.processing_status
  }


  pub fn set_processing_start_time(&mut self, processing_start_time: String) {
    self.processing_start_time = Some(processing_start_time);
  }

  pub fn with_processing_start_time(mut self, processing_start_time: String) -> Report {
    self.processing_start_time = Some(processing_start_time);
    self
  }

  pub fn processing_start_time(&self) -> Option<&String> {
    self.processing_start_time.as_ref()
  }

  pub fn reset_processing_start_time(&mut self) {
    self.processing_start_time = None;
  }

  pub fn set_processing_end_time(&mut self, processing_end_time: String) {
    self.processing_end_time = Some(processing_end_time);
  }

  pub fn with_processing_end_time(mut self, processing_end_time: String) -> Report {
    self.processing_end_time = Some(processing_end_time);
    self
  }

  pub fn processing_end_time(&self) -> Option<&String> {
    self.processing_end_time.as_ref()
  }

  pub fn reset_processing_end_time(&mut self) {
    self.processing_end_time = None;
  }

  pub fn set_report_document_id(&mut self, report_document_id: String) {
    self.report_document_id = Some(report_document_id);
  }

  pub fn with_report_document_id(mut self, report_document_id: String) -> Report {
    self.report_document_id = Some(report_document_id);
    self
  }

  pub fn report_document_id(&self) -> Option<&String> {
    self.report_document_id.as_ref()
  }

  pub fn reset_report_document_id(&mut self) {
    self.report_document_id = None;
  }

}



