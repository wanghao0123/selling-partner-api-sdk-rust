/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ReasonCodeDetails : A return reason code, a description, and an optional description translation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReasonCodeDetails {
  /// A code that indicates a valid return reason.
  #[serde(rename = "returnReasonCode")]
  return_reason_code: String,
  /// A human readable description of the return reason code.
  #[serde(rename = "description")]
  description: String,
  /// A translation of the description. The translation is in the language specified in the Language request parameter.
  #[serde(rename = "translatedDescription")]
  translated_description: Option<String>
}

impl ReasonCodeDetails {
  /// A return reason code, a description, and an optional description translation.
  pub fn new(return_reason_code: String, description: String) -> ReasonCodeDetails {
    ReasonCodeDetails {
      return_reason_code: return_reason_code,
      description: description,
      translated_description: None
    }
  }

  pub fn set_return_reason_code(&mut self, return_reason_code: String) {
    self.return_reason_code = return_reason_code;
  }

  pub fn with_return_reason_code(mut self, return_reason_code: String) -> ReasonCodeDetails {
    self.return_reason_code = return_reason_code;
    self
  }

  pub fn return_reason_code(&self) -> &String {
    &self.return_reason_code
  }


  pub fn set_description(&mut self, description: String) {
    self.description = description;
  }

  pub fn with_description(mut self, description: String) -> ReasonCodeDetails {
    self.description = description;
    self
  }

  pub fn description(&self) -> &String {
    &self.description
  }


  pub fn set_translated_description(&mut self, translated_description: String) {
    self.translated_description = Some(translated_description);
  }

  pub fn with_translated_description(mut self, translated_description: String) -> ReasonCodeDetails {
    self.translated_description = Some(translated_description);
    self
  }

  pub fn translated_description(&self) -> Option<&String> {
    self.translated_description.as_ref()
  }

  pub fn reset_translated_description(&mut self) {
    self.translated_description = None;
  }

}



