/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FulfillmentPreview : Information about a fulfillment order preview, including delivery and fee information based on shipping method.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FulfillmentPreview {
  #[serde(rename = "shippingSpeedCategory")]
  shipping_speed_category: ::models::ShippingSpeedCategory,
  #[serde(rename = "scheduledDeliveryInfo")]
  scheduled_delivery_info: Option<::models::ScheduledDeliveryInfo>,
  /// When true, this fulfillment order preview is fulfillable.
  #[serde(rename = "isFulfillable")]
  is_fulfillable: bool,
  /// When true, this fulfillment order preview is for COD (Cash On Delivery).
  #[serde(rename = "isCODCapable")]
  is_cod_capable: bool,
  /// Estimated shipping weight for this fulfillment order preview.
  #[serde(rename = "estimatedShippingWeight")]
  estimated_shipping_weight: Option<::models::Weight>,
  /// The estimated fulfillment fees for this fulfillment order preview, if applicable.
  #[serde(rename = "estimatedFees")]
  estimated_fees: Option<::models::FeeList>,
  #[serde(rename = "fulfillmentPreviewShipments")]
  fulfillment_preview_shipments: Option<::models::FulfillmentPreviewShipmentList>,
  #[serde(rename = "unfulfillablePreviewItems")]
  unfulfillable_preview_items: Option<::models::UnfulfillablePreviewItemList>,
  /// Error codes associated with the fulfillment order preview that indicate why the order is not fulfillable.  Error code examples:  DeliverySLAUnavailable InvalidDestinationAddress
  #[serde(rename = "orderUnfulfillableReasons")]
  order_unfulfillable_reasons: Option<::models::StringList>,
  /// The marketplace the fulfillment order is placed against.
  #[serde(rename = "marketplaceId")]
  marketplace_id: String,
  /// A list of features and their fulfillment policies to apply to the order.
  #[serde(rename = "featureConstraints")]
  feature_constraints: Option<Vec<::models::FeatureSettings>>
}

impl FulfillmentPreview {
  /// Information about a fulfillment order preview, including delivery and fee information based on shipping method.
  pub fn new(shipping_speed_category: ::models::ShippingSpeedCategory, is_fulfillable: bool, is_cod_capable: bool, marketplace_id: String) -> FulfillmentPreview {
    FulfillmentPreview {
      shipping_speed_category: shipping_speed_category,
      scheduled_delivery_info: None,
      is_fulfillable: is_fulfillable,
      is_cod_capable: is_cod_capable,
      estimated_shipping_weight: None,
      estimated_fees: None,
      fulfillment_preview_shipments: None,
      unfulfillable_preview_items: None,
      order_unfulfillable_reasons: None,
      marketplace_id: marketplace_id,
      feature_constraints: None
    }
  }

  pub fn set_shipping_speed_category(&mut self, shipping_speed_category: ::models::ShippingSpeedCategory) {
    self.shipping_speed_category = shipping_speed_category;
  }

  pub fn with_shipping_speed_category(mut self, shipping_speed_category: ::models::ShippingSpeedCategory) -> FulfillmentPreview {
    self.shipping_speed_category = shipping_speed_category;
    self
  }

  pub fn shipping_speed_category(&self) -> &::models::ShippingSpeedCategory {
    &self.shipping_speed_category
  }


  pub fn set_scheduled_delivery_info(&mut self, scheduled_delivery_info: ::models::ScheduledDeliveryInfo) {
    self.scheduled_delivery_info = Some(scheduled_delivery_info);
  }

  pub fn with_scheduled_delivery_info(mut self, scheduled_delivery_info: ::models::ScheduledDeliveryInfo) -> FulfillmentPreview {
    self.scheduled_delivery_info = Some(scheduled_delivery_info);
    self
  }

  pub fn scheduled_delivery_info(&self) -> Option<&::models::ScheduledDeliveryInfo> {
    self.scheduled_delivery_info.as_ref()
  }

  pub fn reset_scheduled_delivery_info(&mut self) {
    self.scheduled_delivery_info = None;
  }

  pub fn set_is_fulfillable(&mut self, is_fulfillable: bool) {
    self.is_fulfillable = is_fulfillable;
  }

  pub fn with_is_fulfillable(mut self, is_fulfillable: bool) -> FulfillmentPreview {
    self.is_fulfillable = is_fulfillable;
    self
  }

  pub fn is_fulfillable(&self) -> &bool {
    &self.is_fulfillable
  }


  pub fn set_is_cod_capable(&mut self, is_cod_capable: bool) {
    self.is_cod_capable = is_cod_capable;
  }

  pub fn with_is_cod_capable(mut self, is_cod_capable: bool) -> FulfillmentPreview {
    self.is_cod_capable = is_cod_capable;
    self
  }

  pub fn is_cod_capable(&self) -> &bool {
    &self.is_cod_capable
  }


  pub fn set_estimated_shipping_weight(&mut self, estimated_shipping_weight: ::models::Weight) {
    self.estimated_shipping_weight = Some(estimated_shipping_weight);
  }

  pub fn with_estimated_shipping_weight(mut self, estimated_shipping_weight: ::models::Weight) -> FulfillmentPreview {
    self.estimated_shipping_weight = Some(estimated_shipping_weight);
    self
  }

  pub fn estimated_shipping_weight(&self) -> Option<&::models::Weight> {
    self.estimated_shipping_weight.as_ref()
  }

  pub fn reset_estimated_shipping_weight(&mut self) {
    self.estimated_shipping_weight = None;
  }

  pub fn set_estimated_fees(&mut self, estimated_fees: ::models::FeeList) {
    self.estimated_fees = Some(estimated_fees);
  }

  pub fn with_estimated_fees(mut self, estimated_fees: ::models::FeeList) -> FulfillmentPreview {
    self.estimated_fees = Some(estimated_fees);
    self
  }

  pub fn estimated_fees(&self) -> Option<&::models::FeeList> {
    self.estimated_fees.as_ref()
  }

  pub fn reset_estimated_fees(&mut self) {
    self.estimated_fees = None;
  }

  pub fn set_fulfillment_preview_shipments(&mut self, fulfillment_preview_shipments: ::models::FulfillmentPreviewShipmentList) {
    self.fulfillment_preview_shipments = Some(fulfillment_preview_shipments);
  }

  pub fn with_fulfillment_preview_shipments(mut self, fulfillment_preview_shipments: ::models::FulfillmentPreviewShipmentList) -> FulfillmentPreview {
    self.fulfillment_preview_shipments = Some(fulfillment_preview_shipments);
    self
  }

  pub fn fulfillment_preview_shipments(&self) -> Option<&::models::FulfillmentPreviewShipmentList> {
    self.fulfillment_preview_shipments.as_ref()
  }

  pub fn reset_fulfillment_preview_shipments(&mut self) {
    self.fulfillment_preview_shipments = None;
  }

  pub fn set_unfulfillable_preview_items(&mut self, unfulfillable_preview_items: ::models::UnfulfillablePreviewItemList) {
    self.unfulfillable_preview_items = Some(unfulfillable_preview_items);
  }

  pub fn with_unfulfillable_preview_items(mut self, unfulfillable_preview_items: ::models::UnfulfillablePreviewItemList) -> FulfillmentPreview {
    self.unfulfillable_preview_items = Some(unfulfillable_preview_items);
    self
  }

  pub fn unfulfillable_preview_items(&self) -> Option<&::models::UnfulfillablePreviewItemList> {
    self.unfulfillable_preview_items.as_ref()
  }

  pub fn reset_unfulfillable_preview_items(&mut self) {
    self.unfulfillable_preview_items = None;
  }

  pub fn set_order_unfulfillable_reasons(&mut self, order_unfulfillable_reasons: ::models::StringList) {
    self.order_unfulfillable_reasons = Some(order_unfulfillable_reasons);
  }

  pub fn with_order_unfulfillable_reasons(mut self, order_unfulfillable_reasons: ::models::StringList) -> FulfillmentPreview {
    self.order_unfulfillable_reasons = Some(order_unfulfillable_reasons);
    self
  }

  pub fn order_unfulfillable_reasons(&self) -> Option<&::models::StringList> {
    self.order_unfulfillable_reasons.as_ref()
  }

  pub fn reset_order_unfulfillable_reasons(&mut self) {
    self.order_unfulfillable_reasons = None;
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = marketplace_id;
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> FulfillmentPreview {
    self.marketplace_id = marketplace_id;
    self
  }

  pub fn marketplace_id(&self) -> &String {
    &self.marketplace_id
  }


  pub fn set_feature_constraints(&mut self, feature_constraints: Vec<::models::FeatureSettings>) {
    self.feature_constraints = Some(feature_constraints);
  }

  pub fn with_feature_constraints(mut self, feature_constraints: Vec<::models::FeatureSettings>) -> FulfillmentPreview {
    self.feature_constraints = Some(feature_constraints);
    self
  }

  pub fn feature_constraints(&self) -> Option<&Vec<::models::FeatureSettings>> {
    self.feature_constraints.as_ref()
  }

  pub fn reset_feature_constraints(&mut self) {
    self.feature_constraints = None;
  }

}



