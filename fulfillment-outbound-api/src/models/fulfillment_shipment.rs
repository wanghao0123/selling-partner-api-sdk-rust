/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FulfillmentShipment : Delivery and item information for a shipment in a fulfillment order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FulfillmentShipment {
  /// A shipment identifier assigned by Amazon.
  #[serde(rename = "amazonShipmentId")]
  amazon_shipment_id: String,
  /// An identifier for the fulfillment center that the shipment will be sent from.
  #[serde(rename = "fulfillmentCenterId")]
  fulfillment_center_id: String,
  /// The current status of the shipment.
  #[serde(rename = "fulfillmentShipmentStatus")]
  fulfillment_shipment_status: String,
  /// The meaning of the shippingDate value depends on the current status of the shipment. If the current value of FulfillmentShipmentStatus is:  * Pending - shippingDate represents the estimated time that the shipment will leave the Amazon fulfillment center.  * Shipped - shippingDate represents the date that the shipment left the Amazon fulfillment center. If a shipment includes more than one package, shippingDate applies to all of the packages in the shipment. If the value of FulfillmentShipmentStatus is CancelledByFulfiller or CancelledBySeller, shippingDate is not returned. The value must be in ISO 8601 date time format.
  #[serde(rename = "shippingDate")]
  shipping_date: Option<::models::Timestamp>,
  /// The estimated arrival date and time of the shipment, in ISO 8601 date time format. Note that this value can change over time. If a shipment includes more than one package, estimatedArrivalDate applies to all of the packages in the shipment. If the shipment has been cancelled, estimatedArrivalDate is not returned.
  #[serde(rename = "estimatedArrivalDate")]
  estimated_arrival_date: Option<::models::Timestamp>,
  /// Provides additional insight into shipment timeline. Primairly used to communicate that actual delivery dates aren't available.
  #[serde(rename = "shippingNotes")]
  shipping_notes: Option<Vec<String>>,
  #[serde(rename = "fulfillmentShipmentItem")]
  fulfillment_shipment_item: ::models::FulfillmentShipmentItemList,
  #[serde(rename = "fulfillmentShipmentPackage")]
  fulfillment_shipment_package: Option<::models::FulfillmentShipmentPackageList>
}

impl FulfillmentShipment {
  /// Delivery and item information for a shipment in a fulfillment order.
  pub fn new(amazon_shipment_id: String, fulfillment_center_id: String, fulfillment_shipment_status: String, fulfillment_shipment_item: ::models::FulfillmentShipmentItemList) -> FulfillmentShipment {
    FulfillmentShipment {
      amazon_shipment_id: amazon_shipment_id,
      fulfillment_center_id: fulfillment_center_id,
      fulfillment_shipment_status: fulfillment_shipment_status,
      shipping_date: None,
      estimated_arrival_date: None,
      shipping_notes: None,
      fulfillment_shipment_item: fulfillment_shipment_item,
      fulfillment_shipment_package: None
    }
  }

  pub fn set_amazon_shipment_id(&mut self, amazon_shipment_id: String) {
    self.amazon_shipment_id = amazon_shipment_id;
  }

  pub fn with_amazon_shipment_id(mut self, amazon_shipment_id: String) -> FulfillmentShipment {
    self.amazon_shipment_id = amazon_shipment_id;
    self
  }

  pub fn amazon_shipment_id(&self) -> &String {
    &self.amazon_shipment_id
  }


  pub fn set_fulfillment_center_id(&mut self, fulfillment_center_id: String) {
    self.fulfillment_center_id = fulfillment_center_id;
  }

  pub fn with_fulfillment_center_id(mut self, fulfillment_center_id: String) -> FulfillmentShipment {
    self.fulfillment_center_id = fulfillment_center_id;
    self
  }

  pub fn fulfillment_center_id(&self) -> &String {
    &self.fulfillment_center_id
  }


  pub fn set_fulfillment_shipment_status(&mut self, fulfillment_shipment_status: String) {
    self.fulfillment_shipment_status = fulfillment_shipment_status;
  }

  pub fn with_fulfillment_shipment_status(mut self, fulfillment_shipment_status: String) -> FulfillmentShipment {
    self.fulfillment_shipment_status = fulfillment_shipment_status;
    self
  }

  pub fn fulfillment_shipment_status(&self) -> &String {
    &self.fulfillment_shipment_status
  }


  pub fn set_shipping_date(&mut self, shipping_date: ::models::Timestamp) {
    self.shipping_date = Some(shipping_date);
  }

  pub fn with_shipping_date(mut self, shipping_date: ::models::Timestamp) -> FulfillmentShipment {
    self.shipping_date = Some(shipping_date);
    self
  }

  pub fn shipping_date(&self) -> Option<&::models::Timestamp> {
    self.shipping_date.as_ref()
  }

  pub fn reset_shipping_date(&mut self) {
    self.shipping_date = None;
  }

  pub fn set_estimated_arrival_date(&mut self, estimated_arrival_date: ::models::Timestamp) {
    self.estimated_arrival_date = Some(estimated_arrival_date);
  }

  pub fn with_estimated_arrival_date(mut self, estimated_arrival_date: ::models::Timestamp) -> FulfillmentShipment {
    self.estimated_arrival_date = Some(estimated_arrival_date);
    self
  }

  pub fn estimated_arrival_date(&self) -> Option<&::models::Timestamp> {
    self.estimated_arrival_date.as_ref()
  }

  pub fn reset_estimated_arrival_date(&mut self) {
    self.estimated_arrival_date = None;
  }

  pub fn set_shipping_notes(&mut self, shipping_notes: Vec<String>) {
    self.shipping_notes = Some(shipping_notes);
  }

  pub fn with_shipping_notes(mut self, shipping_notes: Vec<String>) -> FulfillmentShipment {
    self.shipping_notes = Some(shipping_notes);
    self
  }

  pub fn shipping_notes(&self) -> Option<&Vec<String>> {
    self.shipping_notes.as_ref()
  }

  pub fn reset_shipping_notes(&mut self) {
    self.shipping_notes = None;
  }

  pub fn set_fulfillment_shipment_item(&mut self, fulfillment_shipment_item: ::models::FulfillmentShipmentItemList) {
    self.fulfillment_shipment_item = fulfillment_shipment_item;
  }

  pub fn with_fulfillment_shipment_item(mut self, fulfillment_shipment_item: ::models::FulfillmentShipmentItemList) -> FulfillmentShipment {
    self.fulfillment_shipment_item = fulfillment_shipment_item;
    self
  }

  pub fn fulfillment_shipment_item(&self) -> &::models::FulfillmentShipmentItemList {
    &self.fulfillment_shipment_item
  }


  pub fn set_fulfillment_shipment_package(&mut self, fulfillment_shipment_package: ::models::FulfillmentShipmentPackageList) {
    self.fulfillment_shipment_package = Some(fulfillment_shipment_package);
  }

  pub fn with_fulfillment_shipment_package(mut self, fulfillment_shipment_package: ::models::FulfillmentShipmentPackageList) -> FulfillmentShipment {
    self.fulfillment_shipment_package = Some(fulfillment_shipment_package);
    self
  }

  pub fn fulfillment_shipment_package(&self) -> Option<&::models::FulfillmentShipmentPackageList> {
    self.fulfillment_shipment_package.as_ref()
  }

  pub fn reset_fulfillment_shipment_package(&mut self) {
    self.fulfillment_shipment_package = None;
  }

}



