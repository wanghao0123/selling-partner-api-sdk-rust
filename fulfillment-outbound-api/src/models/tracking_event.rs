/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TrackingEvent : Information for tracking package deliveries.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TrackingEvent {
  /// The date and time that the delivery event took place, in ISO 8601 date time format.
  #[serde(rename = "eventDate")]
  event_date: ::models::Timestamp,
  /// The city where the delivery event took place.
  #[serde(rename = "eventAddress")]
  event_address: ::models::TrackingAddress,
  /// The event code for the delivery event.
  #[serde(rename = "eventCode")]
  event_code: ::models::EventCode,
  /// A description for the corresponding event code.
  #[serde(rename = "eventDescription")]
  event_description: String
}

impl TrackingEvent {
  /// Information for tracking package deliveries.
  pub fn new(event_date: ::models::Timestamp, event_address: ::models::TrackingAddress, event_code: ::models::EventCode, event_description: String) -> TrackingEvent {
    TrackingEvent {
      event_date: event_date,
      event_address: event_address,
      event_code: event_code,
      event_description: event_description
    }
  }

  pub fn set_event_date(&mut self, event_date: ::models::Timestamp) {
    self.event_date = event_date;
  }

  pub fn with_event_date(mut self, event_date: ::models::Timestamp) -> TrackingEvent {
    self.event_date = event_date;
    self
  }

  pub fn event_date(&self) -> &::models::Timestamp {
    &self.event_date
  }


  pub fn set_event_address(&mut self, event_address: ::models::TrackingAddress) {
    self.event_address = event_address;
  }

  pub fn with_event_address(mut self, event_address: ::models::TrackingAddress) -> TrackingEvent {
    self.event_address = event_address;
    self
  }

  pub fn event_address(&self) -> &::models::TrackingAddress {
    &self.event_address
  }


  pub fn set_event_code(&mut self, event_code: ::models::EventCode) {
    self.event_code = event_code;
  }

  pub fn with_event_code(mut self, event_code: ::models::EventCode) -> TrackingEvent {
    self.event_code = event_code;
    self
  }

  pub fn event_code(&self) -> &::models::EventCode {
    &self.event_code
  }


  pub fn set_event_description(&mut self, event_description: String) {
    self.event_description = event_description;
  }

  pub fn with_event_description(mut self, event_description: String) -> TrackingEvent {
    self.event_description = event_description;
    self
  }

  pub fn event_description(&self) -> &String {
    &self.event_description
  }


}



