/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ReturnItem : An item that Amazon accepted for return.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReturnItem {
  /// An identifier assigned by the seller to the return item.
  #[serde(rename = "sellerReturnItemId")]
  seller_return_item_id: String,
  /// The identifier assigned to the item by the seller when the fulfillment order was created.
  #[serde(rename = "sellerFulfillmentOrderItemId")]
  seller_fulfillment_order_item_id: String,
  /// The identifier for the shipment that is associated with the return item.
  #[serde(rename = "amazonShipmentId")]
  amazon_shipment_id: String,
  /// The return reason code assigned to the return item by the seller.
  #[serde(rename = "sellerReturnReasonCode")]
  seller_return_reason_code: String,
  /// An optional comment about the return item.
  #[serde(rename = "returnComment")]
  return_comment: Option<String>,
  /// The return reason code that the Amazon fulfillment center assigned to the return item.
  #[serde(rename = "amazonReturnReasonCode")]
  amazon_return_reason_code: Option<String>,
  /// Indicates if the return item has been processed by an Amazon fulfillment center.
  #[serde(rename = "status")]
  status: ::models::FulfillmentReturnItemStatus,
  /// Indicates when the status last changed.
  #[serde(rename = "statusChangedDate")]
  status_changed_date: ::models::Timestamp,
  /// Identifies the return authorization used to return this item. See ReturnAuthorization.
  #[serde(rename = "returnAuthorizationId")]
  return_authorization_id: Option<String>,
  #[serde(rename = "returnReceivedCondition")]
  return_received_condition: Option<::models::ReturnItemDisposition>,
  /// The identifier for the Amazon fulfillment center that processed the return item.
  #[serde(rename = "fulfillmentCenterId")]
  fulfillment_center_id: Option<String>
}

impl ReturnItem {
  /// An item that Amazon accepted for return.
  pub fn new(seller_return_item_id: String, seller_fulfillment_order_item_id: String, amazon_shipment_id: String, seller_return_reason_code: String, status: ::models::FulfillmentReturnItemStatus, status_changed_date: ::models::Timestamp) -> ReturnItem {
    ReturnItem {
      seller_return_item_id: seller_return_item_id,
      seller_fulfillment_order_item_id: seller_fulfillment_order_item_id,
      amazon_shipment_id: amazon_shipment_id,
      seller_return_reason_code: seller_return_reason_code,
      return_comment: None,
      amazon_return_reason_code: None,
      status: status,
      status_changed_date: status_changed_date,
      return_authorization_id: None,
      return_received_condition: None,
      fulfillment_center_id: None
    }
  }

  pub fn set_seller_return_item_id(&mut self, seller_return_item_id: String) {
    self.seller_return_item_id = seller_return_item_id;
  }

  pub fn with_seller_return_item_id(mut self, seller_return_item_id: String) -> ReturnItem {
    self.seller_return_item_id = seller_return_item_id;
    self
  }

  pub fn seller_return_item_id(&self) -> &String {
    &self.seller_return_item_id
  }


  pub fn set_seller_fulfillment_order_item_id(&mut self, seller_fulfillment_order_item_id: String) {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
  }

  pub fn with_seller_fulfillment_order_item_id(mut self, seller_fulfillment_order_item_id: String) -> ReturnItem {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
    self
  }

  pub fn seller_fulfillment_order_item_id(&self) -> &String {
    &self.seller_fulfillment_order_item_id
  }


  pub fn set_amazon_shipment_id(&mut self, amazon_shipment_id: String) {
    self.amazon_shipment_id = amazon_shipment_id;
  }

  pub fn with_amazon_shipment_id(mut self, amazon_shipment_id: String) -> ReturnItem {
    self.amazon_shipment_id = amazon_shipment_id;
    self
  }

  pub fn amazon_shipment_id(&self) -> &String {
    &self.amazon_shipment_id
  }


  pub fn set_seller_return_reason_code(&mut self, seller_return_reason_code: String) {
    self.seller_return_reason_code = seller_return_reason_code;
  }

  pub fn with_seller_return_reason_code(mut self, seller_return_reason_code: String) -> ReturnItem {
    self.seller_return_reason_code = seller_return_reason_code;
    self
  }

  pub fn seller_return_reason_code(&self) -> &String {
    &self.seller_return_reason_code
  }


  pub fn set_return_comment(&mut self, return_comment: String) {
    self.return_comment = Some(return_comment);
  }

  pub fn with_return_comment(mut self, return_comment: String) -> ReturnItem {
    self.return_comment = Some(return_comment);
    self
  }

  pub fn return_comment(&self) -> Option<&String> {
    self.return_comment.as_ref()
  }

  pub fn reset_return_comment(&mut self) {
    self.return_comment = None;
  }

  pub fn set_amazon_return_reason_code(&mut self, amazon_return_reason_code: String) {
    self.amazon_return_reason_code = Some(amazon_return_reason_code);
  }

  pub fn with_amazon_return_reason_code(mut self, amazon_return_reason_code: String) -> ReturnItem {
    self.amazon_return_reason_code = Some(amazon_return_reason_code);
    self
  }

  pub fn amazon_return_reason_code(&self) -> Option<&String> {
    self.amazon_return_reason_code.as_ref()
  }

  pub fn reset_amazon_return_reason_code(&mut self) {
    self.amazon_return_reason_code = None;
  }

  pub fn set_status(&mut self, status: ::models::FulfillmentReturnItemStatus) {
    self.status = status;
  }

  pub fn with_status(mut self, status: ::models::FulfillmentReturnItemStatus) -> ReturnItem {
    self.status = status;
    self
  }

  pub fn status(&self) -> &::models::FulfillmentReturnItemStatus {
    &self.status
  }


  pub fn set_status_changed_date(&mut self, status_changed_date: ::models::Timestamp) {
    self.status_changed_date = status_changed_date;
  }

  pub fn with_status_changed_date(mut self, status_changed_date: ::models::Timestamp) -> ReturnItem {
    self.status_changed_date = status_changed_date;
    self
  }

  pub fn status_changed_date(&self) -> &::models::Timestamp {
    &self.status_changed_date
  }


  pub fn set_return_authorization_id(&mut self, return_authorization_id: String) {
    self.return_authorization_id = Some(return_authorization_id);
  }

  pub fn with_return_authorization_id(mut self, return_authorization_id: String) -> ReturnItem {
    self.return_authorization_id = Some(return_authorization_id);
    self
  }

  pub fn return_authorization_id(&self) -> Option<&String> {
    self.return_authorization_id.as_ref()
  }

  pub fn reset_return_authorization_id(&mut self) {
    self.return_authorization_id = None;
  }

  pub fn set_return_received_condition(&mut self, return_received_condition: ::models::ReturnItemDisposition) {
    self.return_received_condition = Some(return_received_condition);
  }

  pub fn with_return_received_condition(mut self, return_received_condition: ::models::ReturnItemDisposition) -> ReturnItem {
    self.return_received_condition = Some(return_received_condition);
    self
  }

  pub fn return_received_condition(&self) -> Option<&::models::ReturnItemDisposition> {
    self.return_received_condition.as_ref()
  }

  pub fn reset_return_received_condition(&mut self) {
    self.return_received_condition = None;
  }

  pub fn set_fulfillment_center_id(&mut self, fulfillment_center_id: String) {
    self.fulfillment_center_id = Some(fulfillment_center_id);
  }

  pub fn with_fulfillment_center_id(mut self, fulfillment_center_id: String) -> ReturnItem {
    self.fulfillment_center_id = Some(fulfillment_center_id);
    self
  }

  pub fn fulfillment_center_id(&self) -> Option<&String> {
    self.fulfillment_center_id.as_ref()
  }

  pub fn reset_fulfillment_center_id(&mut self) {
    self.fulfillment_center_id = None;
  }

}



