/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Feature : A Multi-Channel Fulfillment feature.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Feature {
  /// The feature name.
  #[serde(rename = "featureName")]
  feature_name: String,
  /// The feature description.
  #[serde(rename = "featureDescription")]
  feature_description: String,
  /// When true, indicates that the seller is eligible to use the feature.
  #[serde(rename = "sellerEligible")]
  seller_eligible: Option<bool>
}

impl Feature {
  /// A Multi-Channel Fulfillment feature.
  pub fn new(feature_name: String, feature_description: String) -> Feature {
    Feature {
      feature_name: feature_name,
      feature_description: feature_description,
      seller_eligible: None
    }
  }

  pub fn set_feature_name(&mut self, feature_name: String) {
    self.feature_name = feature_name;
  }

  pub fn with_feature_name(mut self, feature_name: String) -> Feature {
    self.feature_name = feature_name;
    self
  }

  pub fn feature_name(&self) -> &String {
    &self.feature_name
  }


  pub fn set_feature_description(&mut self, feature_description: String) {
    self.feature_description = feature_description;
  }

  pub fn with_feature_description(mut self, feature_description: String) -> Feature {
    self.feature_description = feature_description;
    self
  }

  pub fn feature_description(&self) -> &String {
    &self.feature_description
  }


  pub fn set_seller_eligible(&mut self, seller_eligible: bool) {
    self.seller_eligible = Some(seller_eligible);
  }

  pub fn with_seller_eligible(mut self, seller_eligible: bool) -> Feature {
    self.seller_eligible = Some(seller_eligible);
    self
  }

  pub fn seller_eligible(&self) -> Option<&bool> {
    self.seller_eligible.as_ref()
  }

  pub fn reset_seller_eligible(&mut self) {
    self.seller_eligible = None;
  }

}



