/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetFulfillmentPreviewItem : Item information for a fulfillment order preview.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetFulfillmentPreviewItem {
  /// The seller SKU of the item.
  #[serde(rename = "sellerSku")]
  seller_sku: String,
  #[serde(rename = "quantity")]
  quantity: ::models::Quantity,
  /// The monetary value assigned by the seller to this item. This is a required field if this order is an export order.
  #[serde(rename = "perUnitDeclaredValue")]
  per_unit_declared_value: Option<::models::Money>,
  /// A fulfillment order item identifier that the seller creates to track items in the fulfillment preview.
  #[serde(rename = "sellerFulfillmentOrderItemId")]
  seller_fulfillment_order_item_id: String
}

impl GetFulfillmentPreviewItem {
  /// Item information for a fulfillment order preview.
  pub fn new(seller_sku: String, quantity: ::models::Quantity, seller_fulfillment_order_item_id: String) -> GetFulfillmentPreviewItem {
    GetFulfillmentPreviewItem {
      seller_sku: seller_sku,
      quantity: quantity,
      per_unit_declared_value: None,
      seller_fulfillment_order_item_id: seller_fulfillment_order_item_id
    }
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = seller_sku;
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> GetFulfillmentPreviewItem {
    self.seller_sku = seller_sku;
    self
  }

  pub fn seller_sku(&self) -> &String {
    &self.seller_sku
  }


  pub fn set_quantity(&mut self, quantity: ::models::Quantity) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: ::models::Quantity) -> GetFulfillmentPreviewItem {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &::models::Quantity {
    &self.quantity
  }


  pub fn set_per_unit_declared_value(&mut self, per_unit_declared_value: ::models::Money) {
    self.per_unit_declared_value = Some(per_unit_declared_value);
  }

  pub fn with_per_unit_declared_value(mut self, per_unit_declared_value: ::models::Money) -> GetFulfillmentPreviewItem {
    self.per_unit_declared_value = Some(per_unit_declared_value);
    self
  }

  pub fn per_unit_declared_value(&self) -> Option<&::models::Money> {
    self.per_unit_declared_value.as_ref()
  }

  pub fn reset_per_unit_declared_value(&mut self) {
    self.per_unit_declared_value = None;
  }

  pub fn set_seller_fulfillment_order_item_id(&mut self, seller_fulfillment_order_item_id: String) {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
  }

  pub fn with_seller_fulfillment_order_item_id(mut self, seller_fulfillment_order_item_id: String) -> GetFulfillmentPreviewItem {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
    self
  }

  pub fn seller_fulfillment_order_item_id(&self) -> &String {
    &self.seller_fulfillment_order_item_id
  }


}



