/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UpdateFulfillmentOrderRequest {
  /// The marketplace the fulfillment order is placed against.
  #[serde(rename = "marketplaceId")]
  marketplace_id: Option<String>,
  /// A fulfillment order identifier that the seller creates. This value displays as the order identifier in recipient-facing materials such as the outbound shipment packing slip. The value of DisplayableOrderId should match the order identifier that the seller provides to the recipient. The seller can use the SellerFulfillmentOrderId for this value or they can specify an alternate value if they want the recipient to reference an alternate order identifier.
  #[serde(rename = "displayableOrderId")]
  displayable_order_id: Option<String>,
  /// The date and time of the fulfillment order. Displays as the order date in recipient-facing materials such as the outbound shipment packing slip.
  #[serde(rename = "displayableOrderDate")]
  displayable_order_date: Option<::models::Timestamp>,
  /// Order-specific text that appears in recipient-facing materials such as the outbound shipment packing slip.
  #[serde(rename = "displayableOrderComment")]
  displayable_order_comment: Option<String>,
  #[serde(rename = "shippingSpeedCategory")]
  shipping_speed_category: Option<::models::ShippingSpeedCategory>,
  /// The destination address for the fulfillment order.
  #[serde(rename = "destinationAddress")]
  destination_address: Option<::models::Address>,
  #[serde(rename = "fulfillmentAction")]
  fulfillment_action: Option<::models::FulfillmentAction>,
  #[serde(rename = "fulfillmentPolicy")]
  fulfillment_policy: Option<::models::FulfillmentPolicy>,
  /// The two-character country code for the country from which the fulfillment order ships. Must be in ISO 3166-1 alpha-2 format.
  #[serde(rename = "shipFromCountryCode")]
  ship_from_country_code: Option<String>,
  #[serde(rename = "notificationEmails")]
  notification_emails: Option<::models::NotificationEmailList>,
  /// A list of features and their fulfillment policies to apply to the order.
  #[serde(rename = "featureConstraints")]
  feature_constraints: Option<Vec<::models::FeatureSettings>>,
  /// A list of items to include in the fulfillment order preview, including quantity.
  #[serde(rename = "items")]
  items: Option<::models::UpdateFulfillmentOrderItemList>
}

impl UpdateFulfillmentOrderRequest {
  pub fn new() -> UpdateFulfillmentOrderRequest {
    UpdateFulfillmentOrderRequest {
      marketplace_id: None,
      displayable_order_id: None,
      displayable_order_date: None,
      displayable_order_comment: None,
      shipping_speed_category: None,
      destination_address: None,
      fulfillment_action: None,
      fulfillment_policy: None,
      ship_from_country_code: None,
      notification_emails: None,
      feature_constraints: None,
      items: None
    }
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = Some(marketplace_id);
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> UpdateFulfillmentOrderRequest {
    self.marketplace_id = Some(marketplace_id);
    self
  }

  pub fn marketplace_id(&self) -> Option<&String> {
    self.marketplace_id.as_ref()
  }

  pub fn reset_marketplace_id(&mut self) {
    self.marketplace_id = None;
  }

  pub fn set_displayable_order_id(&mut self, displayable_order_id: String) {
    self.displayable_order_id = Some(displayable_order_id);
  }

  pub fn with_displayable_order_id(mut self, displayable_order_id: String) -> UpdateFulfillmentOrderRequest {
    self.displayable_order_id = Some(displayable_order_id);
    self
  }

  pub fn displayable_order_id(&self) -> Option<&String> {
    self.displayable_order_id.as_ref()
  }

  pub fn reset_displayable_order_id(&mut self) {
    self.displayable_order_id = None;
  }

  pub fn set_displayable_order_date(&mut self, displayable_order_date: ::models::Timestamp) {
    self.displayable_order_date = Some(displayable_order_date);
  }

  pub fn with_displayable_order_date(mut self, displayable_order_date: ::models::Timestamp) -> UpdateFulfillmentOrderRequest {
    self.displayable_order_date = Some(displayable_order_date);
    self
  }

  pub fn displayable_order_date(&self) -> Option<&::models::Timestamp> {
    self.displayable_order_date.as_ref()
  }

  pub fn reset_displayable_order_date(&mut self) {
    self.displayable_order_date = None;
  }

  pub fn set_displayable_order_comment(&mut self, displayable_order_comment: String) {
    self.displayable_order_comment = Some(displayable_order_comment);
  }

  pub fn with_displayable_order_comment(mut self, displayable_order_comment: String) -> UpdateFulfillmentOrderRequest {
    self.displayable_order_comment = Some(displayable_order_comment);
    self
  }

  pub fn displayable_order_comment(&self) -> Option<&String> {
    self.displayable_order_comment.as_ref()
  }

  pub fn reset_displayable_order_comment(&mut self) {
    self.displayable_order_comment = None;
  }

  pub fn set_shipping_speed_category(&mut self, shipping_speed_category: ::models::ShippingSpeedCategory) {
    self.shipping_speed_category = Some(shipping_speed_category);
  }

  pub fn with_shipping_speed_category(mut self, shipping_speed_category: ::models::ShippingSpeedCategory) -> UpdateFulfillmentOrderRequest {
    self.shipping_speed_category = Some(shipping_speed_category);
    self
  }

  pub fn shipping_speed_category(&self) -> Option<&::models::ShippingSpeedCategory> {
    self.shipping_speed_category.as_ref()
  }

  pub fn reset_shipping_speed_category(&mut self) {
    self.shipping_speed_category = None;
  }

  pub fn set_destination_address(&mut self, destination_address: ::models::Address) {
    self.destination_address = Some(destination_address);
  }

  pub fn with_destination_address(mut self, destination_address: ::models::Address) -> UpdateFulfillmentOrderRequest {
    self.destination_address = Some(destination_address);
    self
  }

  pub fn destination_address(&self) -> Option<&::models::Address> {
    self.destination_address.as_ref()
  }

  pub fn reset_destination_address(&mut self) {
    self.destination_address = None;
  }

  pub fn set_fulfillment_action(&mut self, fulfillment_action: ::models::FulfillmentAction) {
    self.fulfillment_action = Some(fulfillment_action);
  }

  pub fn with_fulfillment_action(mut self, fulfillment_action: ::models::FulfillmentAction) -> UpdateFulfillmentOrderRequest {
    self.fulfillment_action = Some(fulfillment_action);
    self
  }

  pub fn fulfillment_action(&self) -> Option<&::models::FulfillmentAction> {
    self.fulfillment_action.as_ref()
  }

  pub fn reset_fulfillment_action(&mut self) {
    self.fulfillment_action = None;
  }

  pub fn set_fulfillment_policy(&mut self, fulfillment_policy: ::models::FulfillmentPolicy) {
    self.fulfillment_policy = Some(fulfillment_policy);
  }

  pub fn with_fulfillment_policy(mut self, fulfillment_policy: ::models::FulfillmentPolicy) -> UpdateFulfillmentOrderRequest {
    self.fulfillment_policy = Some(fulfillment_policy);
    self
  }

  pub fn fulfillment_policy(&self) -> Option<&::models::FulfillmentPolicy> {
    self.fulfillment_policy.as_ref()
  }

  pub fn reset_fulfillment_policy(&mut self) {
    self.fulfillment_policy = None;
  }

  pub fn set_ship_from_country_code(&mut self, ship_from_country_code: String) {
    self.ship_from_country_code = Some(ship_from_country_code);
  }

  pub fn with_ship_from_country_code(mut self, ship_from_country_code: String) -> UpdateFulfillmentOrderRequest {
    self.ship_from_country_code = Some(ship_from_country_code);
    self
  }

  pub fn ship_from_country_code(&self) -> Option<&String> {
    self.ship_from_country_code.as_ref()
  }

  pub fn reset_ship_from_country_code(&mut self) {
    self.ship_from_country_code = None;
  }

  pub fn set_notification_emails(&mut self, notification_emails: ::models::NotificationEmailList) {
    self.notification_emails = Some(notification_emails);
  }

  pub fn with_notification_emails(mut self, notification_emails: ::models::NotificationEmailList) -> UpdateFulfillmentOrderRequest {
    self.notification_emails = Some(notification_emails);
    self
  }

  pub fn notification_emails(&self) -> Option<&::models::NotificationEmailList> {
    self.notification_emails.as_ref()
  }

  pub fn reset_notification_emails(&mut self) {
    self.notification_emails = None;
  }

  pub fn set_feature_constraints(&mut self, feature_constraints: Vec<::models::FeatureSettings>) {
    self.feature_constraints = Some(feature_constraints);
  }

  pub fn with_feature_constraints(mut self, feature_constraints: Vec<::models::FeatureSettings>) -> UpdateFulfillmentOrderRequest {
    self.feature_constraints = Some(feature_constraints);
    self
  }

  pub fn feature_constraints(&self) -> Option<&Vec<::models::FeatureSettings>> {
    self.feature_constraints.as_ref()
  }

  pub fn reset_feature_constraints(&mut self) {
    self.feature_constraints = None;
  }

  pub fn set_items(&mut self, items: ::models::UpdateFulfillmentOrderItemList) {
    self.items = Some(items);
  }

  pub fn with_items(mut self, items: ::models::UpdateFulfillmentOrderItemList) -> UpdateFulfillmentOrderRequest {
    self.items = Some(items);
    self
  }

  pub fn items(&self) -> Option<&::models::UpdateFulfillmentOrderItemList> {
    self.items.as_ref()
  }

  pub fn reset_items(&mut self) {
    self.items = None;
  }

}



