/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FulfillmentPreviewShipment : Delivery and item information for a shipment in a fulfillment order preview.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FulfillmentPreviewShipment {
  /// The earliest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time format.
  #[serde(rename = "earliestShipDate")]
  earliest_ship_date: Option<::models::Timestamp>,
  /// The latest date that the shipment is expected to be sent from the fulfillment center, in ISO 8601 date time format.
  #[serde(rename = "latestShipDate")]
  latest_ship_date: Option<::models::Timestamp>,
  /// The earliest date that the shipment is expected to arrive at its destination.
  #[serde(rename = "earliestArrivalDate")]
  earliest_arrival_date: Option<::models::Timestamp>,
  /// The latest date that the shipment is expected to arrive at its destination, in ISO 8601 date time format.
  #[serde(rename = "latestArrivalDate")]
  latest_arrival_date: Option<::models::Timestamp>,
  /// Provides additional insight into the shipment timeline when exact delivery dates are not able to be precomputed.
  #[serde(rename = "shippingNotes")]
  shipping_notes: Option<Vec<String>>,
  /// Information about the items in the shipment.
  #[serde(rename = "fulfillmentPreviewItems")]
  fulfillment_preview_items: ::models::FulfillmentPreviewItemList
}

impl FulfillmentPreviewShipment {
  /// Delivery and item information for a shipment in a fulfillment order preview.
  pub fn new(fulfillment_preview_items: ::models::FulfillmentPreviewItemList) -> FulfillmentPreviewShipment {
    FulfillmentPreviewShipment {
      earliest_ship_date: None,
      latest_ship_date: None,
      earliest_arrival_date: None,
      latest_arrival_date: None,
      shipping_notes: None,
      fulfillment_preview_items: fulfillment_preview_items
    }
  }

  pub fn set_earliest_ship_date(&mut self, earliest_ship_date: ::models::Timestamp) {
    self.earliest_ship_date = Some(earliest_ship_date);
  }

  pub fn with_earliest_ship_date(mut self, earliest_ship_date: ::models::Timestamp) -> FulfillmentPreviewShipment {
    self.earliest_ship_date = Some(earliest_ship_date);
    self
  }

  pub fn earliest_ship_date(&self) -> Option<&::models::Timestamp> {
    self.earliest_ship_date.as_ref()
  }

  pub fn reset_earliest_ship_date(&mut self) {
    self.earliest_ship_date = None;
  }

  pub fn set_latest_ship_date(&mut self, latest_ship_date: ::models::Timestamp) {
    self.latest_ship_date = Some(latest_ship_date);
  }

  pub fn with_latest_ship_date(mut self, latest_ship_date: ::models::Timestamp) -> FulfillmentPreviewShipment {
    self.latest_ship_date = Some(latest_ship_date);
    self
  }

  pub fn latest_ship_date(&self) -> Option<&::models::Timestamp> {
    self.latest_ship_date.as_ref()
  }

  pub fn reset_latest_ship_date(&mut self) {
    self.latest_ship_date = None;
  }

  pub fn set_earliest_arrival_date(&mut self, earliest_arrival_date: ::models::Timestamp) {
    self.earliest_arrival_date = Some(earliest_arrival_date);
  }

  pub fn with_earliest_arrival_date(mut self, earliest_arrival_date: ::models::Timestamp) -> FulfillmentPreviewShipment {
    self.earliest_arrival_date = Some(earliest_arrival_date);
    self
  }

  pub fn earliest_arrival_date(&self) -> Option<&::models::Timestamp> {
    self.earliest_arrival_date.as_ref()
  }

  pub fn reset_earliest_arrival_date(&mut self) {
    self.earliest_arrival_date = None;
  }

  pub fn set_latest_arrival_date(&mut self, latest_arrival_date: ::models::Timestamp) {
    self.latest_arrival_date = Some(latest_arrival_date);
  }

  pub fn with_latest_arrival_date(mut self, latest_arrival_date: ::models::Timestamp) -> FulfillmentPreviewShipment {
    self.latest_arrival_date = Some(latest_arrival_date);
    self
  }

  pub fn latest_arrival_date(&self) -> Option<&::models::Timestamp> {
    self.latest_arrival_date.as_ref()
  }

  pub fn reset_latest_arrival_date(&mut self) {
    self.latest_arrival_date = None;
  }

  pub fn set_shipping_notes(&mut self, shipping_notes: Vec<String>) {
    self.shipping_notes = Some(shipping_notes);
  }

  pub fn with_shipping_notes(mut self, shipping_notes: Vec<String>) -> FulfillmentPreviewShipment {
    self.shipping_notes = Some(shipping_notes);
    self
  }

  pub fn shipping_notes(&self) -> Option<&Vec<String>> {
    self.shipping_notes.as_ref()
  }

  pub fn reset_shipping_notes(&mut self) {
    self.shipping_notes = None;
  }

  pub fn set_fulfillment_preview_items(&mut self, fulfillment_preview_items: ::models::FulfillmentPreviewItemList) {
    self.fulfillment_preview_items = fulfillment_preview_items;
  }

  pub fn with_fulfillment_preview_items(mut self, fulfillment_preview_items: ::models::FulfillmentPreviewItemList) -> FulfillmentPreviewShipment {
    self.fulfillment_preview_items = fulfillment_preview_items;
    self
  }

  pub fn fulfillment_preview_items(&self) -> &::models::FulfillmentPreviewItemList {
    &self.fulfillment_preview_items
  }


}



