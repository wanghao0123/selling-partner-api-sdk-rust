/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetFeatureSkuResult : The payload for the getFeatureSKU operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetFeatureSkuResult {
  /// The requested marketplace.
  #[serde(rename = "marketplaceId")]
  marketplace_id: String,
  /// The name of the feature.
  #[serde(rename = "featureName")]
  feature_name: String,
  /// When true, the seller SKU is eligible for the requested feature.
  #[serde(rename = "isEligible")]
  is_eligible: bool,
  /// A list of one or more reasons that the seller SKU is ineligibile for the feature.  Possible values: * MERCHANT_NOT_ENROLLED - The merchant isn't enrolled for the feature. * SKU_NOT_ELIGIBLE - The SKU doesn't reside in a warehouse that supports the feature. * INVALID_SKU - There is an issue with the SKU provided.
  #[serde(rename = "ineligibleReasons")]
  ineligible_reasons: Option<Vec<String>>,
  /// Information about the SKU, including the count available, identifiers, and a list of overlapping SKUs that share the same inventory pool.
  #[serde(rename = "skuInfo")]
  sku_info: Option<::models::FeatureSku>
}

impl GetFeatureSkuResult {
  /// The payload for the getFeatureSKU operation.
  pub fn new(marketplace_id: String, feature_name: String, is_eligible: bool) -> GetFeatureSkuResult {
    GetFeatureSkuResult {
      marketplace_id: marketplace_id,
      feature_name: feature_name,
      is_eligible: is_eligible,
      ineligible_reasons: None,
      sku_info: None
    }
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = marketplace_id;
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> GetFeatureSkuResult {
    self.marketplace_id = marketplace_id;
    self
  }

  pub fn marketplace_id(&self) -> &String {
    &self.marketplace_id
  }


  pub fn set_feature_name(&mut self, feature_name: String) {
    self.feature_name = feature_name;
  }

  pub fn with_feature_name(mut self, feature_name: String) -> GetFeatureSkuResult {
    self.feature_name = feature_name;
    self
  }

  pub fn feature_name(&self) -> &String {
    &self.feature_name
  }


  pub fn set_is_eligible(&mut self, is_eligible: bool) {
    self.is_eligible = is_eligible;
  }

  pub fn with_is_eligible(mut self, is_eligible: bool) -> GetFeatureSkuResult {
    self.is_eligible = is_eligible;
    self
  }

  pub fn is_eligible(&self) -> &bool {
    &self.is_eligible
  }


  pub fn set_ineligible_reasons(&mut self, ineligible_reasons: Vec<String>) {
    self.ineligible_reasons = Some(ineligible_reasons);
  }

  pub fn with_ineligible_reasons(mut self, ineligible_reasons: Vec<String>) -> GetFeatureSkuResult {
    self.ineligible_reasons = Some(ineligible_reasons);
    self
  }

  pub fn ineligible_reasons(&self) -> Option<&Vec<String>> {
    self.ineligible_reasons.as_ref()
  }

  pub fn reset_ineligible_reasons(&mut self) {
    self.ineligible_reasons = None;
  }

  pub fn set_sku_info(&mut self, sku_info: ::models::FeatureSku) {
    self.sku_info = Some(sku_info);
  }

  pub fn with_sku_info(mut self, sku_info: ::models::FeatureSku) -> GetFeatureSkuResult {
    self.sku_info = Some(sku_info);
    self
  }

  pub fn sku_info(&self) -> Option<&::models::FeatureSku> {
    self.sku_info.as_ref()
  }

  pub fn reset_sku_info(&mut self) {
    self.sku_info = None;
  }

}



