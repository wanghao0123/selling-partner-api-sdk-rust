/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FulfillmentOrder : General information about a fulfillment order, including its status.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FulfillmentOrder {
  /// The fulfillment order identifier submitted with the createFulfillmentOrder operation.
  #[serde(rename = "sellerFulfillmentOrderId")]
  seller_fulfillment_order_id: String,
  /// The identifier for the marketplace the fulfillment order is placed against.
  #[serde(rename = "marketplaceId")]
  marketplace_id: String,
  /// A fulfillment order identifier submitted with the createFulfillmentOrder operation. Displays as the order identifier in recipient-facing materials such as the packing slip.
  #[serde(rename = "displayableOrderId")]
  displayable_order_id: String,
  /// A date and time submitted with the createFulfillmentOrder operation. Displays as the order date in recipient-facing materials such as the packing slip.
  #[serde(rename = "displayableOrderDate")]
  displayable_order_date: ::models::Timestamp,
  /// A text block submitted with the createFulfillmentOrder operation. Displays in recipient-facing materials such as the packing slip.
  #[serde(rename = "displayableOrderComment")]
  displayable_order_comment: String,
  #[serde(rename = "shippingSpeedCategory")]
  shipping_speed_category: ::models::ShippingSpeedCategory,
  #[serde(rename = "deliveryWindow")]
  delivery_window: Option<::models::DeliveryWindow>,
  /// The destination address submitted with the createFulfillmentOrder operation.
  #[serde(rename = "destinationAddress")]
  destination_address: ::models::Address,
  #[serde(rename = "fulfillmentAction")]
  fulfillment_action: Option<::models::FulfillmentAction>,
  #[serde(rename = "fulfillmentPolicy")]
  fulfillment_policy: Option<::models::FulfillmentPolicy>,
  #[serde(rename = "codSettings")]
  cod_settings: Option<::models::CodSettings>,
  /// The date and time that the fulfillment order was received by an Amazon fulfillment center.
  #[serde(rename = "receivedDate")]
  received_date: ::models::Timestamp,
  #[serde(rename = "fulfillmentOrderStatus")]
  fulfillment_order_status: ::models::FulfillmentOrderStatus,
  /// The date and time that the status of the fulfillment order last changed, in ISO 8601 date time format.
  #[serde(rename = "statusUpdatedDate")]
  status_updated_date: ::models::Timestamp,
  #[serde(rename = "notificationEmails")]
  notification_emails: Option<::models::NotificationEmailList>,
  /// A list of features and their fulfillment policies to apply to the order.
  #[serde(rename = "featureConstraints")]
  feature_constraints: Option<Vec<::models::FeatureSettings>>
}

impl FulfillmentOrder {
  /// General information about a fulfillment order, including its status.
  pub fn new(seller_fulfillment_order_id: String, marketplace_id: String, displayable_order_id: String, displayable_order_date: ::models::Timestamp, displayable_order_comment: String, shipping_speed_category: ::models::ShippingSpeedCategory, destination_address: ::models::Address, received_date: ::models::Timestamp, fulfillment_order_status: ::models::FulfillmentOrderStatus, status_updated_date: ::models::Timestamp) -> FulfillmentOrder {
    FulfillmentOrder {
      seller_fulfillment_order_id: seller_fulfillment_order_id,
      marketplace_id: marketplace_id,
      displayable_order_id: displayable_order_id,
      displayable_order_date: displayable_order_date,
      displayable_order_comment: displayable_order_comment,
      shipping_speed_category: shipping_speed_category,
      delivery_window: None,
      destination_address: destination_address,
      fulfillment_action: None,
      fulfillment_policy: None,
      cod_settings: None,
      received_date: received_date,
      fulfillment_order_status: fulfillment_order_status,
      status_updated_date: status_updated_date,
      notification_emails: None,
      feature_constraints: None
    }
  }

  pub fn set_seller_fulfillment_order_id(&mut self, seller_fulfillment_order_id: String) {
    self.seller_fulfillment_order_id = seller_fulfillment_order_id;
  }

  pub fn with_seller_fulfillment_order_id(mut self, seller_fulfillment_order_id: String) -> FulfillmentOrder {
    self.seller_fulfillment_order_id = seller_fulfillment_order_id;
    self
  }

  pub fn seller_fulfillment_order_id(&self) -> &String {
    &self.seller_fulfillment_order_id
  }


  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = marketplace_id;
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> FulfillmentOrder {
    self.marketplace_id = marketplace_id;
    self
  }

  pub fn marketplace_id(&self) -> &String {
    &self.marketplace_id
  }


  pub fn set_displayable_order_id(&mut self, displayable_order_id: String) {
    self.displayable_order_id = displayable_order_id;
  }

  pub fn with_displayable_order_id(mut self, displayable_order_id: String) -> FulfillmentOrder {
    self.displayable_order_id = displayable_order_id;
    self
  }

  pub fn displayable_order_id(&self) -> &String {
    &self.displayable_order_id
  }


  pub fn set_displayable_order_date(&mut self, displayable_order_date: ::models::Timestamp) {
    self.displayable_order_date = displayable_order_date;
  }

  pub fn with_displayable_order_date(mut self, displayable_order_date: ::models::Timestamp) -> FulfillmentOrder {
    self.displayable_order_date = displayable_order_date;
    self
  }

  pub fn displayable_order_date(&self) -> &::models::Timestamp {
    &self.displayable_order_date
  }


  pub fn set_displayable_order_comment(&mut self, displayable_order_comment: String) {
    self.displayable_order_comment = displayable_order_comment;
  }

  pub fn with_displayable_order_comment(mut self, displayable_order_comment: String) -> FulfillmentOrder {
    self.displayable_order_comment = displayable_order_comment;
    self
  }

  pub fn displayable_order_comment(&self) -> &String {
    &self.displayable_order_comment
  }


  pub fn set_shipping_speed_category(&mut self, shipping_speed_category: ::models::ShippingSpeedCategory) {
    self.shipping_speed_category = shipping_speed_category;
  }

  pub fn with_shipping_speed_category(mut self, shipping_speed_category: ::models::ShippingSpeedCategory) -> FulfillmentOrder {
    self.shipping_speed_category = shipping_speed_category;
    self
  }

  pub fn shipping_speed_category(&self) -> &::models::ShippingSpeedCategory {
    &self.shipping_speed_category
  }


  pub fn set_delivery_window(&mut self, delivery_window: ::models::DeliveryWindow) {
    self.delivery_window = Some(delivery_window);
  }

  pub fn with_delivery_window(mut self, delivery_window: ::models::DeliveryWindow) -> FulfillmentOrder {
    self.delivery_window = Some(delivery_window);
    self
  }

  pub fn delivery_window(&self) -> Option<&::models::DeliveryWindow> {
    self.delivery_window.as_ref()
  }

  pub fn reset_delivery_window(&mut self) {
    self.delivery_window = None;
  }

  pub fn set_destination_address(&mut self, destination_address: ::models::Address) {
    self.destination_address = destination_address;
  }

  pub fn with_destination_address(mut self, destination_address: ::models::Address) -> FulfillmentOrder {
    self.destination_address = destination_address;
    self
  }

  pub fn destination_address(&self) -> &::models::Address {
    &self.destination_address
  }


  pub fn set_fulfillment_action(&mut self, fulfillment_action: ::models::FulfillmentAction) {
    self.fulfillment_action = Some(fulfillment_action);
  }

  pub fn with_fulfillment_action(mut self, fulfillment_action: ::models::FulfillmentAction) -> FulfillmentOrder {
    self.fulfillment_action = Some(fulfillment_action);
    self
  }

  pub fn fulfillment_action(&self) -> Option<&::models::FulfillmentAction> {
    self.fulfillment_action.as_ref()
  }

  pub fn reset_fulfillment_action(&mut self) {
    self.fulfillment_action = None;
  }

  pub fn set_fulfillment_policy(&mut self, fulfillment_policy: ::models::FulfillmentPolicy) {
    self.fulfillment_policy = Some(fulfillment_policy);
  }

  pub fn with_fulfillment_policy(mut self, fulfillment_policy: ::models::FulfillmentPolicy) -> FulfillmentOrder {
    self.fulfillment_policy = Some(fulfillment_policy);
    self
  }

  pub fn fulfillment_policy(&self) -> Option<&::models::FulfillmentPolicy> {
    self.fulfillment_policy.as_ref()
  }

  pub fn reset_fulfillment_policy(&mut self) {
    self.fulfillment_policy = None;
  }

  pub fn set_cod_settings(&mut self, cod_settings: ::models::CodSettings) {
    self.cod_settings = Some(cod_settings);
  }

  pub fn with_cod_settings(mut self, cod_settings: ::models::CodSettings) -> FulfillmentOrder {
    self.cod_settings = Some(cod_settings);
    self
  }

  pub fn cod_settings(&self) -> Option<&::models::CodSettings> {
    self.cod_settings.as_ref()
  }

  pub fn reset_cod_settings(&mut self) {
    self.cod_settings = None;
  }

  pub fn set_received_date(&mut self, received_date: ::models::Timestamp) {
    self.received_date = received_date;
  }

  pub fn with_received_date(mut self, received_date: ::models::Timestamp) -> FulfillmentOrder {
    self.received_date = received_date;
    self
  }

  pub fn received_date(&self) -> &::models::Timestamp {
    &self.received_date
  }


  pub fn set_fulfillment_order_status(&mut self, fulfillment_order_status: ::models::FulfillmentOrderStatus) {
    self.fulfillment_order_status = fulfillment_order_status;
  }

  pub fn with_fulfillment_order_status(mut self, fulfillment_order_status: ::models::FulfillmentOrderStatus) -> FulfillmentOrder {
    self.fulfillment_order_status = fulfillment_order_status;
    self
  }

  pub fn fulfillment_order_status(&self) -> &::models::FulfillmentOrderStatus {
    &self.fulfillment_order_status
  }


  pub fn set_status_updated_date(&mut self, status_updated_date: ::models::Timestamp) {
    self.status_updated_date = status_updated_date;
  }

  pub fn with_status_updated_date(mut self, status_updated_date: ::models::Timestamp) -> FulfillmentOrder {
    self.status_updated_date = status_updated_date;
    self
  }

  pub fn status_updated_date(&self) -> &::models::Timestamp {
    &self.status_updated_date
  }


  pub fn set_notification_emails(&mut self, notification_emails: ::models::NotificationEmailList) {
    self.notification_emails = Some(notification_emails);
  }

  pub fn with_notification_emails(mut self, notification_emails: ::models::NotificationEmailList) -> FulfillmentOrder {
    self.notification_emails = Some(notification_emails);
    self
  }

  pub fn notification_emails(&self) -> Option<&::models::NotificationEmailList> {
    self.notification_emails.as_ref()
  }

  pub fn reset_notification_emails(&mut self) {
    self.notification_emails = None;
  }

  pub fn set_feature_constraints(&mut self, feature_constraints: Vec<::models::FeatureSettings>) {
    self.feature_constraints = Some(feature_constraints);
  }

  pub fn with_feature_constraints(mut self, feature_constraints: Vec<::models::FeatureSettings>) -> FulfillmentOrder {
    self.feature_constraints = Some(feature_constraints);
    self
  }

  pub fn feature_constraints(&self) -> Option<&Vec<::models::FeatureSettings>> {
    self.feature_constraints.as_ref()
  }

  pub fn reset_feature_constraints(&mut self) {
    self.feature_constraints = None;
  }

}



