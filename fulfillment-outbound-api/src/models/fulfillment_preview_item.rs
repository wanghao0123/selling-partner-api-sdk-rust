/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FulfillmentPreviewItem : Item information for a shipment in a fulfillment order preview.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FulfillmentPreviewItem {
  /// The seller SKU of the item.
  #[serde(rename = "sellerSku")]
  seller_sku: String,
  /// The item quantity.
  #[serde(rename = "quantity")]
  quantity: ::models::Quantity,
  /// A fulfillment order item identifier that the seller created with a call to the createFulfillmentOrder operation.
  #[serde(rename = "sellerFulfillmentOrderItemId")]
  seller_fulfillment_order_item_id: String,
  /// The estimated shipping weight of the item quantity for a single item, as identified by sellerSku, in a shipment.
  #[serde(rename = "estimatedShippingWeight")]
  estimated_shipping_weight: Option<::models::Weight>,
  /// The method used to calculate the estimated shipping weight.
  #[serde(rename = "shippingWeightCalculationMethod")]
  shipping_weight_calculation_method: Option<String>
}

impl FulfillmentPreviewItem {
  /// Item information for a shipment in a fulfillment order preview.
  pub fn new(seller_sku: String, quantity: ::models::Quantity, seller_fulfillment_order_item_id: String) -> FulfillmentPreviewItem {
    FulfillmentPreviewItem {
      seller_sku: seller_sku,
      quantity: quantity,
      seller_fulfillment_order_item_id: seller_fulfillment_order_item_id,
      estimated_shipping_weight: None,
      shipping_weight_calculation_method: None
    }
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = seller_sku;
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> FulfillmentPreviewItem {
    self.seller_sku = seller_sku;
    self
  }

  pub fn seller_sku(&self) -> &String {
    &self.seller_sku
  }


  pub fn set_quantity(&mut self, quantity: ::models::Quantity) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: ::models::Quantity) -> FulfillmentPreviewItem {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &::models::Quantity {
    &self.quantity
  }


  pub fn set_seller_fulfillment_order_item_id(&mut self, seller_fulfillment_order_item_id: String) {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
  }

  pub fn with_seller_fulfillment_order_item_id(mut self, seller_fulfillment_order_item_id: String) -> FulfillmentPreviewItem {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
    self
  }

  pub fn seller_fulfillment_order_item_id(&self) -> &String {
    &self.seller_fulfillment_order_item_id
  }


  pub fn set_estimated_shipping_weight(&mut self, estimated_shipping_weight: ::models::Weight) {
    self.estimated_shipping_weight = Some(estimated_shipping_weight);
  }

  pub fn with_estimated_shipping_weight(mut self, estimated_shipping_weight: ::models::Weight) -> FulfillmentPreviewItem {
    self.estimated_shipping_weight = Some(estimated_shipping_weight);
    self
  }

  pub fn estimated_shipping_weight(&self) -> Option<&::models::Weight> {
    self.estimated_shipping_weight.as_ref()
  }

  pub fn reset_estimated_shipping_weight(&mut self) {
    self.estimated_shipping_weight = None;
  }

  pub fn set_shipping_weight_calculation_method(&mut self, shipping_weight_calculation_method: String) {
    self.shipping_weight_calculation_method = Some(shipping_weight_calculation_method);
  }

  pub fn with_shipping_weight_calculation_method(mut self, shipping_weight_calculation_method: String) -> FulfillmentPreviewItem {
    self.shipping_weight_calculation_method = Some(shipping_weight_calculation_method);
    self
  }

  pub fn shipping_weight_calculation_method(&self) -> Option<&String> {
    self.shipping_weight_calculation_method.as_ref()
  }

  pub fn reset_shipping_weight_calculation_method(&mut self) {
    self.shipping_weight_calculation_method = None;
  }

}



