/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FulfillmentShipmentItem : Item information for a shipment in a fulfillment order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FulfillmentShipmentItem {
  /// The seller SKU of the item.
  #[serde(rename = "sellerSku")]
  seller_sku: String,
  /// The fulfillment order item identifier that the seller created and submitted with a call to the createFulfillmentOrder operation.
  #[serde(rename = "sellerFulfillmentOrderItemId")]
  seller_fulfillment_order_item_id: String,
  #[serde(rename = "quantity")]
  quantity: ::models::Quantity,
  /// An identifier for the package that contains the item quantity.
  #[serde(rename = "packageNumber")]
  package_number: Option<i32>,
  /// The serial number of the shipped item.
  #[serde(rename = "serialNumber")]
  serial_number: Option<String>
}

impl FulfillmentShipmentItem {
  /// Item information for a shipment in a fulfillment order.
  pub fn new(seller_sku: String, seller_fulfillment_order_item_id: String, quantity: ::models::Quantity) -> FulfillmentShipmentItem {
    FulfillmentShipmentItem {
      seller_sku: seller_sku,
      seller_fulfillment_order_item_id: seller_fulfillment_order_item_id,
      quantity: quantity,
      package_number: None,
      serial_number: None
    }
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = seller_sku;
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> FulfillmentShipmentItem {
    self.seller_sku = seller_sku;
    self
  }

  pub fn seller_sku(&self) -> &String {
    &self.seller_sku
  }


  pub fn set_seller_fulfillment_order_item_id(&mut self, seller_fulfillment_order_item_id: String) {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
  }

  pub fn with_seller_fulfillment_order_item_id(mut self, seller_fulfillment_order_item_id: String) -> FulfillmentShipmentItem {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
    self
  }

  pub fn seller_fulfillment_order_item_id(&self) -> &String {
    &self.seller_fulfillment_order_item_id
  }


  pub fn set_quantity(&mut self, quantity: ::models::Quantity) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: ::models::Quantity) -> FulfillmentShipmentItem {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &::models::Quantity {
    &self.quantity
  }


  pub fn set_package_number(&mut self, package_number: i32) {
    self.package_number = Some(package_number);
  }

  pub fn with_package_number(mut self, package_number: i32) -> FulfillmentShipmentItem {
    self.package_number = Some(package_number);
    self
  }

  pub fn package_number(&self) -> Option<&i32> {
    self.package_number.as_ref()
  }

  pub fn reset_package_number(&mut self) {
    self.package_number = None;
  }

  pub fn set_serial_number(&mut self, serial_number: String) {
    self.serial_number = Some(serial_number);
  }

  pub fn with_serial_number(mut self, serial_number: String) -> FulfillmentShipmentItem {
    self.serial_number = Some(serial_number);
    self
  }

  pub fn serial_number(&self) -> Option<&String> {
    self.serial_number.as_ref()
  }

  pub fn reset_serial_number(&mut self) {
    self.serial_number = None;
  }

}



