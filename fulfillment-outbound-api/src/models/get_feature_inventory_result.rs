/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetFeatureInventoryResult : The payload for the getEligibileInventory operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetFeatureInventoryResult {
  /// The requested marketplace.
  #[serde(rename = "marketplaceId")]
  marketplace_id: String,
  /// The name of the feature.
  #[serde(rename = "featureName")]
  feature_name: String,
  /// When present and not empty, pass this string token in the next request to return the next response page.
  #[serde(rename = "nextToken")]
  next_token: Option<String>,
  /// An array of SKUs eligible for this feature and the quantity available.
  #[serde(rename = "featureSkus")]
  feature_skus: Option<Vec<::models::FeatureSku>>
}

impl GetFeatureInventoryResult {
  /// The payload for the getEligibileInventory operation.
  pub fn new(marketplace_id: String, feature_name: String) -> GetFeatureInventoryResult {
    GetFeatureInventoryResult {
      marketplace_id: marketplace_id,
      feature_name: feature_name,
      next_token: None,
      feature_skus: None
    }
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = marketplace_id;
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> GetFeatureInventoryResult {
    self.marketplace_id = marketplace_id;
    self
  }

  pub fn marketplace_id(&self) -> &String {
    &self.marketplace_id
  }


  pub fn set_feature_name(&mut self, feature_name: String) {
    self.feature_name = feature_name;
  }

  pub fn with_feature_name(mut self, feature_name: String) -> GetFeatureInventoryResult {
    self.feature_name = feature_name;
    self
  }

  pub fn feature_name(&self) -> &String {
    &self.feature_name
  }


  pub fn set_next_token(&mut self, next_token: String) {
    self.next_token = Some(next_token);
  }

  pub fn with_next_token(mut self, next_token: String) -> GetFeatureInventoryResult {
    self.next_token = Some(next_token);
    self
  }

  pub fn next_token(&self) -> Option<&String> {
    self.next_token.as_ref()
  }

  pub fn reset_next_token(&mut self) {
    self.next_token = None;
  }

  pub fn set_feature_skus(&mut self, feature_skus: Vec<::models::FeatureSku>) {
    self.feature_skus = Some(feature_skus);
  }

  pub fn with_feature_skus(mut self, feature_skus: Vec<::models::FeatureSku>) -> GetFeatureInventoryResult {
    self.feature_skus = Some(feature_skus);
    self
  }

  pub fn feature_skus(&self) -> Option<&Vec<::models::FeatureSku>> {
    self.feature_skus.as_ref()
  }

  pub fn reset_feature_skus(&mut self) {
    self.feature_skus = None;
  }

}



