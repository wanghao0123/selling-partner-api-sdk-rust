/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CodSettings : The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CodSettings {
  /// When true, this fulfillment order requires a COD (Cash On Delivery) payment.
  #[serde(rename = "isCodRequired")]
  is_cod_required: bool,
  /// The amount of the COD charge to be collected from the recipient for a COD order.
  #[serde(rename = "codCharge")]
  cod_charge: Option<::models::Money>,
  /// The amount of the tax on the COD charge to be collected from the recipient for a COD order.
  #[serde(rename = "codChargeTax")]
  cod_charge_tax: Option<::models::Money>,
  /// The amount of the tax on the COD charge to be collected from the recipient for a COD order.
  #[serde(rename = "shippingCharge")]
  shipping_charge: Option<::models::Money>,
  /// The amount of the tax on the shipping charge to be collected from the recipient for a COD order.
  #[serde(rename = "shippingChargeTax")]
  shipping_charge_tax: Option<::models::Money>
}

impl CodSettings {
  /// The COD (Cash On Delivery) charges that you associate with a COD fulfillment order.
  pub fn new(is_cod_required: bool) -> CodSettings {
    CodSettings {
      is_cod_required: is_cod_required,
      cod_charge: None,
      cod_charge_tax: None,
      shipping_charge: None,
      shipping_charge_tax: None
    }
  }

  pub fn set_is_cod_required(&mut self, is_cod_required: bool) {
    self.is_cod_required = is_cod_required;
  }

  pub fn with_is_cod_required(mut self, is_cod_required: bool) -> CodSettings {
    self.is_cod_required = is_cod_required;
    self
  }

  pub fn is_cod_required(&self) -> &bool {
    &self.is_cod_required
  }


  pub fn set_cod_charge(&mut self, cod_charge: ::models::Money) {
    self.cod_charge = Some(cod_charge);
  }

  pub fn with_cod_charge(mut self, cod_charge: ::models::Money) -> CodSettings {
    self.cod_charge = Some(cod_charge);
    self
  }

  pub fn cod_charge(&self) -> Option<&::models::Money> {
    self.cod_charge.as_ref()
  }

  pub fn reset_cod_charge(&mut self) {
    self.cod_charge = None;
  }

  pub fn set_cod_charge_tax(&mut self, cod_charge_tax: ::models::Money) {
    self.cod_charge_tax = Some(cod_charge_tax);
  }

  pub fn with_cod_charge_tax(mut self, cod_charge_tax: ::models::Money) -> CodSettings {
    self.cod_charge_tax = Some(cod_charge_tax);
    self
  }

  pub fn cod_charge_tax(&self) -> Option<&::models::Money> {
    self.cod_charge_tax.as_ref()
  }

  pub fn reset_cod_charge_tax(&mut self) {
    self.cod_charge_tax = None;
  }

  pub fn set_shipping_charge(&mut self, shipping_charge: ::models::Money) {
    self.shipping_charge = Some(shipping_charge);
  }

  pub fn with_shipping_charge(mut self, shipping_charge: ::models::Money) -> CodSettings {
    self.shipping_charge = Some(shipping_charge);
    self
  }

  pub fn shipping_charge(&self) -> Option<&::models::Money> {
    self.shipping_charge.as_ref()
  }

  pub fn reset_shipping_charge(&mut self) {
    self.shipping_charge = None;
  }

  pub fn set_shipping_charge_tax(&mut self, shipping_charge_tax: ::models::Money) {
    self.shipping_charge_tax = Some(shipping_charge_tax);
  }

  pub fn with_shipping_charge_tax(mut self, shipping_charge_tax: ::models::Money) -> CodSettings {
    self.shipping_charge_tax = Some(shipping_charge_tax);
    self
  }

  pub fn shipping_charge_tax(&self) -> Option<&::models::Money> {
    self.shipping_charge_tax.as_ref()
  }

  pub fn reset_shipping_charge_tax(&mut self) {
    self.shipping_charge_tax = None;
  }

}



