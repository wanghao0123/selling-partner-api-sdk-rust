/* 
 * Selling Partner APIs for Fulfillment Outbound
 *
 * The Selling Partner API for Fulfillment Outbound lets you create applications that help a seller fulfill Multi-Channel Fulfillment orders using their inventory in Amazon's fulfillment network. You can get information on both potential and existing fulfillment orders.
 *
 * OpenAPI spec version: 2020-07-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FulfillmentOrderItem : Item information for a fulfillment order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FulfillmentOrderItem {
  /// The seller SKU of the item.
  #[serde(rename = "sellerSku")]
  seller_sku: String,
  /// A fulfillment order item identifier submitted with a call to the createFulfillmentOrder operation.
  #[serde(rename = "sellerFulfillmentOrderItemId")]
  seller_fulfillment_order_item_id: String,
  #[serde(rename = "quantity")]
  quantity: ::models::Quantity,
  /// A message to the gift recipient, if applicable.
  #[serde(rename = "giftMessage")]
  gift_message: Option<String>,
  /// Item-specific text that displays in recipient-facing materials such as the outbound shipment packing slip.
  #[serde(rename = "displayableComment")]
  displayable_comment: Option<String>,
  /// Amazon's fulfillment network SKU of the item.
  #[serde(rename = "fulfillmentNetworkSku")]
  fulfillment_network_sku: Option<String>,
  /// Indicates whether the item is sellable or unsellable.
  #[serde(rename = "orderItemDisposition")]
  order_item_disposition: Option<String>,
  /// The item quantity that was cancelled by the seller.
  #[serde(rename = "cancelledQuantity")]
  cancelled_quantity: ::models::Quantity,
  /// The item quantity that is unfulfillable.
  #[serde(rename = "unfulfillableQuantity")]
  unfulfillable_quantity: ::models::Quantity,
  /// The estimated date and time that the item quantity is scheduled to ship from the fulfillment center. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, estimatedShipDate is not returned.
  #[serde(rename = "estimatedShipDate")]
  estimated_ship_date: Option<::models::Timestamp>,
  /// The estimated arrival date and time of the item quantity. Note that this value can change over time. If the shipment that contains the item quantity has been cancelled, estimatedArrivalDate is not returned.
  #[serde(rename = "estimatedArrivalDate")]
  estimated_arrival_date: Option<::models::Timestamp>,
  /// The amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
  #[serde(rename = "perUnitPrice")]
  per_unit_price: Option<::models::Money>,
  /// The tax on the amount to be collected from the recipient for this item in a COD (Cash On Delivery) order.
  #[serde(rename = "perUnitTax")]
  per_unit_tax: Option<::models::Money>,
  /// The monetary value assigned by the seller to this item.
  #[serde(rename = "perUnitDeclaredValue")]
  per_unit_declared_value: Option<::models::Money>
}

impl FulfillmentOrderItem {
  /// Item information for a fulfillment order.
  pub fn new(seller_sku: String, seller_fulfillment_order_item_id: String, quantity: ::models::Quantity, cancelled_quantity: ::models::Quantity, unfulfillable_quantity: ::models::Quantity) -> FulfillmentOrderItem {
    FulfillmentOrderItem {
      seller_sku: seller_sku,
      seller_fulfillment_order_item_id: seller_fulfillment_order_item_id,
      quantity: quantity,
      gift_message: None,
      displayable_comment: None,
      fulfillment_network_sku: None,
      order_item_disposition: None,
      cancelled_quantity: cancelled_quantity,
      unfulfillable_quantity: unfulfillable_quantity,
      estimated_ship_date: None,
      estimated_arrival_date: None,
      per_unit_price: None,
      per_unit_tax: None,
      per_unit_declared_value: None
    }
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = seller_sku;
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> FulfillmentOrderItem {
    self.seller_sku = seller_sku;
    self
  }

  pub fn seller_sku(&self) -> &String {
    &self.seller_sku
  }


  pub fn set_seller_fulfillment_order_item_id(&mut self, seller_fulfillment_order_item_id: String) {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
  }

  pub fn with_seller_fulfillment_order_item_id(mut self, seller_fulfillment_order_item_id: String) -> FulfillmentOrderItem {
    self.seller_fulfillment_order_item_id = seller_fulfillment_order_item_id;
    self
  }

  pub fn seller_fulfillment_order_item_id(&self) -> &String {
    &self.seller_fulfillment_order_item_id
  }


  pub fn set_quantity(&mut self, quantity: ::models::Quantity) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: ::models::Quantity) -> FulfillmentOrderItem {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &::models::Quantity {
    &self.quantity
  }


  pub fn set_gift_message(&mut self, gift_message: String) {
    self.gift_message = Some(gift_message);
  }

  pub fn with_gift_message(mut self, gift_message: String) -> FulfillmentOrderItem {
    self.gift_message = Some(gift_message);
    self
  }

  pub fn gift_message(&self) -> Option<&String> {
    self.gift_message.as_ref()
  }

  pub fn reset_gift_message(&mut self) {
    self.gift_message = None;
  }

  pub fn set_displayable_comment(&mut self, displayable_comment: String) {
    self.displayable_comment = Some(displayable_comment);
  }

  pub fn with_displayable_comment(mut self, displayable_comment: String) -> FulfillmentOrderItem {
    self.displayable_comment = Some(displayable_comment);
    self
  }

  pub fn displayable_comment(&self) -> Option<&String> {
    self.displayable_comment.as_ref()
  }

  pub fn reset_displayable_comment(&mut self) {
    self.displayable_comment = None;
  }

  pub fn set_fulfillment_network_sku(&mut self, fulfillment_network_sku: String) {
    self.fulfillment_network_sku = Some(fulfillment_network_sku);
  }

  pub fn with_fulfillment_network_sku(mut self, fulfillment_network_sku: String) -> FulfillmentOrderItem {
    self.fulfillment_network_sku = Some(fulfillment_network_sku);
    self
  }

  pub fn fulfillment_network_sku(&self) -> Option<&String> {
    self.fulfillment_network_sku.as_ref()
  }

  pub fn reset_fulfillment_network_sku(&mut self) {
    self.fulfillment_network_sku = None;
  }

  pub fn set_order_item_disposition(&mut self, order_item_disposition: String) {
    self.order_item_disposition = Some(order_item_disposition);
  }

  pub fn with_order_item_disposition(mut self, order_item_disposition: String) -> FulfillmentOrderItem {
    self.order_item_disposition = Some(order_item_disposition);
    self
  }

  pub fn order_item_disposition(&self) -> Option<&String> {
    self.order_item_disposition.as_ref()
  }

  pub fn reset_order_item_disposition(&mut self) {
    self.order_item_disposition = None;
  }

  pub fn set_cancelled_quantity(&mut self, cancelled_quantity: ::models::Quantity) {
    self.cancelled_quantity = cancelled_quantity;
  }

  pub fn with_cancelled_quantity(mut self, cancelled_quantity: ::models::Quantity) -> FulfillmentOrderItem {
    self.cancelled_quantity = cancelled_quantity;
    self
  }

  pub fn cancelled_quantity(&self) -> &::models::Quantity {
    &self.cancelled_quantity
  }


  pub fn set_unfulfillable_quantity(&mut self, unfulfillable_quantity: ::models::Quantity) {
    self.unfulfillable_quantity = unfulfillable_quantity;
  }

  pub fn with_unfulfillable_quantity(mut self, unfulfillable_quantity: ::models::Quantity) -> FulfillmentOrderItem {
    self.unfulfillable_quantity = unfulfillable_quantity;
    self
  }

  pub fn unfulfillable_quantity(&self) -> &::models::Quantity {
    &self.unfulfillable_quantity
  }


  pub fn set_estimated_ship_date(&mut self, estimated_ship_date: ::models::Timestamp) {
    self.estimated_ship_date = Some(estimated_ship_date);
  }

  pub fn with_estimated_ship_date(mut self, estimated_ship_date: ::models::Timestamp) -> FulfillmentOrderItem {
    self.estimated_ship_date = Some(estimated_ship_date);
    self
  }

  pub fn estimated_ship_date(&self) -> Option<&::models::Timestamp> {
    self.estimated_ship_date.as_ref()
  }

  pub fn reset_estimated_ship_date(&mut self) {
    self.estimated_ship_date = None;
  }

  pub fn set_estimated_arrival_date(&mut self, estimated_arrival_date: ::models::Timestamp) {
    self.estimated_arrival_date = Some(estimated_arrival_date);
  }

  pub fn with_estimated_arrival_date(mut self, estimated_arrival_date: ::models::Timestamp) -> FulfillmentOrderItem {
    self.estimated_arrival_date = Some(estimated_arrival_date);
    self
  }

  pub fn estimated_arrival_date(&self) -> Option<&::models::Timestamp> {
    self.estimated_arrival_date.as_ref()
  }

  pub fn reset_estimated_arrival_date(&mut self) {
    self.estimated_arrival_date = None;
  }

  pub fn set_per_unit_price(&mut self, per_unit_price: ::models::Money) {
    self.per_unit_price = Some(per_unit_price);
  }

  pub fn with_per_unit_price(mut self, per_unit_price: ::models::Money) -> FulfillmentOrderItem {
    self.per_unit_price = Some(per_unit_price);
    self
  }

  pub fn per_unit_price(&self) -> Option<&::models::Money> {
    self.per_unit_price.as_ref()
  }

  pub fn reset_per_unit_price(&mut self) {
    self.per_unit_price = None;
  }

  pub fn set_per_unit_tax(&mut self, per_unit_tax: ::models::Money) {
    self.per_unit_tax = Some(per_unit_tax);
  }

  pub fn with_per_unit_tax(mut self, per_unit_tax: ::models::Money) -> FulfillmentOrderItem {
    self.per_unit_tax = Some(per_unit_tax);
    self
  }

  pub fn per_unit_tax(&self) -> Option<&::models::Money> {
    self.per_unit_tax.as_ref()
  }

  pub fn reset_per_unit_tax(&mut self) {
    self.per_unit_tax = None;
  }

  pub fn set_per_unit_declared_value(&mut self, per_unit_declared_value: ::models::Money) {
    self.per_unit_declared_value = Some(per_unit_declared_value);
  }

  pub fn with_per_unit_declared_value(mut self, per_unit_declared_value: ::models::Money) -> FulfillmentOrderItem {
    self.per_unit_declared_value = Some(per_unit_declared_value);
    self
  }

  pub fn per_unit_declared_value(&self) -> Option<&::models::Money> {
    self.per_unit_declared_value.as_ref()
  }

  pub fn reset_per_unit_declared_value(&mut self) {
    self.per_unit_declared_value = None;
  }

}



