/* 
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShippingLabelRequest {
  /// Purchase order number of the order for which to create a shipping label.
  #[serde(rename = "purchaseOrderNumber")]
  purchase_order_number: String,
  /// ID of the selling party or vendor.
  #[serde(rename = "sellingParty")]
  selling_party: ::models::PartyIdentification,
  /// Warehouse code of vendor.
  #[serde(rename = "shipFromParty")]
  ship_from_party: ::models::PartyIdentification,
  /// A list of the packages in this shipment.
  #[serde(rename = "containers")]
  containers: Option<Vec<::models::Container>>
}

impl ShippingLabelRequest {
  pub fn new(purchase_order_number: String, selling_party: ::models::PartyIdentification, ship_from_party: ::models::PartyIdentification) -> ShippingLabelRequest {
    ShippingLabelRequest {
      purchase_order_number: purchase_order_number,
      selling_party: selling_party,
      ship_from_party: ship_from_party,
      containers: None
    }
  }

  pub fn set_purchase_order_number(&mut self, purchase_order_number: String) {
    self.purchase_order_number = purchase_order_number;
  }

  pub fn with_purchase_order_number(mut self, purchase_order_number: String) -> ShippingLabelRequest {
    self.purchase_order_number = purchase_order_number;
    self
  }

  pub fn purchase_order_number(&self) -> &String {
    &self.purchase_order_number
  }


  pub fn set_selling_party(&mut self, selling_party: ::models::PartyIdentification) {
    self.selling_party = selling_party;
  }

  pub fn with_selling_party(mut self, selling_party: ::models::PartyIdentification) -> ShippingLabelRequest {
    self.selling_party = selling_party;
    self
  }

  pub fn selling_party(&self) -> &::models::PartyIdentification {
    &self.selling_party
  }


  pub fn set_ship_from_party(&mut self, ship_from_party: ::models::PartyIdentification) {
    self.ship_from_party = ship_from_party;
  }

  pub fn with_ship_from_party(mut self, ship_from_party: ::models::PartyIdentification) -> ShippingLabelRequest {
    self.ship_from_party = ship_from_party;
    self
  }

  pub fn ship_from_party(&self) -> &::models::PartyIdentification {
    &self.ship_from_party
  }


  pub fn set_containers(&mut self, containers: Vec<::models::Container>) {
    self.containers = Some(containers);
  }

  pub fn with_containers(mut self, containers: Vec<::models::Container>) -> ShippingLabelRequest {
    self.containers = Some(containers);
    self
  }

  pub fn containers(&self) -> Option<&Vec<::models::Container>> {
    self.containers.as_ref()
  }

  pub fn reset_containers(&mut self) {
    self.containers = None;
  }

}



