/* 
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Package : Details of the package being shipped.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Package {
  /// Package identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.
  #[serde(rename = "packageIdentifier")]
  package_identifier: String,
  /// This is required to be provided for every package in the small parcel shipments.
  #[serde(rename = "trackingNumber")]
  tracking_number: Option<String>,
  /// Carrier manifest Id (Applicable for LTL shipments).
  #[serde(rename = "manifestId")]
  manifest_id: Option<String>,
  /// Carrier manifest Date (Applicable for LTL shipments).
  #[serde(rename = "manifestDate")]
  manifest_date: Option<String>,
  /// Shipment method.
  #[serde(rename = "shipMethod")]
  ship_method: Option<String>,
  #[serde(rename = "weight")]
  weight: ::models::Weight,
  #[serde(rename = "dimensions")]
  dimensions: Option<::models::Dimensions>
}

impl Package {
  /// Details of the package being shipped.
  pub fn new(package_identifier: String, weight: ::models::Weight) -> Package {
    Package {
      package_identifier: package_identifier,
      tracking_number: None,
      manifest_id: None,
      manifest_date: None,
      ship_method: None,
      weight: weight,
      dimensions: None
    }
  }

  pub fn set_package_identifier(&mut self, package_identifier: String) {
    self.package_identifier = package_identifier;
  }

  pub fn with_package_identifier(mut self, package_identifier: String) -> Package {
    self.package_identifier = package_identifier;
    self
  }

  pub fn package_identifier(&self) -> &String {
    &self.package_identifier
  }


  pub fn set_tracking_number(&mut self, tracking_number: String) {
    self.tracking_number = Some(tracking_number);
  }

  pub fn with_tracking_number(mut self, tracking_number: String) -> Package {
    self.tracking_number = Some(tracking_number);
    self
  }

  pub fn tracking_number(&self) -> Option<&String> {
    self.tracking_number.as_ref()
  }

  pub fn reset_tracking_number(&mut self) {
    self.tracking_number = None;
  }

  pub fn set_manifest_id(&mut self, manifest_id: String) {
    self.manifest_id = Some(manifest_id);
  }

  pub fn with_manifest_id(mut self, manifest_id: String) -> Package {
    self.manifest_id = Some(manifest_id);
    self
  }

  pub fn manifest_id(&self) -> Option<&String> {
    self.manifest_id.as_ref()
  }

  pub fn reset_manifest_id(&mut self) {
    self.manifest_id = None;
  }

  pub fn set_manifest_date(&mut self, manifest_date: String) {
    self.manifest_date = Some(manifest_date);
  }

  pub fn with_manifest_date(mut self, manifest_date: String) -> Package {
    self.manifest_date = Some(manifest_date);
    self
  }

  pub fn manifest_date(&self) -> Option<&String> {
    self.manifest_date.as_ref()
  }

  pub fn reset_manifest_date(&mut self) {
    self.manifest_date = None;
  }

  pub fn set_ship_method(&mut self, ship_method: String) {
    self.ship_method = Some(ship_method);
  }

  pub fn with_ship_method(mut self, ship_method: String) -> Package {
    self.ship_method = Some(ship_method);
    self
  }

  pub fn ship_method(&self) -> Option<&String> {
    self.ship_method.as_ref()
  }

  pub fn reset_ship_method(&mut self) {
    self.ship_method = None;
  }

  pub fn set_weight(&mut self, weight: ::models::Weight) {
    self.weight = weight;
  }

  pub fn with_weight(mut self, weight: ::models::Weight) -> Package {
    self.weight = weight;
    self
  }

  pub fn weight(&self) -> &::models::Weight {
    &self.weight
  }


  pub fn set_dimensions(&mut self, dimensions: ::models::Dimensions) {
    self.dimensions = Some(dimensions);
  }

  pub fn with_dimensions(mut self, dimensions: ::models::Dimensions) -> Package {
    self.dimensions = Some(dimensions);
    self
  }

  pub fn dimensions(&self) -> Option<&::models::Dimensions> {
    self.dimensions.as_ref()
  }

  pub fn reset_dimensions(&mut self) {
    self.dimensions = None;
  }

}



