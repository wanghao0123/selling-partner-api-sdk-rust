/* 
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Container {
  /// The type of container.
  #[serde(rename = "containerType")]
  container_type: String,
  /// The container identifier.
  #[serde(rename = "containerIdentifier")]
  container_identifier: String,
  /// The tracking number.
  #[serde(rename = "trackingNumber")]
  tracking_number: Option<String>,
  /// The manifest identifier.
  #[serde(rename = "manifestId")]
  manifest_id: Option<String>,
  /// The date of the manifest.
  #[serde(rename = "manifestDate")]
  manifest_date: Option<String>,
  /// The shipment method.
  #[serde(rename = "shipMethod")]
  ship_method: Option<String>,
  /// SCAC code required for NA VOC vendors only.
  #[serde(rename = "scacCode")]
  scac_code: Option<String>,
  /// Carrier required for EU VOC vendors only.
  #[serde(rename = "carrier")]
  carrier: Option<String>,
  /// An integer that must be submitted for multi-box shipments only, where one item may come in separate packages.
  #[serde(rename = "containerSequenceNumber")]
  container_sequence_number: Option<i32>,
  #[serde(rename = "dimensions")]
  dimensions: Option<::models::Dimensions>,
  #[serde(rename = "weight")]
  weight: Option<::models::Weight>,
  /// A list of packed items.
  #[serde(rename = "packedItems")]
  packed_items: Vec<::models::PackedItem>
}

impl Container {
  pub fn new(container_type: String, container_identifier: String, packed_items: Vec<::models::PackedItem>) -> Container {
    Container {
      container_type: container_type,
      container_identifier: container_identifier,
      tracking_number: None,
      manifest_id: None,
      manifest_date: None,
      ship_method: None,
      scac_code: None,
      carrier: None,
      container_sequence_number: None,
      dimensions: None,
      weight: None,
      packed_items: packed_items
    }
  }

  pub fn set_container_type(&mut self, container_type: String) {
    self.container_type = container_type;
  }

  pub fn with_container_type(mut self, container_type: String) -> Container {
    self.container_type = container_type;
    self
  }

  pub fn container_type(&self) -> &String {
    &self.container_type
  }


  pub fn set_container_identifier(&mut self, container_identifier: String) {
    self.container_identifier = container_identifier;
  }

  pub fn with_container_identifier(mut self, container_identifier: String) -> Container {
    self.container_identifier = container_identifier;
    self
  }

  pub fn container_identifier(&self) -> &String {
    &self.container_identifier
  }


  pub fn set_tracking_number(&mut self, tracking_number: String) {
    self.tracking_number = Some(tracking_number);
  }

  pub fn with_tracking_number(mut self, tracking_number: String) -> Container {
    self.tracking_number = Some(tracking_number);
    self
  }

  pub fn tracking_number(&self) -> Option<&String> {
    self.tracking_number.as_ref()
  }

  pub fn reset_tracking_number(&mut self) {
    self.tracking_number = None;
  }

  pub fn set_manifest_id(&mut self, manifest_id: String) {
    self.manifest_id = Some(manifest_id);
  }

  pub fn with_manifest_id(mut self, manifest_id: String) -> Container {
    self.manifest_id = Some(manifest_id);
    self
  }

  pub fn manifest_id(&self) -> Option<&String> {
    self.manifest_id.as_ref()
  }

  pub fn reset_manifest_id(&mut self) {
    self.manifest_id = None;
  }

  pub fn set_manifest_date(&mut self, manifest_date: String) {
    self.manifest_date = Some(manifest_date);
  }

  pub fn with_manifest_date(mut self, manifest_date: String) -> Container {
    self.manifest_date = Some(manifest_date);
    self
  }

  pub fn manifest_date(&self) -> Option<&String> {
    self.manifest_date.as_ref()
  }

  pub fn reset_manifest_date(&mut self) {
    self.manifest_date = None;
  }

  pub fn set_ship_method(&mut self, ship_method: String) {
    self.ship_method = Some(ship_method);
  }

  pub fn with_ship_method(mut self, ship_method: String) -> Container {
    self.ship_method = Some(ship_method);
    self
  }

  pub fn ship_method(&self) -> Option<&String> {
    self.ship_method.as_ref()
  }

  pub fn reset_ship_method(&mut self) {
    self.ship_method = None;
  }

  pub fn set_scac_code(&mut self, scac_code: String) {
    self.scac_code = Some(scac_code);
  }

  pub fn with_scac_code(mut self, scac_code: String) -> Container {
    self.scac_code = Some(scac_code);
    self
  }

  pub fn scac_code(&self) -> Option<&String> {
    self.scac_code.as_ref()
  }

  pub fn reset_scac_code(&mut self) {
    self.scac_code = None;
  }

  pub fn set_carrier(&mut self, carrier: String) {
    self.carrier = Some(carrier);
  }

  pub fn with_carrier(mut self, carrier: String) -> Container {
    self.carrier = Some(carrier);
    self
  }

  pub fn carrier(&self) -> Option<&String> {
    self.carrier.as_ref()
  }

  pub fn reset_carrier(&mut self) {
    self.carrier = None;
  }

  pub fn set_container_sequence_number(&mut self, container_sequence_number: i32) {
    self.container_sequence_number = Some(container_sequence_number);
  }

  pub fn with_container_sequence_number(mut self, container_sequence_number: i32) -> Container {
    self.container_sequence_number = Some(container_sequence_number);
    self
  }

  pub fn container_sequence_number(&self) -> Option<&i32> {
    self.container_sequence_number.as_ref()
  }

  pub fn reset_container_sequence_number(&mut self) {
    self.container_sequence_number = None;
  }

  pub fn set_dimensions(&mut self, dimensions: ::models::Dimensions) {
    self.dimensions = Some(dimensions);
  }

  pub fn with_dimensions(mut self, dimensions: ::models::Dimensions) -> Container {
    self.dimensions = Some(dimensions);
    self
  }

  pub fn dimensions(&self) -> Option<&::models::Dimensions> {
    self.dimensions.as_ref()
  }

  pub fn reset_dimensions(&mut self) {
    self.dimensions = None;
  }

  pub fn set_weight(&mut self, weight: ::models::Weight) {
    self.weight = Some(weight);
  }

  pub fn with_weight(mut self, weight: ::models::Weight) -> Container {
    self.weight = Some(weight);
    self
  }

  pub fn weight(&self) -> Option<&::models::Weight> {
    self.weight.as_ref()
  }

  pub fn reset_weight(&mut self) {
    self.weight = None;
  }

  pub fn set_packed_items(&mut self, packed_items: Vec<::models::PackedItem>) {
    self.packed_items = packed_items;
  }

  pub fn with_packed_items(mut self, packed_items: Vec<::models::PackedItem>) -> Container {
    self.packed_items = packed_items;
    self
  }

  pub fn packed_items(&self) -> &Vec<::models::PackedItem> {
    &self.packed_items
  }


}



