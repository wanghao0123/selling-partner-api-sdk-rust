/* 
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// LabelData : Details of the shipment label.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LabelData {
  /// Identifier for the package. The first package will be 001, the second 002, and so on. This number is used as a reference to refer to this package from the pallet level.
  #[serde(rename = "packageIdentifier")]
  package_identifier: Option<String>,
  /// Package tracking identifier from the shipping carrier.
  #[serde(rename = "trackingNumber")]
  tracking_number: Option<String>,
  /// Ship method to be used for shipping the order. Amazon defines Ship Method Codes indicating shipping carrier and shipment service level. Ship Method Codes are case and format sensitive. The same ship method code should returned on the shipment confirmation. Note that the Ship Method Codes are vendor specific and will be provided to each vendor during the implementation.
  #[serde(rename = "shipMethod")]
  ship_method: Option<String>,
  /// Shipping method name for internal reference.
  #[serde(rename = "shipMethodName")]
  ship_method_name: Option<String>,
  /// This field will contain the Base64encoded string of the shipment label content.
  #[serde(rename = "content")]
  content: String
}

impl LabelData {
  /// Details of the shipment label.
  pub fn new(content: String) -> LabelData {
    LabelData {
      package_identifier: None,
      tracking_number: None,
      ship_method: None,
      ship_method_name: None,
      content: content
    }
  }

  pub fn set_package_identifier(&mut self, package_identifier: String) {
    self.package_identifier = Some(package_identifier);
  }

  pub fn with_package_identifier(mut self, package_identifier: String) -> LabelData {
    self.package_identifier = Some(package_identifier);
    self
  }

  pub fn package_identifier(&self) -> Option<&String> {
    self.package_identifier.as_ref()
  }

  pub fn reset_package_identifier(&mut self) {
    self.package_identifier = None;
  }

  pub fn set_tracking_number(&mut self, tracking_number: String) {
    self.tracking_number = Some(tracking_number);
  }

  pub fn with_tracking_number(mut self, tracking_number: String) -> LabelData {
    self.tracking_number = Some(tracking_number);
    self
  }

  pub fn tracking_number(&self) -> Option<&String> {
    self.tracking_number.as_ref()
  }

  pub fn reset_tracking_number(&mut self) {
    self.tracking_number = None;
  }

  pub fn set_ship_method(&mut self, ship_method: String) {
    self.ship_method = Some(ship_method);
  }

  pub fn with_ship_method(mut self, ship_method: String) -> LabelData {
    self.ship_method = Some(ship_method);
    self
  }

  pub fn ship_method(&self) -> Option<&String> {
    self.ship_method.as_ref()
  }

  pub fn reset_ship_method(&mut self) {
    self.ship_method = None;
  }

  pub fn set_ship_method_name(&mut self, ship_method_name: String) {
    self.ship_method_name = Some(ship_method_name);
  }

  pub fn with_ship_method_name(mut self, ship_method_name: String) -> LabelData {
    self.ship_method_name = Some(ship_method_name);
    self
  }

  pub fn ship_method_name(&self) -> Option<&String> {
    self.ship_method_name.as_ref()
  }

  pub fn reset_ship_method_name(&mut self) {
    self.ship_method_name = None;
  }

  pub fn set_content(&mut self, content: String) {
    self.content = content;
  }

  pub fn with_content(mut self, content: String) -> LabelData {
    self.content = content;
    self
  }

  pub fn content(&self) -> &String {
    &self.content
  }


}



