/* 
 * Selling Partner API for Direct Fulfillment Shipping
 *
 * The Selling Partner API for Direct Fulfillment Shipping provides programmatic access to a direct fulfillment vendor's shipping data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PackingSlip : Packing slip information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackingSlip {
  /// Purchase order number of the shipment that the packing slip is for.
  #[serde(rename = "purchaseOrderNumber")]
  purchase_order_number: String,
  /// A Base64encoded string of the packing slip PDF.
  #[serde(rename = "content")]
  content: String,
  /// The format of the file such as PDF, JPEG etc.
  #[serde(rename = "contentType")]
  content_type: Option<String>
}

impl PackingSlip {
  /// Packing slip information.
  pub fn new(purchase_order_number: String, content: String) -> PackingSlip {
    PackingSlip {
      purchase_order_number: purchase_order_number,
      content: content,
      content_type: None
    }
  }

  pub fn set_purchase_order_number(&mut self, purchase_order_number: String) {
    self.purchase_order_number = purchase_order_number;
  }

  pub fn with_purchase_order_number(mut self, purchase_order_number: String) -> PackingSlip {
    self.purchase_order_number = purchase_order_number;
    self
  }

  pub fn purchase_order_number(&self) -> &String {
    &self.purchase_order_number
  }


  pub fn set_content(&mut self, content: String) {
    self.content = content;
  }

  pub fn with_content(mut self, content: String) -> PackingSlip {
    self.content = content;
    self
  }

  pub fn content(&self) -> &String {
    &self.content
  }


  pub fn set_content_type(&mut self, content_type: String) {
    self.content_type = Some(content_type);
  }

  pub fn with_content_type(mut self, content_type: String) -> PackingSlip {
    self.content_type = Some(content_type);
    self
  }

  pub fn content_type(&self) -> Option<&String> {
    self.content_type.as_ref()
  }

  pub fn reset_content_type(&mut self) {
    self.content_type = None;
  }

}



