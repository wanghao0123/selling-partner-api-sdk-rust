/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Event : An event of a shipment

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Event {
  #[serde(rename = "eventCode")]
  event_code: ::models::EventCode,
  /// The date and time of an event for a shipment.
  #[serde(rename = "eventTime")]
  event_time: String,
  #[serde(rename = "location")]
  location: Option<::models::Location>
}

impl Event {
  /// An event of a shipment
  pub fn new(event_code: ::models::EventCode, event_time: String) -> Event {
    Event {
      event_code: event_code,
      event_time: event_time,
      location: None
    }
  }

  pub fn set_event_code(&mut self, event_code: ::models::EventCode) {
    self.event_code = event_code;
  }

  pub fn with_event_code(mut self, event_code: ::models::EventCode) -> Event {
    self.event_code = event_code;
    self
  }

  pub fn event_code(&self) -> &::models::EventCode {
    &self.event_code
  }


  pub fn set_event_time(&mut self, event_time: String) {
    self.event_time = event_time;
  }

  pub fn with_event_time(mut self, event_time: String) -> Event {
    self.event_time = event_time;
    self
  }

  pub fn event_time(&self) -> &String {
    &self.event_time
  }


  pub fn set_location(&mut self, location: ::models::Location) {
    self.location = Some(location);
  }

  pub fn with_location(mut self, location: ::models::Location) -> Event {
    self.location = Some(location);
    self
  }

  pub fn location(&self) -> Option<&::models::Location> {
    self.location.as_ref()
  }

  pub fn reset_location(&mut self) {
    self.location = None;
  }

}



