/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetTrackingInformationResponse : The response schema for the getTrackingInformation operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetTrackingInformationResponse {
  /// The payload for getTrackingInformation operation
  #[serde(rename = "payload")]
  payload: Option<::models::TrackingInformation>,
  /// Encountered errors for the operation.
  #[serde(rename = "errors")]
  errors: Option<::models::ErrorList>
}

impl GetTrackingInformationResponse {
  /// The response schema for the getTrackingInformation operation.
  pub fn new() -> GetTrackingInformationResponse {
    GetTrackingInformationResponse {
      payload: None,
      errors: None
    }
  }

  pub fn set_payload(&mut self, payload: ::models::TrackingInformation) {
    self.payload = Some(payload);
  }

  pub fn with_payload(mut self, payload: ::models::TrackingInformation) -> GetTrackingInformationResponse {
    self.payload = Some(payload);
    self
  }

  pub fn payload(&self) -> Option<&::models::TrackingInformation> {
    self.payload.as_ref()
  }

  pub fn reset_payload(&mut self) {
    self.payload = None;
  }

  pub fn set_errors(&mut self, errors: ::models::ErrorList) {
    self.errors = Some(errors);
  }

  pub fn with_errors(mut self, errors: ::models::ErrorList) -> GetTrackingInformationResponse {
    self.errors = Some(errors);
    self
  }

  pub fn errors(&self) -> Option<&::models::ErrorList> {
    self.errors.as_ref()
  }

  pub fn reset_errors(&mut self) {
    self.errors = None;
  }

}



