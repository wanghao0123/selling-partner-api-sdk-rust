/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PurchaseShipmentRequest : The payload schema for the purchaseShipment operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PurchaseShipmentRequest {
  #[serde(rename = "clientReferenceId")]
  client_reference_id: ::models::ClientReferenceId,
  #[serde(rename = "shipTo")]
  ship_to: ::models::Address,
  #[serde(rename = "shipFrom")]
  ship_from: ::models::Address,
  /// The start date and time. This defaults to the current date and time.
  #[serde(rename = "shipDate")]
  ship_date: Option<String>,
  #[serde(rename = "serviceType")]
  service_type: ::models::ServiceType,
  #[serde(rename = "containers")]
  containers: ::models::ContainerList,
  #[serde(rename = "labelSpecification")]
  label_specification: ::models::LabelSpecification
}

impl PurchaseShipmentRequest {
  /// The payload schema for the purchaseShipment operation.
  pub fn new(client_reference_id: ::models::ClientReferenceId, ship_to: ::models::Address, ship_from: ::models::Address, service_type: ::models::ServiceType, containers: ::models::ContainerList, label_specification: ::models::LabelSpecification) -> PurchaseShipmentRequest {
    PurchaseShipmentRequest {
      client_reference_id: client_reference_id,
      ship_to: ship_to,
      ship_from: ship_from,
      ship_date: None,
      service_type: service_type,
      containers: containers,
      label_specification: label_specification
    }
  }

  pub fn set_client_reference_id(&mut self, client_reference_id: ::models::ClientReferenceId) {
    self.client_reference_id = client_reference_id;
  }

  pub fn with_client_reference_id(mut self, client_reference_id: ::models::ClientReferenceId) -> PurchaseShipmentRequest {
    self.client_reference_id = client_reference_id;
    self
  }

  pub fn client_reference_id(&self) -> &::models::ClientReferenceId {
    &self.client_reference_id
  }


  pub fn set_ship_to(&mut self, ship_to: ::models::Address) {
    self.ship_to = ship_to;
  }

  pub fn with_ship_to(mut self, ship_to: ::models::Address) -> PurchaseShipmentRequest {
    self.ship_to = ship_to;
    self
  }

  pub fn ship_to(&self) -> &::models::Address {
    &self.ship_to
  }


  pub fn set_ship_from(&mut self, ship_from: ::models::Address) {
    self.ship_from = ship_from;
  }

  pub fn with_ship_from(mut self, ship_from: ::models::Address) -> PurchaseShipmentRequest {
    self.ship_from = ship_from;
    self
  }

  pub fn ship_from(&self) -> &::models::Address {
    &self.ship_from
  }


  pub fn set_ship_date(&mut self, ship_date: String) {
    self.ship_date = Some(ship_date);
  }

  pub fn with_ship_date(mut self, ship_date: String) -> PurchaseShipmentRequest {
    self.ship_date = Some(ship_date);
    self
  }

  pub fn ship_date(&self) -> Option<&String> {
    self.ship_date.as_ref()
  }

  pub fn reset_ship_date(&mut self) {
    self.ship_date = None;
  }

  pub fn set_service_type(&mut self, service_type: ::models::ServiceType) {
    self.service_type = service_type;
  }

  pub fn with_service_type(mut self, service_type: ::models::ServiceType) -> PurchaseShipmentRequest {
    self.service_type = service_type;
    self
  }

  pub fn service_type(&self) -> &::models::ServiceType {
    &self.service_type
  }


  pub fn set_containers(&mut self, containers: ::models::ContainerList) {
    self.containers = containers;
  }

  pub fn with_containers(mut self, containers: ::models::ContainerList) -> PurchaseShipmentRequest {
    self.containers = containers;
    self
  }

  pub fn containers(&self) -> &::models::ContainerList {
    &self.containers
  }


  pub fn set_label_specification(&mut self, label_specification: ::models::LabelSpecification) {
    self.label_specification = label_specification;
  }

  pub fn with_label_specification(mut self, label_specification: ::models::LabelSpecification) -> PurchaseShipmentRequest {
    self.label_specification = label_specification;
    self
  }

  pub fn label_specification(&self) -> &::models::LabelSpecification {
    &self.label_specification
  }


}



