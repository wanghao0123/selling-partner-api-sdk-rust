/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Location : The location where the person, business or institution is located.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Location {
  #[serde(rename = "stateOrRegion")]
  state_or_region: Option<::models::StateOrRegion>,
  #[serde(rename = "city")]
  city: Option<::models::City>,
  #[serde(rename = "countryCode")]
  country_code: Option<::models::CountryCode>,
  #[serde(rename = "postalCode")]
  postal_code: Option<::models::PostalCode>
}

impl Location {
  /// The location where the person, business or institution is located.
  pub fn new() -> Location {
    Location {
      state_or_region: None,
      city: None,
      country_code: None,
      postal_code: None
    }
  }

  pub fn set_state_or_region(&mut self, state_or_region: ::models::StateOrRegion) {
    self.state_or_region = Some(state_or_region);
  }

  pub fn with_state_or_region(mut self, state_or_region: ::models::StateOrRegion) -> Location {
    self.state_or_region = Some(state_or_region);
    self
  }

  pub fn state_or_region(&self) -> Option<&::models::StateOrRegion> {
    self.state_or_region.as_ref()
  }

  pub fn reset_state_or_region(&mut self) {
    self.state_or_region = None;
  }

  pub fn set_city(&mut self, city: ::models::City) {
    self.city = Some(city);
  }

  pub fn with_city(mut self, city: ::models::City) -> Location {
    self.city = Some(city);
    self
  }

  pub fn city(&self) -> Option<&::models::City> {
    self.city.as_ref()
  }

  pub fn reset_city(&mut self) {
    self.city = None;
  }

  pub fn set_country_code(&mut self, country_code: ::models::CountryCode) {
    self.country_code = Some(country_code);
  }

  pub fn with_country_code(mut self, country_code: ::models::CountryCode) -> Location {
    self.country_code = Some(country_code);
    self
  }

  pub fn country_code(&self) -> Option<&::models::CountryCode> {
    self.country_code.as_ref()
  }

  pub fn reset_country_code(&mut self) {
    self.country_code = None;
  }

  pub fn set_postal_code(&mut self, postal_code: ::models::PostalCode) {
    self.postal_code = Some(postal_code);
  }

  pub fn with_postal_code(mut self, postal_code: ::models::PostalCode) -> Location {
    self.postal_code = Some(postal_code);
    self
  }

  pub fn postal_code(&self) -> Option<&::models::PostalCode> {
    self.postal_code.as_ref()
  }

  pub fn reset_postal_code(&mut self) {
    self.postal_code = None;
  }

}



