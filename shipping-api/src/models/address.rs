/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Address : The address.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Address {
  /// The name of the person, business or institution at that address.
  #[serde(rename = "name")]
  name: String,
  /// First line of that address.
  #[serde(rename = "addressLine1")]
  address_line1: String,
  /// Additional address information, if required.
  #[serde(rename = "addressLine2")]
  address_line2: Option<String>,
  /// Additional address information, if required.
  #[serde(rename = "addressLine3")]
  address_line3: Option<String>,
  #[serde(rename = "stateOrRegion")]
  state_or_region: ::models::StateOrRegion,
  #[serde(rename = "city")]
  city: ::models::City,
  #[serde(rename = "countryCode")]
  country_code: ::models::CountryCode,
  #[serde(rename = "postalCode")]
  postal_code: ::models::PostalCode,
  /// The email address of the contact associated with the address.
  #[serde(rename = "email")]
  email: Option<String>,
  /// The email cc addresses of the contact associated with the address.
  #[serde(rename = "copyEmails")]
  copy_emails: Option<Vec<String>>,
  /// The phone number of the person, business or institution located at that address.
  #[serde(rename = "phoneNumber")]
  phone_number: Option<String>
}

impl Address {
  /// The address.
  pub fn new(name: String, address_line1: String, state_or_region: ::models::StateOrRegion, city: ::models::City, country_code: ::models::CountryCode, postal_code: ::models::PostalCode) -> Address {
    Address {
      name: name,
      address_line1: address_line1,
      address_line2: None,
      address_line3: None,
      state_or_region: state_or_region,
      city: city,
      country_code: country_code,
      postal_code: postal_code,
      email: None,
      copy_emails: None,
      phone_number: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Address {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_address_line1(&mut self, address_line1: String) {
    self.address_line1 = address_line1;
  }

  pub fn with_address_line1(mut self, address_line1: String) -> Address {
    self.address_line1 = address_line1;
    self
  }

  pub fn address_line1(&self) -> &String {
    &self.address_line1
  }


  pub fn set_address_line2(&mut self, address_line2: String) {
    self.address_line2 = Some(address_line2);
  }

  pub fn with_address_line2(mut self, address_line2: String) -> Address {
    self.address_line2 = Some(address_line2);
    self
  }

  pub fn address_line2(&self) -> Option<&String> {
    self.address_line2.as_ref()
  }

  pub fn reset_address_line2(&mut self) {
    self.address_line2 = None;
  }

  pub fn set_address_line3(&mut self, address_line3: String) {
    self.address_line3 = Some(address_line3);
  }

  pub fn with_address_line3(mut self, address_line3: String) -> Address {
    self.address_line3 = Some(address_line3);
    self
  }

  pub fn address_line3(&self) -> Option<&String> {
    self.address_line3.as_ref()
  }

  pub fn reset_address_line3(&mut self) {
    self.address_line3 = None;
  }

  pub fn set_state_or_region(&mut self, state_or_region: ::models::StateOrRegion) {
    self.state_or_region = state_or_region;
  }

  pub fn with_state_or_region(mut self, state_or_region: ::models::StateOrRegion) -> Address {
    self.state_or_region = state_or_region;
    self
  }

  pub fn state_or_region(&self) -> &::models::StateOrRegion {
    &self.state_or_region
  }


  pub fn set_city(&mut self, city: ::models::City) {
    self.city = city;
  }

  pub fn with_city(mut self, city: ::models::City) -> Address {
    self.city = city;
    self
  }

  pub fn city(&self) -> &::models::City {
    &self.city
  }


  pub fn set_country_code(&mut self, country_code: ::models::CountryCode) {
    self.country_code = country_code;
  }

  pub fn with_country_code(mut self, country_code: ::models::CountryCode) -> Address {
    self.country_code = country_code;
    self
  }

  pub fn country_code(&self) -> &::models::CountryCode {
    &self.country_code
  }


  pub fn set_postal_code(&mut self, postal_code: ::models::PostalCode) {
    self.postal_code = postal_code;
  }

  pub fn with_postal_code(mut self, postal_code: ::models::PostalCode) -> Address {
    self.postal_code = postal_code;
    self
  }

  pub fn postal_code(&self) -> &::models::PostalCode {
    &self.postal_code
  }


  pub fn set_email(&mut self, email: String) {
    self.email = Some(email);
  }

  pub fn with_email(mut self, email: String) -> Address {
    self.email = Some(email);
    self
  }

  pub fn email(&self) -> Option<&String> {
    self.email.as_ref()
  }

  pub fn reset_email(&mut self) {
    self.email = None;
  }

  pub fn set_copy_emails(&mut self, copy_emails: Vec<String>) {
    self.copy_emails = Some(copy_emails);
  }

  pub fn with_copy_emails(mut self, copy_emails: Vec<String>) -> Address {
    self.copy_emails = Some(copy_emails);
    self
  }

  pub fn copy_emails(&self) -> Option<&Vec<String>> {
    self.copy_emails.as_ref()
  }

  pub fn reset_copy_emails(&mut self) {
    self.copy_emails = None;
  }

  pub fn set_phone_number(&mut self, phone_number: String) {
    self.phone_number = Some(phone_number);
  }

  pub fn with_phone_number(mut self, phone_number: String) -> Address {
    self.phone_number = Some(phone_number);
    self
  }

  pub fn phone_number(&self) -> Option<&String> {
    self.phone_number.as_ref()
  }

  pub fn reset_phone_number(&mut self) {
    self.phone_number = None;
  }

}



