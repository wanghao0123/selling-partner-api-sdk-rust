/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ServiceRate : The specific rate for a shipping service, or null if no service available.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServiceRate {
  /// The total charge that will be billed for the rate.
  #[serde(rename = "totalCharge")]
  total_charge: ::models::Currency,
  /// The weight that was used to calculate the totalCharge.
  #[serde(rename = "billableWeight")]
  billable_weight: ::models::Weight,
  #[serde(rename = "serviceType")]
  service_type: ::models::ServiceType,
  #[serde(rename = "promise")]
  promise: ::models::ShippingPromiseSet
}

impl ServiceRate {
  /// The specific rate for a shipping service, or null if no service available.
  pub fn new(total_charge: ::models::Currency, billable_weight: ::models::Weight, service_type: ::models::ServiceType, promise: ::models::ShippingPromiseSet) -> ServiceRate {
    ServiceRate {
      total_charge: total_charge,
      billable_weight: billable_weight,
      service_type: service_type,
      promise: promise
    }
  }

  pub fn set_total_charge(&mut self, total_charge: ::models::Currency) {
    self.total_charge = total_charge;
  }

  pub fn with_total_charge(mut self, total_charge: ::models::Currency) -> ServiceRate {
    self.total_charge = total_charge;
    self
  }

  pub fn total_charge(&self) -> &::models::Currency {
    &self.total_charge
  }


  pub fn set_billable_weight(&mut self, billable_weight: ::models::Weight) {
    self.billable_weight = billable_weight;
  }

  pub fn with_billable_weight(mut self, billable_weight: ::models::Weight) -> ServiceRate {
    self.billable_weight = billable_weight;
    self
  }

  pub fn billable_weight(&self) -> &::models::Weight {
    &self.billable_weight
  }


  pub fn set_service_type(&mut self, service_type: ::models::ServiceType) {
    self.service_type = service_type;
  }

  pub fn with_service_type(mut self, service_type: ::models::ServiceType) -> ServiceRate {
    self.service_type = service_type;
    self
  }

  pub fn service_type(&self) -> &::models::ServiceType {
    &self.service_type
  }


  pub fn set_promise(&mut self, promise: ::models::ShippingPromiseSet) {
    self.promise = promise;
  }

  pub fn with_promise(mut self, promise: ::models::ShippingPromiseSet) -> ServiceRate {
    self.promise = promise;
    self
  }

  pub fn promise(&self) -> &::models::ShippingPromiseSet {
    &self.promise
  }


}



