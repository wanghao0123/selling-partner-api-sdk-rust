/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Shipment : The shipment related data.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Shipment {
  #[serde(rename = "shipmentId")]
  shipment_id: ::models::ShipmentId,
  #[serde(rename = "clientReferenceId")]
  client_reference_id: ::models::ClientReferenceId,
  #[serde(rename = "shipFrom")]
  ship_from: ::models::Address,
  #[serde(rename = "shipTo")]
  ship_to: ::models::Address,
  #[serde(rename = "acceptedRate")]
  accepted_rate: Option<::models::AcceptedRate>,
  #[serde(rename = "shipper")]
  shipper: Option<::models::Party>,
  #[serde(rename = "containers")]
  containers: ::models::ContainerList
}

impl Shipment {
  /// The shipment related data.
  pub fn new(shipment_id: ::models::ShipmentId, client_reference_id: ::models::ClientReferenceId, ship_from: ::models::Address, ship_to: ::models::Address, containers: ::models::ContainerList) -> Shipment {
    Shipment {
      shipment_id: shipment_id,
      client_reference_id: client_reference_id,
      ship_from: ship_from,
      ship_to: ship_to,
      accepted_rate: None,
      shipper: None,
      containers: containers
    }
  }

  pub fn set_shipment_id(&mut self, shipment_id: ::models::ShipmentId) {
    self.shipment_id = shipment_id;
  }

  pub fn with_shipment_id(mut self, shipment_id: ::models::ShipmentId) -> Shipment {
    self.shipment_id = shipment_id;
    self
  }

  pub fn shipment_id(&self) -> &::models::ShipmentId {
    &self.shipment_id
  }


  pub fn set_client_reference_id(&mut self, client_reference_id: ::models::ClientReferenceId) {
    self.client_reference_id = client_reference_id;
  }

  pub fn with_client_reference_id(mut self, client_reference_id: ::models::ClientReferenceId) -> Shipment {
    self.client_reference_id = client_reference_id;
    self
  }

  pub fn client_reference_id(&self) -> &::models::ClientReferenceId {
    &self.client_reference_id
  }


  pub fn set_ship_from(&mut self, ship_from: ::models::Address) {
    self.ship_from = ship_from;
  }

  pub fn with_ship_from(mut self, ship_from: ::models::Address) -> Shipment {
    self.ship_from = ship_from;
    self
  }

  pub fn ship_from(&self) -> &::models::Address {
    &self.ship_from
  }


  pub fn set_ship_to(&mut self, ship_to: ::models::Address) {
    self.ship_to = ship_to;
  }

  pub fn with_ship_to(mut self, ship_to: ::models::Address) -> Shipment {
    self.ship_to = ship_to;
    self
  }

  pub fn ship_to(&self) -> &::models::Address {
    &self.ship_to
  }


  pub fn set_accepted_rate(&mut self, accepted_rate: ::models::AcceptedRate) {
    self.accepted_rate = Some(accepted_rate);
  }

  pub fn with_accepted_rate(mut self, accepted_rate: ::models::AcceptedRate) -> Shipment {
    self.accepted_rate = Some(accepted_rate);
    self
  }

  pub fn accepted_rate(&self) -> Option<&::models::AcceptedRate> {
    self.accepted_rate.as_ref()
  }

  pub fn reset_accepted_rate(&mut self) {
    self.accepted_rate = None;
  }

  pub fn set_shipper(&mut self, shipper: ::models::Party) {
    self.shipper = Some(shipper);
  }

  pub fn with_shipper(mut self, shipper: ::models::Party) -> Shipment {
    self.shipper = Some(shipper);
    self
  }

  pub fn shipper(&self) -> Option<&::models::Party> {
    self.shipper.as_ref()
  }

  pub fn reset_shipper(&mut self) {
    self.shipper = None;
  }

  pub fn set_containers(&mut self, containers: ::models::ContainerList) {
    self.containers = containers;
  }

  pub fn with_containers(mut self, containers: ::models::ContainerList) -> Shipment {
    self.containers = containers;
    self
  }

  pub fn containers(&self) -> &::models::ContainerList {
    &self.containers
  }


}



