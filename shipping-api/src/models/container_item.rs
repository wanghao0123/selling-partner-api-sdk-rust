/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ContainerItem : Item in the container.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContainerItem {
  /// The quantity of the items of this type in the container.
  #[serde(rename = "quantity")]
  quantity: f32,
  /// The unit price of an item of this type (the total value of this item type in the container is unitPrice * quantity).
  #[serde(rename = "unitPrice")]
  unit_price: ::models::Currency,
  /// The unit weight of an item of this type (the total weight of this item type in the container is unitWeight * quantity).
  #[serde(rename = "unitWeight")]
  unit_weight: ::models::Weight,
  /// A descriptive title of the item.
  #[serde(rename = "title")]
  title: String
}

impl ContainerItem {
  /// Item in the container.
  pub fn new(quantity: f32, unit_price: ::models::Currency, unit_weight: ::models::Weight, title: String) -> ContainerItem {
    ContainerItem {
      quantity: quantity,
      unit_price: unit_price,
      unit_weight: unit_weight,
      title: title
    }
  }

  pub fn set_quantity(&mut self, quantity: f32) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: f32) -> ContainerItem {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &f32 {
    &self.quantity
  }


  pub fn set_unit_price(&mut self, unit_price: ::models::Currency) {
    self.unit_price = unit_price;
  }

  pub fn with_unit_price(mut self, unit_price: ::models::Currency) -> ContainerItem {
    self.unit_price = unit_price;
    self
  }

  pub fn unit_price(&self) -> &::models::Currency {
    &self.unit_price
  }


  pub fn set_unit_weight(&mut self, unit_weight: ::models::Weight) {
    self.unit_weight = unit_weight;
  }

  pub fn with_unit_weight(mut self, unit_weight: ::models::Weight) -> ContainerItem {
    self.unit_weight = unit_weight;
    self
  }

  pub fn unit_weight(&self) -> &::models::Weight {
    &self.unit_weight
  }


  pub fn set_title(&mut self, title: String) {
    self.title = title;
  }

  pub fn with_title(mut self, title: String) -> ContainerItem {
    self.title = title;
    self
  }

  pub fn title(&self) -> &String {
    &self.title
  }


}



