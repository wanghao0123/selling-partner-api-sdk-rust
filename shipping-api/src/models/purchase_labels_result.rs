/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PurchaseLabelsResult : The payload schema for the purchaseLabels operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PurchaseLabelsResult {
  #[serde(rename = "shipmentId")]
  shipment_id: ::models::ShipmentId,
  #[serde(rename = "clientReferenceId")]
  client_reference_id: Option<::models::ClientReferenceId>,
  #[serde(rename = "acceptedRate")]
  accepted_rate: ::models::AcceptedRate,
  #[serde(rename = "labelResults")]
  label_results: ::models::LabelResultList
}

impl PurchaseLabelsResult {
  /// The payload schema for the purchaseLabels operation.
  pub fn new(shipment_id: ::models::ShipmentId, accepted_rate: ::models::AcceptedRate, label_results: ::models::LabelResultList) -> PurchaseLabelsResult {
    PurchaseLabelsResult {
      shipment_id: shipment_id,
      client_reference_id: None,
      accepted_rate: accepted_rate,
      label_results: label_results
    }
  }

  pub fn set_shipment_id(&mut self, shipment_id: ::models::ShipmentId) {
    self.shipment_id = shipment_id;
  }

  pub fn with_shipment_id(mut self, shipment_id: ::models::ShipmentId) -> PurchaseLabelsResult {
    self.shipment_id = shipment_id;
    self
  }

  pub fn shipment_id(&self) -> &::models::ShipmentId {
    &self.shipment_id
  }


  pub fn set_client_reference_id(&mut self, client_reference_id: ::models::ClientReferenceId) {
    self.client_reference_id = Some(client_reference_id);
  }

  pub fn with_client_reference_id(mut self, client_reference_id: ::models::ClientReferenceId) -> PurchaseLabelsResult {
    self.client_reference_id = Some(client_reference_id);
    self
  }

  pub fn client_reference_id(&self) -> Option<&::models::ClientReferenceId> {
    self.client_reference_id.as_ref()
  }

  pub fn reset_client_reference_id(&mut self) {
    self.client_reference_id = None;
  }

  pub fn set_accepted_rate(&mut self, accepted_rate: ::models::AcceptedRate) {
    self.accepted_rate = accepted_rate;
  }

  pub fn with_accepted_rate(mut self, accepted_rate: ::models::AcceptedRate) -> PurchaseLabelsResult {
    self.accepted_rate = accepted_rate;
    self
  }

  pub fn accepted_rate(&self) -> &::models::AcceptedRate {
    &self.accepted_rate
  }


  pub fn set_label_results(&mut self, label_results: ::models::LabelResultList) {
    self.label_results = label_results;
  }

  pub fn with_label_results(mut self, label_results: ::models::LabelResultList) -> PurchaseLabelsResult {
    self.label_results = label_results;
    self
  }

  pub fn label_results(&self) -> &::models::LabelResultList {
    &self.label_results
  }


}



