/* 
 * Selling Partner API for Shipping
 *
 * Provides programmatic access to Amazon Shipping APIs.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TrackingInformation : The payload schema for the getTrackingInformation operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TrackingInformation {
  #[serde(rename = "trackingId")]
  tracking_id: ::models::TrackingId,
  #[serde(rename = "summary")]
  summary: ::models::TrackingSummary,
  #[serde(rename = "promisedDeliveryDate")]
  promised_delivery_date: ::models::PromisedDeliveryDate,
  #[serde(rename = "eventHistory")]
  event_history: ::models::EventList
}

impl TrackingInformation {
  /// The payload schema for the getTrackingInformation operation.
  pub fn new(tracking_id: ::models::TrackingId, summary: ::models::TrackingSummary, promised_delivery_date: ::models::PromisedDeliveryDate, event_history: ::models::EventList) -> TrackingInformation {
    TrackingInformation {
      tracking_id: tracking_id,
      summary: summary,
      promised_delivery_date: promised_delivery_date,
      event_history: event_history
    }
  }

  pub fn set_tracking_id(&mut self, tracking_id: ::models::TrackingId) {
    self.tracking_id = tracking_id;
  }

  pub fn with_tracking_id(mut self, tracking_id: ::models::TrackingId) -> TrackingInformation {
    self.tracking_id = tracking_id;
    self
  }

  pub fn tracking_id(&self) -> &::models::TrackingId {
    &self.tracking_id
  }


  pub fn set_summary(&mut self, summary: ::models::TrackingSummary) {
    self.summary = summary;
  }

  pub fn with_summary(mut self, summary: ::models::TrackingSummary) -> TrackingInformation {
    self.summary = summary;
    self
  }

  pub fn summary(&self) -> &::models::TrackingSummary {
    &self.summary
  }


  pub fn set_promised_delivery_date(&mut self, promised_delivery_date: ::models::PromisedDeliveryDate) {
    self.promised_delivery_date = promised_delivery_date;
  }

  pub fn with_promised_delivery_date(mut self, promised_delivery_date: ::models::PromisedDeliveryDate) -> TrackingInformation {
    self.promised_delivery_date = promised_delivery_date;
    self
  }

  pub fn promised_delivery_date(&self) -> &::models::PromisedDeliveryDate {
    &self.promised_delivery_date
  }


  pub fn set_event_history(&mut self, event_history: ::models::EventList) {
    self.event_history = event_history;
  }

  pub fn with_event_history(mut self, event_history: ::models::EventList) -> TrackingInformation {
    self.event_history = event_history;
    self
  }

  pub fn event_history(&self) -> &::models::EventList {
    &self.event_history
  }


}



