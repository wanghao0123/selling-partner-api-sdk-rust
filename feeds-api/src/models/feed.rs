/* 
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Feed {
  /// The identifier for the feed. This identifier is unique only in combination with a seller ID.
  #[serde(rename = "feedId")]
  feed_id: String,
  /// The feed type.
  #[serde(rename = "feedType")]
  feed_type: String,
  /// A list of identifiers for the marketplaces that the feed is applied to.
  #[serde(rename = "marketplaceIds")]
  marketplace_ids: Option<Vec<String>>,
  /// The date and time when the feed was created, in ISO 8601 date time format.
  #[serde(rename = "createdTime")]
  created_time: String,
  /// The processing status of the feed.
  #[serde(rename = "processingStatus")]
  processing_status: String,
  /// The date and time when feed processing started, in ISO 8601 date time format.
  #[serde(rename = "processingStartTime")]
  processing_start_time: Option<String>,
  /// The date and time when feed processing completed, in ISO 8601 date time format.
  #[serde(rename = "processingEndTime")]
  processing_end_time: Option<String>,
  /// The identifier for the feed document. This identifier is unique only in combination with a seller ID.
  #[serde(rename = "resultFeedDocumentId")]
  result_feed_document_id: Option<String>
}

impl Feed {
  pub fn new(feed_id: String, feed_type: String, created_time: String, processing_status: String) -> Feed {
    Feed {
      feed_id: feed_id,
      feed_type: feed_type,
      marketplace_ids: None,
      created_time: created_time,
      processing_status: processing_status,
      processing_start_time: None,
      processing_end_time: None,
      result_feed_document_id: None
    }
  }

  pub fn set_feed_id(&mut self, feed_id: String) {
    self.feed_id = feed_id;
  }

  pub fn with_feed_id(mut self, feed_id: String) -> Feed {
    self.feed_id = feed_id;
    self
  }

  pub fn feed_id(&self) -> &String {
    &self.feed_id
  }


  pub fn set_feed_type(&mut self, feed_type: String) {
    self.feed_type = feed_type;
  }

  pub fn with_feed_type(mut self, feed_type: String) -> Feed {
    self.feed_type = feed_type;
    self
  }

  pub fn feed_type(&self) -> &String {
    &self.feed_type
  }


  pub fn set_marketplace_ids(&mut self, marketplace_ids: Vec<String>) {
    self.marketplace_ids = Some(marketplace_ids);
  }

  pub fn with_marketplace_ids(mut self, marketplace_ids: Vec<String>) -> Feed {
    self.marketplace_ids = Some(marketplace_ids);
    self
  }

  pub fn marketplace_ids(&self) -> Option<&Vec<String>> {
    self.marketplace_ids.as_ref()
  }

  pub fn reset_marketplace_ids(&mut self) {
    self.marketplace_ids = None;
  }

  pub fn set_created_time(&mut self, created_time: String) {
    self.created_time = created_time;
  }

  pub fn with_created_time(mut self, created_time: String) -> Feed {
    self.created_time = created_time;
    self
  }

  pub fn created_time(&self) -> &String {
    &self.created_time
  }


  pub fn set_processing_status(&mut self, processing_status: String) {
    self.processing_status = processing_status;
  }

  pub fn with_processing_status(mut self, processing_status: String) -> Feed {
    self.processing_status = processing_status;
    self
  }

  pub fn processing_status(&self) -> &String {
    &self.processing_status
  }


  pub fn set_processing_start_time(&mut self, processing_start_time: String) {
    self.processing_start_time = Some(processing_start_time);
  }

  pub fn with_processing_start_time(mut self, processing_start_time: String) -> Feed {
    self.processing_start_time = Some(processing_start_time);
    self
  }

  pub fn processing_start_time(&self) -> Option<&String> {
    self.processing_start_time.as_ref()
  }

  pub fn reset_processing_start_time(&mut self) {
    self.processing_start_time = None;
  }

  pub fn set_processing_end_time(&mut self, processing_end_time: String) {
    self.processing_end_time = Some(processing_end_time);
  }

  pub fn with_processing_end_time(mut self, processing_end_time: String) -> Feed {
    self.processing_end_time = Some(processing_end_time);
    self
  }

  pub fn processing_end_time(&self) -> Option<&String> {
    self.processing_end_time.as_ref()
  }

  pub fn reset_processing_end_time(&mut self) {
    self.processing_end_time = None;
  }

  pub fn set_result_feed_document_id(&mut self, result_feed_document_id: String) {
    self.result_feed_document_id = Some(result_feed_document_id);
  }

  pub fn with_result_feed_document_id(mut self, result_feed_document_id: String) -> Feed {
    self.result_feed_document_id = Some(result_feed_document_id);
    self
  }

  pub fn result_feed_document_id(&self) -> Option<&String> {
    self.result_feed_document_id.as_ref()
  }

  pub fn reset_result_feed_document_id(&mut self) {
    self.result_feed_document_id = None;
  }

}



