/* 
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateFeedSpecification {
  /// The feed type.
  #[serde(rename = "feedType")]
  feed_type: String,
  /// A list of identifiers for marketplaces that you want the feed to be applied to.
  #[serde(rename = "marketplaceIds")]
  marketplace_ids: Vec<String>,
  /// The document identifier returned by the createFeedDocument operation. Upload the feed document contents before calling the createFeed operation.
  #[serde(rename = "inputFeedDocumentId")]
  input_feed_document_id: String,
  #[serde(rename = "feedOptions")]
  feed_options: Option<::models::FeedOptions>
}

impl CreateFeedSpecification {
  pub fn new(feed_type: String, marketplace_ids: Vec<String>, input_feed_document_id: String) -> CreateFeedSpecification {
    CreateFeedSpecification {
      feed_type: feed_type,
      marketplace_ids: marketplace_ids,
      input_feed_document_id: input_feed_document_id,
      feed_options: None
    }
  }

  pub fn set_feed_type(&mut self, feed_type: String) {
    self.feed_type = feed_type;
  }

  pub fn with_feed_type(mut self, feed_type: String) -> CreateFeedSpecification {
    self.feed_type = feed_type;
    self
  }

  pub fn feed_type(&self) -> &String {
    &self.feed_type
  }


  pub fn set_marketplace_ids(&mut self, marketplace_ids: Vec<String>) {
    self.marketplace_ids = marketplace_ids;
  }

  pub fn with_marketplace_ids(mut self, marketplace_ids: Vec<String>) -> CreateFeedSpecification {
    self.marketplace_ids = marketplace_ids;
    self
  }

  pub fn marketplace_ids(&self) -> &Vec<String> {
    &self.marketplace_ids
  }


  pub fn set_input_feed_document_id(&mut self, input_feed_document_id: String) {
    self.input_feed_document_id = input_feed_document_id;
  }

  pub fn with_input_feed_document_id(mut self, input_feed_document_id: String) -> CreateFeedSpecification {
    self.input_feed_document_id = input_feed_document_id;
    self
  }

  pub fn input_feed_document_id(&self) -> &String {
    &self.input_feed_document_id
  }


  pub fn set_feed_options(&mut self, feed_options: ::models::FeedOptions) {
    self.feed_options = Some(feed_options);
  }

  pub fn with_feed_options(mut self, feed_options: ::models::FeedOptions) -> CreateFeedSpecification {
    self.feed_options = Some(feed_options);
    self
  }

  pub fn feed_options(&self) -> Option<&::models::FeedOptions> {
    self.feed_options.as_ref()
  }

  pub fn reset_feed_options(&mut self) {
    self.feed_options = None;
  }

}



