/* 
 * Selling Partner API for Feeds
 *
 * The Selling Partner API for Feeds lets you upload data to Amazon on behalf of a selling partner.
 *
 * OpenAPI spec version: 2021-06-30
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FeedDocument {
  /// The identifier for the feed document. This identifier is unique only in combination with a seller ID.
  #[serde(rename = "feedDocumentId")]
  feed_document_id: String,
  /// A presigned URL for the feed document. This URL expires after 5 minutes.
  #[serde(rename = "url")]
  url: String,
  /// If present, the feed document contents are compressed using the indicated algorithm.
  #[serde(rename = "compressionAlgorithm")]
  compression_algorithm: Option<String>
}

impl FeedDocument {
  pub fn new(feed_document_id: String, url: String) -> FeedDocument {
    FeedDocument {
      feed_document_id: feed_document_id,
      url: url,
      compression_algorithm: None
    }
  }

  pub fn set_feed_document_id(&mut self, feed_document_id: String) {
    self.feed_document_id = feed_document_id;
  }

  pub fn with_feed_document_id(mut self, feed_document_id: String) -> FeedDocument {
    self.feed_document_id = feed_document_id;
    self
  }

  pub fn feed_document_id(&self) -> &String {
    &self.feed_document_id
  }


  pub fn set_url(&mut self, url: String) {
    self.url = url;
  }

  pub fn with_url(mut self, url: String) -> FeedDocument {
    self.url = url;
    self
  }

  pub fn url(&self) -> &String {
    &self.url
  }


  pub fn set_compression_algorithm(&mut self, compression_algorithm: String) {
    self.compression_algorithm = Some(compression_algorithm);
  }

  pub fn with_compression_algorithm(mut self, compression_algorithm: String) -> FeedDocument {
    self.compression_algorithm = Some(compression_algorithm);
    self
  }

  pub fn compression_algorithm(&self) -> Option<&String> {
    self.compression_algorithm.as_ref()
  }

  pub fn reset_compression_algorithm(&mut self) {
    self.compression_algorithm = None;
  }

}



