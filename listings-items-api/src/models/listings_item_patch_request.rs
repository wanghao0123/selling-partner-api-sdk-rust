/* 
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ListingsItemPatchRequest : The request body schema for the patchListingsItem operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ListingsItemPatchRequest {
  /// The Amazon product type of the listings item.
  #[serde(rename = "productType")]
  product_type: String,
  /// One or more JSON Patch operations to perform on the listings item.
  #[serde(rename = "patches")]
  patches: Vec<::models::PatchOperation>
}

impl ListingsItemPatchRequest {
  /// The request body schema for the patchListingsItem operation.
  pub fn new(product_type: String, patches: Vec<::models::PatchOperation>) -> ListingsItemPatchRequest {
    ListingsItemPatchRequest {
      product_type: product_type,
      patches: patches
    }
  }

  pub fn set_product_type(&mut self, product_type: String) {
    self.product_type = product_type;
  }

  pub fn with_product_type(mut self, product_type: String) -> ListingsItemPatchRequest {
    self.product_type = product_type;
    self
  }

  pub fn product_type(&self) -> &String {
    &self.product_type
  }


  pub fn set_patches(&mut self, patches: Vec<::models::PatchOperation>) {
    self.patches = patches;
  }

  pub fn with_patches(mut self, patches: Vec<::models::PatchOperation>) -> ListingsItemPatchRequest {
    self.patches = patches;
    self
  }

  pub fn patches(&self) -> &Vec<::models::PatchOperation> {
    &self.patches
  }


}



