/* 
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Issue : An issue with a listings item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Issue {
  /// An issue code that identifies the type of issue.
  #[serde(rename = "code")]
  code: String,
  /// A message that describes the issue.
  #[serde(rename = "message")]
  message: String,
  /// The severity of the issue.
  #[serde(rename = "severity")]
  severity: String,
  /// Name of the attribute associated with the issue, if applicable.
  #[serde(rename = "attributeName")]
  attribute_name: Option<String>
}

impl Issue {
  /// An issue with a listings item.
  pub fn new(code: String, message: String, severity: String) -> Issue {
    Issue {
      code: code,
      message: message,
      severity: severity,
      attribute_name: None
    }
  }

  pub fn set_code(&mut self, code: String) {
    self.code = code;
  }

  pub fn with_code(mut self, code: String) -> Issue {
    self.code = code;
    self
  }

  pub fn code(&self) -> &String {
    &self.code
  }


  pub fn set_message(&mut self, message: String) {
    self.message = message;
  }

  pub fn with_message(mut self, message: String) -> Issue {
    self.message = message;
    self
  }

  pub fn message(&self) -> &String {
    &self.message
  }


  pub fn set_severity(&mut self, severity: String) {
    self.severity = severity;
  }

  pub fn with_severity(mut self, severity: String) -> Issue {
    self.severity = severity;
    self
  }

  pub fn severity(&self) -> &String {
    &self.severity
  }


  pub fn set_attribute_name(&mut self, attribute_name: String) {
    self.attribute_name = Some(attribute_name);
  }

  pub fn with_attribute_name(mut self, attribute_name: String) -> Issue {
    self.attribute_name = Some(attribute_name);
    self
  }

  pub fn attribute_name(&self) -> Option<&String> {
    self.attribute_name.as_ref()
  }

  pub fn reset_attribute_name(&mut self) {
    self.attribute_name = None;
  }

}



