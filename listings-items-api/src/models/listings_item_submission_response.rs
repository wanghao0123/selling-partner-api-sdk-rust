/* 
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ListingsItemSubmissionResponse : Response containing the results of a submission to the Selling Partner API for Listings Items.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ListingsItemSubmissionResponse {
  /// A selling partner provided identifier for an Amazon listing.
  #[serde(rename = "sku")]
  sku: String,
  /// The status of the listings item submission.
  #[serde(rename = "status")]
  status: String,
  /// The unique identifier of the listings item submission.
  #[serde(rename = "submissionId")]
  submission_id: String,
  /// Listings item issues related to the listings item submission.
  #[serde(rename = "issues")]
  issues: Option<Vec<::models::Issue>>
}

impl ListingsItemSubmissionResponse {
  /// Response containing the results of a submission to the Selling Partner API for Listings Items.
  pub fn new(sku: String, status: String, submission_id: String) -> ListingsItemSubmissionResponse {
    ListingsItemSubmissionResponse {
      sku: sku,
      status: status,
      submission_id: submission_id,
      issues: None
    }
  }

  pub fn set_sku(&mut self, sku: String) {
    self.sku = sku;
  }

  pub fn with_sku(mut self, sku: String) -> ListingsItemSubmissionResponse {
    self.sku = sku;
    self
  }

  pub fn sku(&self) -> &String {
    &self.sku
  }


  pub fn set_status(&mut self, status: String) {
    self.status = status;
  }

  pub fn with_status(mut self, status: String) -> ListingsItemSubmissionResponse {
    self.status = status;
    self
  }

  pub fn status(&self) -> &String {
    &self.status
  }


  pub fn set_submission_id(&mut self, submission_id: String) {
    self.submission_id = submission_id;
  }

  pub fn with_submission_id(mut self, submission_id: String) -> ListingsItemSubmissionResponse {
    self.submission_id = submission_id;
    self
  }

  pub fn submission_id(&self) -> &String {
    &self.submission_id
  }


  pub fn set_issues(&mut self, issues: Vec<::models::Issue>) {
    self.issues = Some(issues);
  }

  pub fn with_issues(mut self, issues: Vec<::models::Issue>) -> ListingsItemSubmissionResponse {
    self.issues = Some(issues);
    self
  }

  pub fn issues(&self) -> Option<&Vec<::models::Issue>> {
    self.issues.as_ref()
  }

  pub fn reset_issues(&mut self) {
    self.issues = None;
  }

}



