/* 
 * Selling Partner API for Listings Items
 *
 * The Selling Partner API for Listings Items (Listings Items API) provides programmatic access to selling partner listings on Amazon. Use this API in collaboration with the Selling Partner API for Product Type Definitions, which you use to retrieve the information about Amazon product types needed to use the Listings Items API.
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PatchOperation : Individual JSON Patch operation for an HTTP PATCH request.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PatchOperation {
  /// Type of JSON Patch operation. Supported JSON Patch operations include add, replace, and delete. See <https://tools.ietf.org/html/rfc6902>.
  #[serde(rename = "op")]
  op: String,
  /// JSON Pointer path of the element to patch. See <https://tools.ietf.org/html/rfc6902>.
  #[serde(rename = "path")]
  path: String,
  /// JSON value to add, replace, or delete.
  #[serde(rename = "value")]
  value: Option<Vec<Value>>
}

impl PatchOperation {
  /// Individual JSON Patch operation for an HTTP PATCH request.
  pub fn new(op: String, path: String) -> PatchOperation {
    PatchOperation {
      op: op,
      path: path,
      value: None
    }
  }

  pub fn set_op(&mut self, op: String) {
    self.op = op;
  }

  pub fn with_op(mut self, op: String) -> PatchOperation {
    self.op = op;
    self
  }

  pub fn op(&self) -> &String {
    &self.op
  }


  pub fn set_path(&mut self, path: String) {
    self.path = path;
  }

  pub fn with_path(mut self, path: String) -> PatchOperation {
    self.path = path;
    self
  }

  pub fn path(&self) -> &String {
    &self.path
  }


  pub fn set_value(&mut self, value: Vec<Value>) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: Vec<Value>) -> PatchOperation {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> Option<&Vec<Value>> {
    self.value.as_ref()
  }

  pub fn reset_value(&mut self) {
    self.value = None;
  }

}



