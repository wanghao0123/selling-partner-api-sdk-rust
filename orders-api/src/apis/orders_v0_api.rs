/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct OrdersV0ApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> OrdersV0ApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> OrdersV0ApiClient<C> {
        OrdersV0ApiClient {
            configuration: configuration,
        }
    }
}

pub trait OrdersV0Api {
    fn get_order(&self, order_id: &str) -> Box<Future<Item = ::models::GetOrderResponse, Error = Error<serde_json::Value>>>;
    fn get_order_address(&self, order_id: &str) -> Box<Future<Item = ::models::GetOrderAddressResponse, Error = Error<serde_json::Value>>>;
    fn get_order_buyer_info(&self, order_id: &str) -> Box<Future<Item = ::models::GetOrderBuyerInfoResponse, Error = Error<serde_json::Value>>>;
    fn get_order_items(&self, order_id: &str, next_token: &str) -> Box<Future<Item = ::models::GetOrderItemsResponse, Error = Error<serde_json::Value>>>;
    fn get_order_items_buyer_info(&self, order_id: &str, next_token: &str) -> Box<Future<Item = ::models::GetOrderItemsBuyerInfoResponse, Error = Error<serde_json::Value>>>;
    fn get_orders(&self, marketplace_ids: Vec<String>, created_after: &str, created_before: &str, last_updated_after: &str, last_updated_before: &str, order_statuses: Vec<String>, fulfillment_channels: Vec<String>, payment_methods: Vec<String>, buyer_email: &str, seller_order_id: &str, max_results_per_page: i32, easy_ship_shipment_statuses: Vec<String>, next_token: &str, amazon_order_ids: Vec<String>, actual_fulfillment_supply_source_id: &str, is_ispu: bool, store_chain_store_id: &str) -> Box<Future<Item = ::models::GetOrdersResponse, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>OrdersV0Api for OrdersV0ApiClient<C> {
    fn get_order(&self, order_id: &str) -> Box<Future<Item = ::models::GetOrderResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/orders/v0/orders/{orderId}?{}", configuration.base_path, query_string, orderId=order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetOrderResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_order_address(&self, order_id: &str) -> Box<Future<Item = ::models::GetOrderAddressResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/orders/v0/orders/{orderId}/address?{}", configuration.base_path, query_string, orderId=order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetOrderAddressResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_order_buyer_info(&self, order_id: &str) -> Box<Future<Item = ::models::GetOrderBuyerInfoResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/orders/v0/orders/{orderId}/buyerInfo?{}", configuration.base_path, query_string, orderId=order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetOrderBuyerInfoResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_order_items(&self, order_id: &str, next_token: &str) -> Box<Future<Item = ::models::GetOrderItemsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("NextToken", &next_token.to_string());
            query.finish()
        };
        let uri_str = format!("{}/orders/v0/orders/{orderId}/orderItems?{}", configuration.base_path, query_string, orderId=order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetOrderItemsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_order_items_buyer_info(&self, order_id: &str, next_token: &str) -> Box<Future<Item = ::models::GetOrderItemsBuyerInfoResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("NextToken", &next_token.to_string());
            query.finish()
        };
        let uri_str = format!("{}/orders/v0/orders/{orderId}/orderItems/buyerInfo?{}", configuration.base_path, query_string, orderId=order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetOrderItemsBuyerInfoResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_orders(&self, marketplace_ids: Vec<String>, created_after: &str, created_before: &str, last_updated_after: &str, last_updated_before: &str, order_statuses: Vec<String>, fulfillment_channels: Vec<String>, payment_methods: Vec<String>, buyer_email: &str, seller_order_id: &str, max_results_per_page: i32, easy_ship_shipment_statuses: Vec<String>, next_token: &str, amazon_order_ids: Vec<String>, actual_fulfillment_supply_source_id: &str, is_ispu: bool, store_chain_store_id: &str) -> Box<Future<Item = ::models::GetOrdersResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("CreatedAfter", &created_after.to_string());
            query.append_pair("CreatedBefore", &created_before.to_string());
            query.append_pair("LastUpdatedAfter", &last_updated_after.to_string());
            query.append_pair("LastUpdatedBefore", &last_updated_before.to_string());
            query.append_pair("OrderStatuses", &order_statuses.join(",").to_string());
            query.append_pair("MarketplaceIds", &marketplace_ids.join(",").to_string());
            query.append_pair("FulfillmentChannels", &fulfillment_channels.join(",").to_string());
            query.append_pair("PaymentMethods", &payment_methods.join(",").to_string());
            query.append_pair("BuyerEmail", &buyer_email.to_string());
            query.append_pair("SellerOrderId", &seller_order_id.to_string());
            query.append_pair("MaxResultsPerPage", &max_results_per_page.to_string());
            query.append_pair("EasyShipShipmentStatuses", &easy_ship_shipment_statuses.join(",").to_string());
            query.append_pair("NextToken", &next_token.to_string());
            query.append_pair("AmazonOrderIds", &amazon_order_ids.join(",").to_string());
            query.append_pair("ActualFulfillmentSupplySourceId", &actual_fulfillment_supply_source_id.to_string());
            query.append_pair("IsISPU", &is_ispu.to_string());
            query.append_pair("StoreChainStoreId", &store_chain_store_id.to_string());
            query.finish()
        };
        let uri_str = format!("{}/orders/v0/orders?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetOrdersResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
