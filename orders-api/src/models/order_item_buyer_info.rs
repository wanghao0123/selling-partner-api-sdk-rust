/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrderItemBuyerInfo : A single order item's buyer information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderItemBuyerInfo {
  /// An Amazon-defined order item identifier.
  #[serde(rename = "OrderItemId")]
  order_item_id: String,
  /// Buyer information for custom orders from the Amazon Custom program.
  #[serde(rename = "BuyerCustomizedInfo")]
  buyer_customized_info: Option<::models::BuyerCustomizedInfoDetail>,
  /// The gift wrap price of the item.
  #[serde(rename = "GiftWrapPrice")]
  gift_wrap_price: Option<::models::Money>,
  /// The tax on the gift wrap price.
  #[serde(rename = "GiftWrapTax")]
  gift_wrap_tax: Option<::models::Money>,
  /// A gift message provided by the buyer.
  #[serde(rename = "GiftMessageText")]
  gift_message_text: Option<String>,
  /// The gift wrap level specified by the buyer.
  #[serde(rename = "GiftWrapLevel")]
  gift_wrap_level: Option<String>
}

impl OrderItemBuyerInfo {
  /// A single order item's buyer information.
  pub fn new(order_item_id: String) -> OrderItemBuyerInfo {
    OrderItemBuyerInfo {
      order_item_id: order_item_id,
      buyer_customized_info: None,
      gift_wrap_price: None,
      gift_wrap_tax: None,
      gift_message_text: None,
      gift_wrap_level: None
    }
  }

  pub fn set_order_item_id(&mut self, order_item_id: String) {
    self.order_item_id = order_item_id;
  }

  pub fn with_order_item_id(mut self, order_item_id: String) -> OrderItemBuyerInfo {
    self.order_item_id = order_item_id;
    self
  }

  pub fn order_item_id(&self) -> &String {
    &self.order_item_id
  }


  pub fn set_buyer_customized_info(&mut self, buyer_customized_info: ::models::BuyerCustomizedInfoDetail) {
    self.buyer_customized_info = Some(buyer_customized_info);
  }

  pub fn with_buyer_customized_info(mut self, buyer_customized_info: ::models::BuyerCustomizedInfoDetail) -> OrderItemBuyerInfo {
    self.buyer_customized_info = Some(buyer_customized_info);
    self
  }

  pub fn buyer_customized_info(&self) -> Option<&::models::BuyerCustomizedInfoDetail> {
    self.buyer_customized_info.as_ref()
  }

  pub fn reset_buyer_customized_info(&mut self) {
    self.buyer_customized_info = None;
  }

  pub fn set_gift_wrap_price(&mut self, gift_wrap_price: ::models::Money) {
    self.gift_wrap_price = Some(gift_wrap_price);
  }

  pub fn with_gift_wrap_price(mut self, gift_wrap_price: ::models::Money) -> OrderItemBuyerInfo {
    self.gift_wrap_price = Some(gift_wrap_price);
    self
  }

  pub fn gift_wrap_price(&self) -> Option<&::models::Money> {
    self.gift_wrap_price.as_ref()
  }

  pub fn reset_gift_wrap_price(&mut self) {
    self.gift_wrap_price = None;
  }

  pub fn set_gift_wrap_tax(&mut self, gift_wrap_tax: ::models::Money) {
    self.gift_wrap_tax = Some(gift_wrap_tax);
  }

  pub fn with_gift_wrap_tax(mut self, gift_wrap_tax: ::models::Money) -> OrderItemBuyerInfo {
    self.gift_wrap_tax = Some(gift_wrap_tax);
    self
  }

  pub fn gift_wrap_tax(&self) -> Option<&::models::Money> {
    self.gift_wrap_tax.as_ref()
  }

  pub fn reset_gift_wrap_tax(&mut self) {
    self.gift_wrap_tax = None;
  }

  pub fn set_gift_message_text(&mut self, gift_message_text: String) {
    self.gift_message_text = Some(gift_message_text);
  }

  pub fn with_gift_message_text(mut self, gift_message_text: String) -> OrderItemBuyerInfo {
    self.gift_message_text = Some(gift_message_text);
    self
  }

  pub fn gift_message_text(&self) -> Option<&String> {
    self.gift_message_text.as_ref()
  }

  pub fn reset_gift_message_text(&mut self) {
    self.gift_message_text = None;
  }

  pub fn set_gift_wrap_level(&mut self, gift_wrap_level: String) {
    self.gift_wrap_level = Some(gift_wrap_level);
  }

  pub fn with_gift_wrap_level(mut self, gift_wrap_level: String) -> OrderItemBuyerInfo {
    self.gift_wrap_level = Some(gift_wrap_level);
    self
  }

  pub fn gift_wrap_level(&self) -> Option<&String> {
    self.gift_wrap_level.as_ref()
  }

  pub fn reset_gift_wrap_level(&mut self) {
    self.gift_wrap_level = None;
  }

}



