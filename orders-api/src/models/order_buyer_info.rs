/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrderBuyerInfo : Buyer information for an order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderBuyerInfo {
  /// An Amazon-defined order identifier, in 3-7-7 format.
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: String,
  /// The anonymized email address of the buyer.
  #[serde(rename = "BuyerEmail")]
  buyer_email: Option<String>,
  /// The name of the buyer.
  #[serde(rename = "BuyerName")]
  buyer_name: Option<String>,
  /// The county of the buyer.
  #[serde(rename = "BuyerCounty")]
  buyer_county: Option<String>,
  /// Tax information about the buyer.
  #[serde(rename = "BuyerTaxInfo")]
  buyer_tax_info: Option<::models::BuyerTaxInfo>,
  /// The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout.
  #[serde(rename = "PurchaseOrderNumber")]
  purchase_order_number: Option<String>
}

impl OrderBuyerInfo {
  /// Buyer information for an order.
  pub fn new(amazon_order_id: String) -> OrderBuyerInfo {
    OrderBuyerInfo {
      amazon_order_id: amazon_order_id,
      buyer_email: None,
      buyer_name: None,
      buyer_county: None,
      buyer_tax_info: None,
      purchase_order_number: None
    }
  }

  pub fn set_amazon_order_id(&mut self, amazon_order_id: String) {
    self.amazon_order_id = amazon_order_id;
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: String) -> OrderBuyerInfo {
    self.amazon_order_id = amazon_order_id;
    self
  }

  pub fn amazon_order_id(&self) -> &String {
    &self.amazon_order_id
  }


  pub fn set_buyer_email(&mut self, buyer_email: String) {
    self.buyer_email = Some(buyer_email);
  }

  pub fn with_buyer_email(mut self, buyer_email: String) -> OrderBuyerInfo {
    self.buyer_email = Some(buyer_email);
    self
  }

  pub fn buyer_email(&self) -> Option<&String> {
    self.buyer_email.as_ref()
  }

  pub fn reset_buyer_email(&mut self) {
    self.buyer_email = None;
  }

  pub fn set_buyer_name(&mut self, buyer_name: String) {
    self.buyer_name = Some(buyer_name);
  }

  pub fn with_buyer_name(mut self, buyer_name: String) -> OrderBuyerInfo {
    self.buyer_name = Some(buyer_name);
    self
  }

  pub fn buyer_name(&self) -> Option<&String> {
    self.buyer_name.as_ref()
  }

  pub fn reset_buyer_name(&mut self) {
    self.buyer_name = None;
  }

  pub fn set_buyer_county(&mut self, buyer_county: String) {
    self.buyer_county = Some(buyer_county);
  }

  pub fn with_buyer_county(mut self, buyer_county: String) -> OrderBuyerInfo {
    self.buyer_county = Some(buyer_county);
    self
  }

  pub fn buyer_county(&self) -> Option<&String> {
    self.buyer_county.as_ref()
  }

  pub fn reset_buyer_county(&mut self) {
    self.buyer_county = None;
  }

  pub fn set_buyer_tax_info(&mut self, buyer_tax_info: ::models::BuyerTaxInfo) {
    self.buyer_tax_info = Some(buyer_tax_info);
  }

  pub fn with_buyer_tax_info(mut self, buyer_tax_info: ::models::BuyerTaxInfo) -> OrderBuyerInfo {
    self.buyer_tax_info = Some(buyer_tax_info);
    self
  }

  pub fn buyer_tax_info(&self) -> Option<&::models::BuyerTaxInfo> {
    self.buyer_tax_info.as_ref()
  }

  pub fn reset_buyer_tax_info(&mut self) {
    self.buyer_tax_info = None;
  }

  pub fn set_purchase_order_number(&mut self, purchase_order_number: String) {
    self.purchase_order_number = Some(purchase_order_number);
  }

  pub fn with_purchase_order_number(mut self, purchase_order_number: String) -> OrderBuyerInfo {
    self.purchase_order_number = Some(purchase_order_number);
    self
  }

  pub fn purchase_order_number(&self) -> Option<&String> {
    self.purchase_order_number.as_ref()
  }

  pub fn reset_purchase_order_number(&mut self) {
    self.purchase_order_number = None;
  }

}



