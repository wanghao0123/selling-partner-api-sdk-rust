/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrderAddress : The shipping address for the order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderAddress {
  /// An Amazon-defined order identifier, in 3-7-7 format.
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: String,
  #[serde(rename = "ShippingAddress")]
  shipping_address: Option<::models::Address>
}

impl OrderAddress {
  /// The shipping address for the order.
  pub fn new(amazon_order_id: String) -> OrderAddress {
    OrderAddress {
      amazon_order_id: amazon_order_id,
      shipping_address: None
    }
  }

  pub fn set_amazon_order_id(&mut self, amazon_order_id: String) {
    self.amazon_order_id = amazon_order_id;
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: String) -> OrderAddress {
    self.amazon_order_id = amazon_order_id;
    self
  }

  pub fn amazon_order_id(&self) -> &String {
    &self.amazon_order_id
  }


  pub fn set_shipping_address(&mut self, shipping_address: ::models::Address) {
    self.shipping_address = Some(shipping_address);
  }

  pub fn with_shipping_address(mut self, shipping_address: ::models::Address) -> OrderAddress {
    self.shipping_address = Some(shipping_address);
    self
  }

  pub fn shipping_address(&self) -> Option<&::models::Address> {
    self.shipping_address.as_ref()
  }

  pub fn reset_shipping_address(&mut self) {
    self.shipping_address = None;
  }

}



