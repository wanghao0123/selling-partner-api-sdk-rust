/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PointsGrantedDetail : The number of Amazon Points offered with the purchase of an item, and their monetary value.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PointsGrantedDetail {
  /// The number of Amazon Points granted with the purchase of an item.
  #[serde(rename = "PointsNumber")]
  points_number: Option<i32>,
  /// The monetary value of the Amazon Points granted.
  #[serde(rename = "PointsMonetaryValue")]
  points_monetary_value: Option<::models::Money>
}

impl PointsGrantedDetail {
  /// The number of Amazon Points offered with the purchase of an item, and their monetary value.
  pub fn new() -> PointsGrantedDetail {
    PointsGrantedDetail {
      points_number: None,
      points_monetary_value: None
    }
  }

  pub fn set_points_number(&mut self, points_number: i32) {
    self.points_number = Some(points_number);
  }

  pub fn with_points_number(mut self, points_number: i32) -> PointsGrantedDetail {
    self.points_number = Some(points_number);
    self
  }

  pub fn points_number(&self) -> Option<&i32> {
    self.points_number.as_ref()
  }

  pub fn reset_points_number(&mut self) {
    self.points_number = None;
  }

  pub fn set_points_monetary_value(&mut self, points_monetary_value: ::models::Money) {
    self.points_monetary_value = Some(points_monetary_value);
  }

  pub fn with_points_monetary_value(mut self, points_monetary_value: ::models::Money) -> PointsGrantedDetail {
    self.points_monetary_value = Some(points_monetary_value);
    self
  }

  pub fn points_monetary_value(&self) -> Option<&::models::Money> {
    self.points_monetary_value.as_ref()
  }

  pub fn reset_points_monetary_value(&mut self) {
    self.points_monetary_value = None;
  }

}



