/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Order : Order information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Order {
  /// An Amazon-defined order identifier, in 3-7-7 format.
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: String,
  /// A seller-defined order identifier.
  #[serde(rename = "SellerOrderId")]
  seller_order_id: Option<String>,
  /// The date when the order was created.
  #[serde(rename = "PurchaseDate")]
  purchase_date: String,
  /// The date when the order was last updated.  Note: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01.
  #[serde(rename = "LastUpdateDate")]
  last_update_date: String,
  /// The current order status.
  #[serde(rename = "OrderStatus")]
  order_status: String,
  /// Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
  #[serde(rename = "FulfillmentChannel")]
  fulfillment_channel: Option<String>,
  /// The sales channel of the first item in the order.
  #[serde(rename = "SalesChannel")]
  sales_channel: Option<String>,
  /// The order channel of the first item in the order.
  #[serde(rename = "OrderChannel")]
  order_channel: Option<String>,
  /// The shipment service level of the order.
  #[serde(rename = "ShipServiceLevel")]
  ship_service_level: Option<String>,
  /// The total charge for this order.
  #[serde(rename = "OrderTotal")]
  order_total: Option<::models::Money>,
  /// The number of items shipped.
  #[serde(rename = "NumberOfItemsShipped")]
  number_of_items_shipped: Option<i32>,
  /// The number of items unshipped.
  #[serde(rename = "NumberOfItemsUnshipped")]
  number_of_items_unshipped: Option<i32>,
  /// Information about sub-payment methods for a Cash On Delivery (COD) order.  Note: For a COD order that is paid for using one sub-payment method, one PaymentExecutionDetailItem object is returned, with PaymentExecutionDetailItem/PaymentMethod = COD. For a COD order that is paid for using multiple sub-payment methods, two or more PaymentExecutionDetailItem objects are returned.
  #[serde(rename = "PaymentExecutionDetail")]
  payment_execution_detail: Option<::models::PaymentExecutionDetailItemList>,
  /// The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
  #[serde(rename = "PaymentMethod")]
  payment_method: Option<String>,
  /// A list of payment methods for the order.
  #[serde(rename = "PaymentMethodDetails")]
  payment_method_details: Option<::models::PaymentMethodDetailItemList>,
  /// The identifier for the marketplace where the order was placed.
  #[serde(rename = "MarketplaceId")]
  marketplace_id: Option<String>,
  /// The shipment service level category of the order.  Possible values: Expedited, FreeEconomy, NextDay, SameDay, SecondDay, Scheduled, Standard.
  #[serde(rename = "ShipmentServiceLevelCategory")]
  shipment_service_level_category: Option<String>,
  /// The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.  Possible values: PendingPickUp, LabelCanceled, PickedUp, OutForDelivery, Damaged, Delivered, RejectedByBuyer, Undeliverable, ReturnedToSeller, ReturningToSeller.
  #[serde(rename = "EasyShipShipmentStatus")]
  easy_ship_shipment_status: Option<String>,
  /// Custom ship label for Checkout by Amazon (CBA).
  #[serde(rename = "CbaDisplayableShippingLabel")]
  cba_displayable_shipping_label: Option<String>,
  /// The type of the order.
  #[serde(rename = "OrderType")]
  order_type: Option<String>,
  /// The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: EarliestShipDate might not be returned for orders placed before February 1, 2013.
  #[serde(rename = "EarliestShipDate")]
  earliest_ship_date: Option<String>,
  /// The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.  Note: LatestShipDate might not be returned for orders placed before February 1, 2013.
  #[serde(rename = "LatestShipDate")]
  latest_ship_date: Option<String>,
  /// The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
  #[serde(rename = "EarliestDeliveryDate")]
  earliest_delivery_date: Option<String>,
  /// The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status.
  #[serde(rename = "LatestDeliveryDate")]
  latest_delivery_date: Option<String>,
  /// When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer.
  #[serde(rename = "IsBusinessOrder")]
  is_business_order: Option<bool>,
  /// When true, the order is a seller-fulfilled Amazon Prime order.
  #[serde(rename = "IsPrime")]
  is_prime: Option<bool>,
  /// When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see \"Premium Shipping Options\" in the Seller Central Help for your marketplace.
  #[serde(rename = "IsPremiumOrder")]
  is_premium_order: Option<bool>,
  /// When true, the order is a GlobalExpress order.
  #[serde(rename = "IsGlobalExpressEnabled")]
  is_global_express_enabled: Option<bool>,
  /// The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true.
  #[serde(rename = "ReplacedOrderId")]
  replaced_order_id: Option<String>,
  /// When true, this is a replacement order.
  #[serde(rename = "IsReplacementOrder")]
  is_replacement_order: Option<bool>,
  /// Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders.
  #[serde(rename = "PromiseResponseDueDate")]
  promise_response_due_date: Option<String>,
  /// When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders.
  #[serde(rename = "IsEstimatedShipDateSet")]
  is_estimated_ship_date_set: Option<bool>,
  /// When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller.
  #[serde(rename = "IsSoldByAB")]
  is_sold_by_ab: Option<bool>,
  /// The recommended location for the seller to ship the items from. It is calculated at checkout. The seller may or may not choose to ship from this location.
  #[serde(rename = "DefaultShipFromLocationAddress")]
  default_ship_from_location_address: Option<::models::Address>,
  /// Contains the instructions about the fulfillment like where should it be fulfilled from.
  #[serde(rename = "FulfillmentInstruction")]
  fulfillment_instruction: Option<::models::FulfillmentInstruction>,
  /// When true, this order is marked to be picked up from a store rather than delivered.
  #[serde(rename = "IsISPU")]
  is_ispu: Option<bool>
}

impl Order {
  /// Order information.
  pub fn new(amazon_order_id: String, purchase_date: String, last_update_date: String, order_status: String) -> Order {
    Order {
      amazon_order_id: amazon_order_id,
      seller_order_id: None,
      purchase_date: purchase_date,
      last_update_date: last_update_date,
      order_status: order_status,
      fulfillment_channel: None,
      sales_channel: None,
      order_channel: None,
      ship_service_level: None,
      order_total: None,
      number_of_items_shipped: None,
      number_of_items_unshipped: None,
      payment_execution_detail: None,
      payment_method: None,
      payment_method_details: None,
      marketplace_id: None,
      shipment_service_level_category: None,
      easy_ship_shipment_status: None,
      cba_displayable_shipping_label: None,
      order_type: None,
      earliest_ship_date: None,
      latest_ship_date: None,
      earliest_delivery_date: None,
      latest_delivery_date: None,
      is_business_order: None,
      is_prime: None,
      is_premium_order: None,
      is_global_express_enabled: None,
      replaced_order_id: None,
      is_replacement_order: None,
      promise_response_due_date: None,
      is_estimated_ship_date_set: None,
      is_sold_by_ab: None,
      default_ship_from_location_address: None,
      fulfillment_instruction: None,
      is_ispu: None
    }
  }

  pub fn set_amazon_order_id(&mut self, amazon_order_id: String) {
    self.amazon_order_id = amazon_order_id;
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: String) -> Order {
    self.amazon_order_id = amazon_order_id;
    self
  }

  pub fn amazon_order_id(&self) -> &String {
    &self.amazon_order_id
  }


  pub fn set_seller_order_id(&mut self, seller_order_id: String) {
    self.seller_order_id = Some(seller_order_id);
  }

  pub fn with_seller_order_id(mut self, seller_order_id: String) -> Order {
    self.seller_order_id = Some(seller_order_id);
    self
  }

  pub fn seller_order_id(&self) -> Option<&String> {
    self.seller_order_id.as_ref()
  }

  pub fn reset_seller_order_id(&mut self) {
    self.seller_order_id = None;
  }

  pub fn set_purchase_date(&mut self, purchase_date: String) {
    self.purchase_date = purchase_date;
  }

  pub fn with_purchase_date(mut self, purchase_date: String) -> Order {
    self.purchase_date = purchase_date;
    self
  }

  pub fn purchase_date(&self) -> &String {
    &self.purchase_date
  }


  pub fn set_last_update_date(&mut self, last_update_date: String) {
    self.last_update_date = last_update_date;
  }

  pub fn with_last_update_date(mut self, last_update_date: String) -> Order {
    self.last_update_date = last_update_date;
    self
  }

  pub fn last_update_date(&self) -> &String {
    &self.last_update_date
  }


  pub fn set_order_status(&mut self, order_status: String) {
    self.order_status = order_status;
  }

  pub fn with_order_status(mut self, order_status: String) -> Order {
    self.order_status = order_status;
    self
  }

  pub fn order_status(&self) -> &String {
    &self.order_status
  }


  pub fn set_fulfillment_channel(&mut self, fulfillment_channel: String) {
    self.fulfillment_channel = Some(fulfillment_channel);
  }

  pub fn with_fulfillment_channel(mut self, fulfillment_channel: String) -> Order {
    self.fulfillment_channel = Some(fulfillment_channel);
    self
  }

  pub fn fulfillment_channel(&self) -> Option<&String> {
    self.fulfillment_channel.as_ref()
  }

  pub fn reset_fulfillment_channel(&mut self) {
    self.fulfillment_channel = None;
  }

  pub fn set_sales_channel(&mut self, sales_channel: String) {
    self.sales_channel = Some(sales_channel);
  }

  pub fn with_sales_channel(mut self, sales_channel: String) -> Order {
    self.sales_channel = Some(sales_channel);
    self
  }

  pub fn sales_channel(&self) -> Option<&String> {
    self.sales_channel.as_ref()
  }

  pub fn reset_sales_channel(&mut self) {
    self.sales_channel = None;
  }

  pub fn set_order_channel(&mut self, order_channel: String) {
    self.order_channel = Some(order_channel);
  }

  pub fn with_order_channel(mut self, order_channel: String) -> Order {
    self.order_channel = Some(order_channel);
    self
  }

  pub fn order_channel(&self) -> Option<&String> {
    self.order_channel.as_ref()
  }

  pub fn reset_order_channel(&mut self) {
    self.order_channel = None;
  }

  pub fn set_ship_service_level(&mut self, ship_service_level: String) {
    self.ship_service_level = Some(ship_service_level);
  }

  pub fn with_ship_service_level(mut self, ship_service_level: String) -> Order {
    self.ship_service_level = Some(ship_service_level);
    self
  }

  pub fn ship_service_level(&self) -> Option<&String> {
    self.ship_service_level.as_ref()
  }

  pub fn reset_ship_service_level(&mut self) {
    self.ship_service_level = None;
  }

  pub fn set_order_total(&mut self, order_total: ::models::Money) {
    self.order_total = Some(order_total);
  }

  pub fn with_order_total(mut self, order_total: ::models::Money) -> Order {
    self.order_total = Some(order_total);
    self
  }

  pub fn order_total(&self) -> Option<&::models::Money> {
    self.order_total.as_ref()
  }

  pub fn reset_order_total(&mut self) {
    self.order_total = None;
  }

  pub fn set_number_of_items_shipped(&mut self, number_of_items_shipped: i32) {
    self.number_of_items_shipped = Some(number_of_items_shipped);
  }

  pub fn with_number_of_items_shipped(mut self, number_of_items_shipped: i32) -> Order {
    self.number_of_items_shipped = Some(number_of_items_shipped);
    self
  }

  pub fn number_of_items_shipped(&self) -> Option<&i32> {
    self.number_of_items_shipped.as_ref()
  }

  pub fn reset_number_of_items_shipped(&mut self) {
    self.number_of_items_shipped = None;
  }

  pub fn set_number_of_items_unshipped(&mut self, number_of_items_unshipped: i32) {
    self.number_of_items_unshipped = Some(number_of_items_unshipped);
  }

  pub fn with_number_of_items_unshipped(mut self, number_of_items_unshipped: i32) -> Order {
    self.number_of_items_unshipped = Some(number_of_items_unshipped);
    self
  }

  pub fn number_of_items_unshipped(&self) -> Option<&i32> {
    self.number_of_items_unshipped.as_ref()
  }

  pub fn reset_number_of_items_unshipped(&mut self) {
    self.number_of_items_unshipped = None;
  }

  pub fn set_payment_execution_detail(&mut self, payment_execution_detail: ::models::PaymentExecutionDetailItemList) {
    self.payment_execution_detail = Some(payment_execution_detail);
  }

  pub fn with_payment_execution_detail(mut self, payment_execution_detail: ::models::PaymentExecutionDetailItemList) -> Order {
    self.payment_execution_detail = Some(payment_execution_detail);
    self
  }

  pub fn payment_execution_detail(&self) -> Option<&::models::PaymentExecutionDetailItemList> {
    self.payment_execution_detail.as_ref()
  }

  pub fn reset_payment_execution_detail(&mut self) {
    self.payment_execution_detail = None;
  }

  pub fn set_payment_method(&mut self, payment_method: String) {
    self.payment_method = Some(payment_method);
  }

  pub fn with_payment_method(mut self, payment_method: String) -> Order {
    self.payment_method = Some(payment_method);
    self
  }

  pub fn payment_method(&self) -> Option<&String> {
    self.payment_method.as_ref()
  }

  pub fn reset_payment_method(&mut self) {
    self.payment_method = None;
  }

  pub fn set_payment_method_details(&mut self, payment_method_details: ::models::PaymentMethodDetailItemList) {
    self.payment_method_details = Some(payment_method_details);
  }

  pub fn with_payment_method_details(mut self, payment_method_details: ::models::PaymentMethodDetailItemList) -> Order {
    self.payment_method_details = Some(payment_method_details);
    self
  }

  pub fn payment_method_details(&self) -> Option<&::models::PaymentMethodDetailItemList> {
    self.payment_method_details.as_ref()
  }

  pub fn reset_payment_method_details(&mut self) {
    self.payment_method_details = None;
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = Some(marketplace_id);
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> Order {
    self.marketplace_id = Some(marketplace_id);
    self
  }

  pub fn marketplace_id(&self) -> Option<&String> {
    self.marketplace_id.as_ref()
  }

  pub fn reset_marketplace_id(&mut self) {
    self.marketplace_id = None;
  }

  pub fn set_shipment_service_level_category(&mut self, shipment_service_level_category: String) {
    self.shipment_service_level_category = Some(shipment_service_level_category);
  }

  pub fn with_shipment_service_level_category(mut self, shipment_service_level_category: String) -> Order {
    self.shipment_service_level_category = Some(shipment_service_level_category);
    self
  }

  pub fn shipment_service_level_category(&self) -> Option<&String> {
    self.shipment_service_level_category.as_ref()
  }

  pub fn reset_shipment_service_level_category(&mut self) {
    self.shipment_service_level_category = None;
  }

  pub fn set_easy_ship_shipment_status(&mut self, easy_ship_shipment_status: String) {
    self.easy_ship_shipment_status = Some(easy_ship_shipment_status);
  }

  pub fn with_easy_ship_shipment_status(mut self, easy_ship_shipment_status: String) -> Order {
    self.easy_ship_shipment_status = Some(easy_ship_shipment_status);
    self
  }

  pub fn easy_ship_shipment_status(&self) -> Option<&String> {
    self.easy_ship_shipment_status.as_ref()
  }

  pub fn reset_easy_ship_shipment_status(&mut self) {
    self.easy_ship_shipment_status = None;
  }

  pub fn set_cba_displayable_shipping_label(&mut self, cba_displayable_shipping_label: String) {
    self.cba_displayable_shipping_label = Some(cba_displayable_shipping_label);
  }

  pub fn with_cba_displayable_shipping_label(mut self, cba_displayable_shipping_label: String) -> Order {
    self.cba_displayable_shipping_label = Some(cba_displayable_shipping_label);
    self
  }

  pub fn cba_displayable_shipping_label(&self) -> Option<&String> {
    self.cba_displayable_shipping_label.as_ref()
  }

  pub fn reset_cba_displayable_shipping_label(&mut self) {
    self.cba_displayable_shipping_label = None;
  }

  pub fn set_order_type(&mut self, order_type: String) {
    self.order_type = Some(order_type);
  }

  pub fn with_order_type(mut self, order_type: String) -> Order {
    self.order_type = Some(order_type);
    self
  }

  pub fn order_type(&self) -> Option<&String> {
    self.order_type.as_ref()
  }

  pub fn reset_order_type(&mut self) {
    self.order_type = None;
  }

  pub fn set_earliest_ship_date(&mut self, earliest_ship_date: String) {
    self.earliest_ship_date = Some(earliest_ship_date);
  }

  pub fn with_earliest_ship_date(mut self, earliest_ship_date: String) -> Order {
    self.earliest_ship_date = Some(earliest_ship_date);
    self
  }

  pub fn earliest_ship_date(&self) -> Option<&String> {
    self.earliest_ship_date.as_ref()
  }

  pub fn reset_earliest_ship_date(&mut self) {
    self.earliest_ship_date = None;
  }

  pub fn set_latest_ship_date(&mut self, latest_ship_date: String) {
    self.latest_ship_date = Some(latest_ship_date);
  }

  pub fn with_latest_ship_date(mut self, latest_ship_date: String) -> Order {
    self.latest_ship_date = Some(latest_ship_date);
    self
  }

  pub fn latest_ship_date(&self) -> Option<&String> {
    self.latest_ship_date.as_ref()
  }

  pub fn reset_latest_ship_date(&mut self) {
    self.latest_ship_date = None;
  }

  pub fn set_earliest_delivery_date(&mut self, earliest_delivery_date: String) {
    self.earliest_delivery_date = Some(earliest_delivery_date);
  }

  pub fn with_earliest_delivery_date(mut self, earliest_delivery_date: String) -> Order {
    self.earliest_delivery_date = Some(earliest_delivery_date);
    self
  }

  pub fn earliest_delivery_date(&self) -> Option<&String> {
    self.earliest_delivery_date.as_ref()
  }

  pub fn reset_earliest_delivery_date(&mut self) {
    self.earliest_delivery_date = None;
  }

  pub fn set_latest_delivery_date(&mut self, latest_delivery_date: String) {
    self.latest_delivery_date = Some(latest_delivery_date);
  }

  pub fn with_latest_delivery_date(mut self, latest_delivery_date: String) -> Order {
    self.latest_delivery_date = Some(latest_delivery_date);
    self
  }

  pub fn latest_delivery_date(&self) -> Option<&String> {
    self.latest_delivery_date.as_ref()
  }

  pub fn reset_latest_delivery_date(&mut self) {
    self.latest_delivery_date = None;
  }

  pub fn set_is_business_order(&mut self, is_business_order: bool) {
    self.is_business_order = Some(is_business_order);
  }

  pub fn with_is_business_order(mut self, is_business_order: bool) -> Order {
    self.is_business_order = Some(is_business_order);
    self
  }

  pub fn is_business_order(&self) -> Option<&bool> {
    self.is_business_order.as_ref()
  }

  pub fn reset_is_business_order(&mut self) {
    self.is_business_order = None;
  }

  pub fn set_is_prime(&mut self, is_prime: bool) {
    self.is_prime = Some(is_prime);
  }

  pub fn with_is_prime(mut self, is_prime: bool) -> Order {
    self.is_prime = Some(is_prime);
    self
  }

  pub fn is_prime(&self) -> Option<&bool> {
    self.is_prime.as_ref()
  }

  pub fn reset_is_prime(&mut self) {
    self.is_prime = None;
  }

  pub fn set_is_premium_order(&mut self, is_premium_order: bool) {
    self.is_premium_order = Some(is_premium_order);
  }

  pub fn with_is_premium_order(mut self, is_premium_order: bool) -> Order {
    self.is_premium_order = Some(is_premium_order);
    self
  }

  pub fn is_premium_order(&self) -> Option<&bool> {
    self.is_premium_order.as_ref()
  }

  pub fn reset_is_premium_order(&mut self) {
    self.is_premium_order = None;
  }

  pub fn set_is_global_express_enabled(&mut self, is_global_express_enabled: bool) {
    self.is_global_express_enabled = Some(is_global_express_enabled);
  }

  pub fn with_is_global_express_enabled(mut self, is_global_express_enabled: bool) -> Order {
    self.is_global_express_enabled = Some(is_global_express_enabled);
    self
  }

  pub fn is_global_express_enabled(&self) -> Option<&bool> {
    self.is_global_express_enabled.as_ref()
  }

  pub fn reset_is_global_express_enabled(&mut self) {
    self.is_global_express_enabled = None;
  }

  pub fn set_replaced_order_id(&mut self, replaced_order_id: String) {
    self.replaced_order_id = Some(replaced_order_id);
  }

  pub fn with_replaced_order_id(mut self, replaced_order_id: String) -> Order {
    self.replaced_order_id = Some(replaced_order_id);
    self
  }

  pub fn replaced_order_id(&self) -> Option<&String> {
    self.replaced_order_id.as_ref()
  }

  pub fn reset_replaced_order_id(&mut self) {
    self.replaced_order_id = None;
  }

  pub fn set_is_replacement_order(&mut self, is_replacement_order: bool) {
    self.is_replacement_order = Some(is_replacement_order);
  }

  pub fn with_is_replacement_order(mut self, is_replacement_order: bool) -> Order {
    self.is_replacement_order = Some(is_replacement_order);
    self
  }

  pub fn is_replacement_order(&self) -> Option<&bool> {
    self.is_replacement_order.as_ref()
  }

  pub fn reset_is_replacement_order(&mut self) {
    self.is_replacement_order = None;
  }

  pub fn set_promise_response_due_date(&mut self, promise_response_due_date: String) {
    self.promise_response_due_date = Some(promise_response_due_date);
  }

  pub fn with_promise_response_due_date(mut self, promise_response_due_date: String) -> Order {
    self.promise_response_due_date = Some(promise_response_due_date);
    self
  }

  pub fn promise_response_due_date(&self) -> Option<&String> {
    self.promise_response_due_date.as_ref()
  }

  pub fn reset_promise_response_due_date(&mut self) {
    self.promise_response_due_date = None;
  }

  pub fn set_is_estimated_ship_date_set(&mut self, is_estimated_ship_date_set: bool) {
    self.is_estimated_ship_date_set = Some(is_estimated_ship_date_set);
  }

  pub fn with_is_estimated_ship_date_set(mut self, is_estimated_ship_date_set: bool) -> Order {
    self.is_estimated_ship_date_set = Some(is_estimated_ship_date_set);
    self
  }

  pub fn is_estimated_ship_date_set(&self) -> Option<&bool> {
    self.is_estimated_ship_date_set.as_ref()
  }

  pub fn reset_is_estimated_ship_date_set(&mut self) {
    self.is_estimated_ship_date_set = None;
  }

  pub fn set_is_sold_by_ab(&mut self, is_sold_by_ab: bool) {
    self.is_sold_by_ab = Some(is_sold_by_ab);
  }

  pub fn with_is_sold_by_ab(mut self, is_sold_by_ab: bool) -> Order {
    self.is_sold_by_ab = Some(is_sold_by_ab);
    self
  }

  pub fn is_sold_by_ab(&self) -> Option<&bool> {
    self.is_sold_by_ab.as_ref()
  }

  pub fn reset_is_sold_by_ab(&mut self) {
    self.is_sold_by_ab = None;
  }

  pub fn set_default_ship_from_location_address(&mut self, default_ship_from_location_address: ::models::Address) {
    self.default_ship_from_location_address = Some(default_ship_from_location_address);
  }

  pub fn with_default_ship_from_location_address(mut self, default_ship_from_location_address: ::models::Address) -> Order {
    self.default_ship_from_location_address = Some(default_ship_from_location_address);
    self
  }

  pub fn default_ship_from_location_address(&self) -> Option<&::models::Address> {
    self.default_ship_from_location_address.as_ref()
  }

  pub fn reset_default_ship_from_location_address(&mut self) {
    self.default_ship_from_location_address = None;
  }

  pub fn set_fulfillment_instruction(&mut self, fulfillment_instruction: ::models::FulfillmentInstruction) {
    self.fulfillment_instruction = Some(fulfillment_instruction);
  }

  pub fn with_fulfillment_instruction(mut self, fulfillment_instruction: ::models::FulfillmentInstruction) -> Order {
    self.fulfillment_instruction = Some(fulfillment_instruction);
    self
  }

  pub fn fulfillment_instruction(&self) -> Option<&::models::FulfillmentInstruction> {
    self.fulfillment_instruction.as_ref()
  }

  pub fn reset_fulfillment_instruction(&mut self) {
    self.fulfillment_instruction = None;
  }

  pub fn set_is_ispu(&mut self, is_ispu: bool) {
    self.is_ispu = Some(is_ispu);
  }

  pub fn with_is_ispu(mut self, is_ispu: bool) -> Order {
    self.is_ispu = Some(is_ispu);
    self
  }

  pub fn is_ispu(&self) -> Option<&bool> {
    self.is_ispu.as_ref()
  }

  pub fn reset_is_ispu(&mut self) {
    self.is_ispu = None;
  }

}



