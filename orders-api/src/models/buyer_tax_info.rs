/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// BuyerTaxInfo : Tax information about the buyer.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BuyerTaxInfo {
  /// The legal name of the company.
  #[serde(rename = "CompanyLegalName")]
  company_legal_name: Option<String>,
  /// The country or region imposing the tax.
  #[serde(rename = "TaxingRegion")]
  taxing_region: Option<String>,
  /// A list of tax classifications that apply to the order.
  #[serde(rename = "TaxClassifications")]
  tax_classifications: Option<Vec<::models::TaxClassification>>
}

impl BuyerTaxInfo {
  /// Tax information about the buyer.
  pub fn new() -> BuyerTaxInfo {
    BuyerTaxInfo {
      company_legal_name: None,
      taxing_region: None,
      tax_classifications: None
    }
  }

  pub fn set_company_legal_name(&mut self, company_legal_name: String) {
    self.company_legal_name = Some(company_legal_name);
  }

  pub fn with_company_legal_name(mut self, company_legal_name: String) -> BuyerTaxInfo {
    self.company_legal_name = Some(company_legal_name);
    self
  }

  pub fn company_legal_name(&self) -> Option<&String> {
    self.company_legal_name.as_ref()
  }

  pub fn reset_company_legal_name(&mut self) {
    self.company_legal_name = None;
  }

  pub fn set_taxing_region(&mut self, taxing_region: String) {
    self.taxing_region = Some(taxing_region);
  }

  pub fn with_taxing_region(mut self, taxing_region: String) -> BuyerTaxInfo {
    self.taxing_region = Some(taxing_region);
    self
  }

  pub fn taxing_region(&self) -> Option<&String> {
    self.taxing_region.as_ref()
  }

  pub fn reset_taxing_region(&mut self) {
    self.taxing_region = None;
  }

  pub fn set_tax_classifications(&mut self, tax_classifications: Vec<::models::TaxClassification>) {
    self.tax_classifications = Some(tax_classifications);
  }

  pub fn with_tax_classifications(mut self, tax_classifications: Vec<::models::TaxClassification>) -> BuyerTaxInfo {
    self.tax_classifications = Some(tax_classifications);
    self
  }

  pub fn tax_classifications(&self) -> Option<&Vec<::models::TaxClassification>> {
    self.tax_classifications.as_ref()
  }

  pub fn reset_tax_classifications(&mut self) {
    self.tax_classifications = None;
  }

}



