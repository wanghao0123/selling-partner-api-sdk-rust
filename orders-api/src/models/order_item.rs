/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrderItem : A single order item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderItem {
  /// The Amazon Standard Identification Number (ASIN) of the item.
  #[serde(rename = "ASIN")]
  ASIN: String,
  /// The seller stock keeping unit (SKU) of the item.
  #[serde(rename = "SellerSKU")]
  seller_sku: Option<String>,
  /// An Amazon-defined order item identifier.
  #[serde(rename = "OrderItemId")]
  order_item_id: String,
  /// The name of the item.
  #[serde(rename = "Title")]
  title: Option<String>,
  /// The number of items in the order. 
  #[serde(rename = "QuantityOrdered")]
  quantity_ordered: i32,
  /// The number of items shipped.
  #[serde(rename = "QuantityShipped")]
  quantity_shipped: Option<i32>,
  /// Product information for the item.
  #[serde(rename = "ProductInfo")]
  product_info: Option<::models::ProductInfoDetail>,
  /// The number and value of Amazon Points granted with the purchase of an item.
  #[serde(rename = "PointsGranted")]
  points_granted: Option<::models::PointsGrantedDetail>,
  /// The selling price of the order item. Note that an order item is an item and a quantity. This means that the value of ItemPrice is equal to the selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice.
  #[serde(rename = "ItemPrice")]
  item_price: Option<::models::Money>,
  /// The shipping price of the item.
  #[serde(rename = "ShippingPrice")]
  shipping_price: Option<::models::Money>,
  /// The tax on the item price.
  #[serde(rename = "ItemTax")]
  item_tax: Option<::models::Money>,
  /// The tax on the shipping price.
  #[serde(rename = "ShippingTax")]
  shipping_tax: Option<::models::Money>,
  /// The discount on the shipping price.
  #[serde(rename = "ShippingDiscount")]
  shipping_discount: Option<::models::Money>,
  /// The tax on the discount on the shipping price.
  #[serde(rename = "ShippingDiscountTax")]
  shipping_discount_tax: Option<::models::Money>,
  /// The total of all promotional discounts in the offer.
  #[serde(rename = "PromotionDiscount")]
  promotion_discount: Option<::models::Money>,
  /// The tax on the total of all promotional discounts in the offer.
  #[serde(rename = "PromotionDiscountTax")]
  promotion_discount_tax: Option<::models::Money>,
  #[serde(rename = "PromotionIds")]
  promotion_ids: Option<::models::PromotionIdList>,
  /// The fee charged for COD service.
  #[serde(rename = "CODFee")]
  cod_fee: Option<::models::Money>,
  /// The discount on the COD fee.
  #[serde(rename = "CODFeeDiscount")]
  cod_fee_discount: Option<::models::Money>,
  /// When true, the item is a gift.
  #[serde(rename = "IsGift")]
  is_gift: Option<bool>,
  /// The condition of the item as described by the seller.
  #[serde(rename = "ConditionNote")]
  condition_note: Option<String>,
  /// The condition of the item.  Possible values: New, Used, Collectible, Refurbished, Preorder, Club.
  #[serde(rename = "ConditionId")]
  condition_id: Option<String>,
  /// The subcondition of the item.  Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other.
  #[serde(rename = "ConditionSubtypeId")]
  condition_subtype_id: Option<String>,
  /// The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
  #[serde(rename = "ScheduledDeliveryStartDate")]
  scheduled_delivery_start_date: Option<String>,
  /// The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format.
  #[serde(rename = "ScheduledDeliveryEndDate")]
  scheduled_delivery_end_date: Option<String>,
  /// Indicates that the selling price is a special price that is available only for Amazon Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).   Possible values: BusinessPrice - A special price that is available only for Amazon Business orders.
  #[serde(rename = "PriceDesignation")]
  price_designation: Option<String>,
  /// Information about withheld taxes.
  #[serde(rename = "TaxCollection")]
  tax_collection: Option<::models::TaxCollection>,
  /// When true, the product type for this item has a serial number.  Returned only for Amazon Easy Ship orders.
  #[serde(rename = "SerialNumberRequired")]
  serial_number_required: Option<bool>,
  /// When true, transparency codes are required.
  #[serde(rename = "IsTransparency")]
  is_transparency: Option<bool>,
  /// The IOSS number of the seller. Sellers selling in the EU will be assigned a unique IOSS number that must be listed on all packages sent to the EU.
  #[serde(rename = "IossNumber")]
  ioss_number: Option<String>,
  /// The store chain store identifier. Linked to a specific store in a store chain.
  #[serde(rename = "StoreChainStoreId")]
  store_chain_store_id: Option<String>,
  /// The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
  #[serde(rename = "DeemedResellerCategory")]
  deemed_reseller_category: Option<String>
}

impl OrderItem {
  /// A single order item.
  pub fn new(ASIN: String, order_item_id: String, quantity_ordered: i32) -> OrderItem {
    OrderItem {
      ASIN: ASIN,
      seller_sku: None,
      order_item_id: order_item_id,
      title: None,
      quantity_ordered: quantity_ordered,
      quantity_shipped: None,
      product_info: None,
      points_granted: None,
      item_price: None,
      shipping_price: None,
      item_tax: None,
      shipping_tax: None,
      shipping_discount: None,
      shipping_discount_tax: None,
      promotion_discount: None,
      promotion_discount_tax: None,
      promotion_ids: None,
      cod_fee: None,
      cod_fee_discount: None,
      is_gift: None,
      condition_note: None,
      condition_id: None,
      condition_subtype_id: None,
      scheduled_delivery_start_date: None,
      scheduled_delivery_end_date: None,
      price_designation: None,
      tax_collection: None,
      serial_number_required: None,
      is_transparency: None,
      ioss_number: None,
      store_chain_store_id: None,
      deemed_reseller_category: None
    }
  }

  pub fn set_ASIN(&mut self, ASIN: String) {
    self.ASIN = ASIN;
  }

  pub fn with_ASIN(mut self, ASIN: String) -> OrderItem {
    self.ASIN = ASIN;
    self
  }

  pub fn ASIN(&self) -> &String {
    &self.ASIN
  }


  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = Some(seller_sku);
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> OrderItem {
    self.seller_sku = Some(seller_sku);
    self
  }

  pub fn seller_sku(&self) -> Option<&String> {
    self.seller_sku.as_ref()
  }

  pub fn reset_seller_sku(&mut self) {
    self.seller_sku = None;
  }

  pub fn set_order_item_id(&mut self, order_item_id: String) {
    self.order_item_id = order_item_id;
  }

  pub fn with_order_item_id(mut self, order_item_id: String) -> OrderItem {
    self.order_item_id = order_item_id;
    self
  }

  pub fn order_item_id(&self) -> &String {
    &self.order_item_id
  }


  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> OrderItem {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_quantity_ordered(&mut self, quantity_ordered: i32) {
    self.quantity_ordered = quantity_ordered;
  }

  pub fn with_quantity_ordered(mut self, quantity_ordered: i32) -> OrderItem {
    self.quantity_ordered = quantity_ordered;
    self
  }

  pub fn quantity_ordered(&self) -> &i32 {
    &self.quantity_ordered
  }


  pub fn set_quantity_shipped(&mut self, quantity_shipped: i32) {
    self.quantity_shipped = Some(quantity_shipped);
  }

  pub fn with_quantity_shipped(mut self, quantity_shipped: i32) -> OrderItem {
    self.quantity_shipped = Some(quantity_shipped);
    self
  }

  pub fn quantity_shipped(&self) -> Option<&i32> {
    self.quantity_shipped.as_ref()
  }

  pub fn reset_quantity_shipped(&mut self) {
    self.quantity_shipped = None;
  }

  pub fn set_product_info(&mut self, product_info: ::models::ProductInfoDetail) {
    self.product_info = Some(product_info);
  }

  pub fn with_product_info(mut self, product_info: ::models::ProductInfoDetail) -> OrderItem {
    self.product_info = Some(product_info);
    self
  }

  pub fn product_info(&self) -> Option<&::models::ProductInfoDetail> {
    self.product_info.as_ref()
  }

  pub fn reset_product_info(&mut self) {
    self.product_info = None;
  }

  pub fn set_points_granted(&mut self, points_granted: ::models::PointsGrantedDetail) {
    self.points_granted = Some(points_granted);
  }

  pub fn with_points_granted(mut self, points_granted: ::models::PointsGrantedDetail) -> OrderItem {
    self.points_granted = Some(points_granted);
    self
  }

  pub fn points_granted(&self) -> Option<&::models::PointsGrantedDetail> {
    self.points_granted.as_ref()
  }

  pub fn reset_points_granted(&mut self) {
    self.points_granted = None;
  }

  pub fn set_item_price(&mut self, item_price: ::models::Money) {
    self.item_price = Some(item_price);
  }

  pub fn with_item_price(mut self, item_price: ::models::Money) -> OrderItem {
    self.item_price = Some(item_price);
    self
  }

  pub fn item_price(&self) -> Option<&::models::Money> {
    self.item_price.as_ref()
  }

  pub fn reset_item_price(&mut self) {
    self.item_price = None;
  }

  pub fn set_shipping_price(&mut self, shipping_price: ::models::Money) {
    self.shipping_price = Some(shipping_price);
  }

  pub fn with_shipping_price(mut self, shipping_price: ::models::Money) -> OrderItem {
    self.shipping_price = Some(shipping_price);
    self
  }

  pub fn shipping_price(&self) -> Option<&::models::Money> {
    self.shipping_price.as_ref()
  }

  pub fn reset_shipping_price(&mut self) {
    self.shipping_price = None;
  }

  pub fn set_item_tax(&mut self, item_tax: ::models::Money) {
    self.item_tax = Some(item_tax);
  }

  pub fn with_item_tax(mut self, item_tax: ::models::Money) -> OrderItem {
    self.item_tax = Some(item_tax);
    self
  }

  pub fn item_tax(&self) -> Option<&::models::Money> {
    self.item_tax.as_ref()
  }

  pub fn reset_item_tax(&mut self) {
    self.item_tax = None;
  }

  pub fn set_shipping_tax(&mut self, shipping_tax: ::models::Money) {
    self.shipping_tax = Some(shipping_tax);
  }

  pub fn with_shipping_tax(mut self, shipping_tax: ::models::Money) -> OrderItem {
    self.shipping_tax = Some(shipping_tax);
    self
  }

  pub fn shipping_tax(&self) -> Option<&::models::Money> {
    self.shipping_tax.as_ref()
  }

  pub fn reset_shipping_tax(&mut self) {
    self.shipping_tax = None;
  }

  pub fn set_shipping_discount(&mut self, shipping_discount: ::models::Money) {
    self.shipping_discount = Some(shipping_discount);
  }

  pub fn with_shipping_discount(mut self, shipping_discount: ::models::Money) -> OrderItem {
    self.shipping_discount = Some(shipping_discount);
    self
  }

  pub fn shipping_discount(&self) -> Option<&::models::Money> {
    self.shipping_discount.as_ref()
  }

  pub fn reset_shipping_discount(&mut self) {
    self.shipping_discount = None;
  }

  pub fn set_shipping_discount_tax(&mut self, shipping_discount_tax: ::models::Money) {
    self.shipping_discount_tax = Some(shipping_discount_tax);
  }

  pub fn with_shipping_discount_tax(mut self, shipping_discount_tax: ::models::Money) -> OrderItem {
    self.shipping_discount_tax = Some(shipping_discount_tax);
    self
  }

  pub fn shipping_discount_tax(&self) -> Option<&::models::Money> {
    self.shipping_discount_tax.as_ref()
  }

  pub fn reset_shipping_discount_tax(&mut self) {
    self.shipping_discount_tax = None;
  }

  pub fn set_promotion_discount(&mut self, promotion_discount: ::models::Money) {
    self.promotion_discount = Some(promotion_discount);
  }

  pub fn with_promotion_discount(mut self, promotion_discount: ::models::Money) -> OrderItem {
    self.promotion_discount = Some(promotion_discount);
    self
  }

  pub fn promotion_discount(&self) -> Option<&::models::Money> {
    self.promotion_discount.as_ref()
  }

  pub fn reset_promotion_discount(&mut self) {
    self.promotion_discount = None;
  }

  pub fn set_promotion_discount_tax(&mut self, promotion_discount_tax: ::models::Money) {
    self.promotion_discount_tax = Some(promotion_discount_tax);
  }

  pub fn with_promotion_discount_tax(mut self, promotion_discount_tax: ::models::Money) -> OrderItem {
    self.promotion_discount_tax = Some(promotion_discount_tax);
    self
  }

  pub fn promotion_discount_tax(&self) -> Option<&::models::Money> {
    self.promotion_discount_tax.as_ref()
  }

  pub fn reset_promotion_discount_tax(&mut self) {
    self.promotion_discount_tax = None;
  }

  pub fn set_promotion_ids(&mut self, promotion_ids: ::models::PromotionIdList) {
    self.promotion_ids = Some(promotion_ids);
  }

  pub fn with_promotion_ids(mut self, promotion_ids: ::models::PromotionIdList) -> OrderItem {
    self.promotion_ids = Some(promotion_ids);
    self
  }

  pub fn promotion_ids(&self) -> Option<&::models::PromotionIdList> {
    self.promotion_ids.as_ref()
  }

  pub fn reset_promotion_ids(&mut self) {
    self.promotion_ids = None;
  }

  pub fn set_cod_fee(&mut self, cod_fee: ::models::Money) {
    self.cod_fee = Some(cod_fee);
  }

  pub fn with_cod_fee(mut self, cod_fee: ::models::Money) -> OrderItem {
    self.cod_fee = Some(cod_fee);
    self
  }

  pub fn cod_fee(&self) -> Option<&::models::Money> {
    self.cod_fee.as_ref()
  }

  pub fn reset_cod_fee(&mut self) {
    self.cod_fee = None;
  }

  pub fn set_cod_fee_discount(&mut self, cod_fee_discount: ::models::Money) {
    self.cod_fee_discount = Some(cod_fee_discount);
  }

  pub fn with_cod_fee_discount(mut self, cod_fee_discount: ::models::Money) -> OrderItem {
    self.cod_fee_discount = Some(cod_fee_discount);
    self
  }

  pub fn cod_fee_discount(&self) -> Option<&::models::Money> {
    self.cod_fee_discount.as_ref()
  }

  pub fn reset_cod_fee_discount(&mut self) {
    self.cod_fee_discount = None;
  }

  pub fn set_is_gift(&mut self, is_gift: bool) {
    self.is_gift = Some(is_gift);
  }

  pub fn with_is_gift(mut self, is_gift: bool) -> OrderItem {
    self.is_gift = Some(is_gift);
    self
  }

  pub fn is_gift(&self) -> Option<&bool> {
    self.is_gift.as_ref()
  }

  pub fn reset_is_gift(&mut self) {
    self.is_gift = None;
  }

  pub fn set_condition_note(&mut self, condition_note: String) {
    self.condition_note = Some(condition_note);
  }

  pub fn with_condition_note(mut self, condition_note: String) -> OrderItem {
    self.condition_note = Some(condition_note);
    self
  }

  pub fn condition_note(&self) -> Option<&String> {
    self.condition_note.as_ref()
  }

  pub fn reset_condition_note(&mut self) {
    self.condition_note = None;
  }

  pub fn set_condition_id(&mut self, condition_id: String) {
    self.condition_id = Some(condition_id);
  }

  pub fn with_condition_id(mut self, condition_id: String) -> OrderItem {
    self.condition_id = Some(condition_id);
    self
  }

  pub fn condition_id(&self) -> Option<&String> {
    self.condition_id.as_ref()
  }

  pub fn reset_condition_id(&mut self) {
    self.condition_id = None;
  }

  pub fn set_condition_subtype_id(&mut self, condition_subtype_id: String) {
    self.condition_subtype_id = Some(condition_subtype_id);
  }

  pub fn with_condition_subtype_id(mut self, condition_subtype_id: String) -> OrderItem {
    self.condition_subtype_id = Some(condition_subtype_id);
    self
  }

  pub fn condition_subtype_id(&self) -> Option<&String> {
    self.condition_subtype_id.as_ref()
  }

  pub fn reset_condition_subtype_id(&mut self) {
    self.condition_subtype_id = None;
  }

  pub fn set_scheduled_delivery_start_date(&mut self, scheduled_delivery_start_date: String) {
    self.scheduled_delivery_start_date = Some(scheduled_delivery_start_date);
  }

  pub fn with_scheduled_delivery_start_date(mut self, scheduled_delivery_start_date: String) -> OrderItem {
    self.scheduled_delivery_start_date = Some(scheduled_delivery_start_date);
    self
  }

  pub fn scheduled_delivery_start_date(&self) -> Option<&String> {
    self.scheduled_delivery_start_date.as_ref()
  }

  pub fn reset_scheduled_delivery_start_date(&mut self) {
    self.scheduled_delivery_start_date = None;
  }

  pub fn set_scheduled_delivery_end_date(&mut self, scheduled_delivery_end_date: String) {
    self.scheduled_delivery_end_date = Some(scheduled_delivery_end_date);
  }

  pub fn with_scheduled_delivery_end_date(mut self, scheduled_delivery_end_date: String) -> OrderItem {
    self.scheduled_delivery_end_date = Some(scheduled_delivery_end_date);
    self
  }

  pub fn scheduled_delivery_end_date(&self) -> Option<&String> {
    self.scheduled_delivery_end_date.as_ref()
  }

  pub fn reset_scheduled_delivery_end_date(&mut self) {
    self.scheduled_delivery_end_date = None;
  }

  pub fn set_price_designation(&mut self, price_designation: String) {
    self.price_designation = Some(price_designation);
  }

  pub fn with_price_designation(mut self, price_designation: String) -> OrderItem {
    self.price_designation = Some(price_designation);
    self
  }

  pub fn price_designation(&self) -> Option<&String> {
    self.price_designation.as_ref()
  }

  pub fn reset_price_designation(&mut self) {
    self.price_designation = None;
  }

  pub fn set_tax_collection(&mut self, tax_collection: ::models::TaxCollection) {
    self.tax_collection = Some(tax_collection);
  }

  pub fn with_tax_collection(mut self, tax_collection: ::models::TaxCollection) -> OrderItem {
    self.tax_collection = Some(tax_collection);
    self
  }

  pub fn tax_collection(&self) -> Option<&::models::TaxCollection> {
    self.tax_collection.as_ref()
  }

  pub fn reset_tax_collection(&mut self) {
    self.tax_collection = None;
  }

  pub fn set_serial_number_required(&mut self, serial_number_required: bool) {
    self.serial_number_required = Some(serial_number_required);
  }

  pub fn with_serial_number_required(mut self, serial_number_required: bool) -> OrderItem {
    self.serial_number_required = Some(serial_number_required);
    self
  }

  pub fn serial_number_required(&self) -> Option<&bool> {
    self.serial_number_required.as_ref()
  }

  pub fn reset_serial_number_required(&mut self) {
    self.serial_number_required = None;
  }

  pub fn set_is_transparency(&mut self, is_transparency: bool) {
    self.is_transparency = Some(is_transparency);
  }

  pub fn with_is_transparency(mut self, is_transparency: bool) -> OrderItem {
    self.is_transparency = Some(is_transparency);
    self
  }

  pub fn is_transparency(&self) -> Option<&bool> {
    self.is_transparency.as_ref()
  }

  pub fn reset_is_transparency(&mut self) {
    self.is_transparency = None;
  }

  pub fn set_ioss_number(&mut self, ioss_number: String) {
    self.ioss_number = Some(ioss_number);
  }

  pub fn with_ioss_number(mut self, ioss_number: String) -> OrderItem {
    self.ioss_number = Some(ioss_number);
    self
  }

  pub fn ioss_number(&self) -> Option<&String> {
    self.ioss_number.as_ref()
  }

  pub fn reset_ioss_number(&mut self) {
    self.ioss_number = None;
  }

  pub fn set_store_chain_store_id(&mut self, store_chain_store_id: String) {
    self.store_chain_store_id = Some(store_chain_store_id);
  }

  pub fn with_store_chain_store_id(mut self, store_chain_store_id: String) -> OrderItem {
    self.store_chain_store_id = Some(store_chain_store_id);
    self
  }

  pub fn store_chain_store_id(&self) -> Option<&String> {
    self.store_chain_store_id.as_ref()
  }

  pub fn reset_store_chain_store_id(&mut self) {
    self.store_chain_store_id = None;
  }

  pub fn set_deemed_reseller_category(&mut self, deemed_reseller_category: String) {
    self.deemed_reseller_category = Some(deemed_reseller_category);
  }

  pub fn with_deemed_reseller_category(mut self, deemed_reseller_category: String) -> OrderItem {
    self.deemed_reseller_category = Some(deemed_reseller_category);
    self
  }

  pub fn deemed_reseller_category(&self) -> Option<&String> {
    self.deemed_reseller_category.as_ref()
  }

  pub fn reset_deemed_reseller_category(&mut self) {
    self.deemed_reseller_category = None;
  }

}



