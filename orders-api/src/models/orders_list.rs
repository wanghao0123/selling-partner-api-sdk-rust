/* 
 * Selling Partner API for Orders
 *
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrdersList : A list of orders along with additional information to make subsequent API calls.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrdersList {
  #[serde(rename = "Orders")]
  orders: ::models::OrderList,
  /// When present and not empty, pass this string token in the next request to return the next response page.
  #[serde(rename = "NextToken")]
  next_token: Option<String>,
  /// A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. All dates must be in ISO 8601 format.
  #[serde(rename = "LastUpdatedBefore")]
  last_updated_before: Option<String>,
  /// A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format.
  #[serde(rename = "CreatedBefore")]
  created_before: Option<String>
}

impl OrdersList {
  /// A list of orders along with additional information to make subsequent API calls.
  pub fn new(orders: ::models::OrderList) -> OrdersList {
    OrdersList {
      orders: orders,
      next_token: None,
      last_updated_before: None,
      created_before: None
    }
  }

  pub fn set_orders(&mut self, orders: ::models::OrderList) {
    self.orders = orders;
  }

  pub fn with_orders(mut self, orders: ::models::OrderList) -> OrdersList {
    self.orders = orders;
    self
  }

  pub fn orders(&self) -> &::models::OrderList {
    &self.orders
  }


  pub fn set_next_token(&mut self, next_token: String) {
    self.next_token = Some(next_token);
  }

  pub fn with_next_token(mut self, next_token: String) -> OrdersList {
    self.next_token = Some(next_token);
    self
  }

  pub fn next_token(&self) -> Option<&String> {
    self.next_token.as_ref()
  }

  pub fn reset_next_token(&mut self) {
    self.next_token = None;
  }

  pub fn set_last_updated_before(&mut self, last_updated_before: String) {
    self.last_updated_before = Some(last_updated_before);
  }

  pub fn with_last_updated_before(mut self, last_updated_before: String) -> OrdersList {
    self.last_updated_before = Some(last_updated_before);
    self
  }

  pub fn last_updated_before(&self) -> Option<&String> {
    self.last_updated_before.as_ref()
  }

  pub fn reset_last_updated_before(&mut self) {
    self.last_updated_before = None;
  }

  pub fn set_created_before(&mut self, created_before: String) {
    self.created_before = Some(created_before);
  }

  pub fn with_created_before(mut self, created_before: String) -> OrdersList {
    self.created_before = Some(created_before);
    self
  }

  pub fn created_before(&self) -> Option<&String> {
    self.created_before.as_ref()
  }

  pub fn reset_created_before(&mut self) {
    self.created_before = None;
  }

}



