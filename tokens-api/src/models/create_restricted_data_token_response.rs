/* 
 * Selling Partner API for Tokens 
 *
 * The Selling Partner API for Tokens provides a secure way to access a customers's PII (Personally Identifiable Information). You can call the Tokens API to get a Restricted Data Token (RDT) for one or more restricted resources that you specify. The RDT authorizes you to make subsequent requests to access these restricted resources.
 *
 * OpenAPI spec version: 2021-03-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreateRestrictedDataTokenResponse : The response schema for the createRestrictedDataToken operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateRestrictedDataTokenResponse {
  /// A Restricted Data Token (RDT). This is a short-lived access token that authorizes you to access the restricted resources that you specified. Pass this value with the x-amz-access-token header when making subsequent calls to these restricted resources.
  #[serde(rename = "restrictedDataToken")]
  restricted_data_token: Option<String>,
  /// The lifetime of the Restricted Data Token, in seconds.
  #[serde(rename = "expiresIn")]
  expires_in: Option<i32>
}

impl CreateRestrictedDataTokenResponse {
  /// The response schema for the createRestrictedDataToken operation.
  pub fn new() -> CreateRestrictedDataTokenResponse {
    CreateRestrictedDataTokenResponse {
      restricted_data_token: None,
      expires_in: None
    }
  }

  pub fn set_restricted_data_token(&mut self, restricted_data_token: String) {
    self.restricted_data_token = Some(restricted_data_token);
  }

  pub fn with_restricted_data_token(mut self, restricted_data_token: String) -> CreateRestrictedDataTokenResponse {
    self.restricted_data_token = Some(restricted_data_token);
    self
  }

  pub fn restricted_data_token(&self) -> Option<&String> {
    self.restricted_data_token.as_ref()
  }

  pub fn reset_restricted_data_token(&mut self) {
    self.restricted_data_token = None;
  }

  pub fn set_expires_in(&mut self, expires_in: i32) {
    self.expires_in = Some(expires_in);
  }

  pub fn with_expires_in(mut self, expires_in: i32) -> CreateRestrictedDataTokenResponse {
    self.expires_in = Some(expires_in);
    self
  }

  pub fn expires_in(&self) -> Option<&i32> {
    self.expires_in.as_ref()
  }

  pub fn reset_expires_in(&mut self) {
    self.expires_in = None;
  }

}



