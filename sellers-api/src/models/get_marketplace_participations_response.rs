/* 
 * Selling Partner API for Sellers
 *
 * The Selling Partner API for Sellers lets you retrieve information on behalf of sellers about their seller account, such as the marketplaces they participate in. Along with listing the marketplaces that a seller can sell in, the API also provides additional information about the marketplace such as the default language and the default currency. The API also provides seller-specific information such as whether the seller has suspended listings in that marketplace.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetMarketplaceParticipationsResponse : The response schema for the getMarketplaceParticipations operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetMarketplaceParticipationsResponse {
  /// The payload for the getMarketplaceParticipations operation.
  #[serde(rename = "payload")]
  payload: Option<::models::MarketplaceParticipationList>,
  /// Encountered errors for the getMarketplaceParticipations operation.
  #[serde(rename = "errors")]
  errors: Option<::models::ErrorList>
}

impl GetMarketplaceParticipationsResponse {
  /// The response schema for the getMarketplaceParticipations operation.
  pub fn new() -> GetMarketplaceParticipationsResponse {
    GetMarketplaceParticipationsResponse {
      payload: None,
      errors: None
    }
  }

  pub fn set_payload(&mut self, payload: ::models::MarketplaceParticipationList) {
    self.payload = Some(payload);
  }

  pub fn with_payload(mut self, payload: ::models::MarketplaceParticipationList) -> GetMarketplaceParticipationsResponse {
    self.payload = Some(payload);
    self
  }

  pub fn payload(&self) -> Option<&::models::MarketplaceParticipationList> {
    self.payload.as_ref()
  }

  pub fn reset_payload(&mut self) {
    self.payload = None;
  }

  pub fn set_errors(&mut self, errors: ::models::ErrorList) {
    self.errors = Some(errors);
  }

  pub fn with_errors(mut self, errors: ::models::ErrorList) -> GetMarketplaceParticipationsResponse {
    self.errors = Some(errors);
    self
  }

  pub fn errors(&self) -> Option<&::models::ErrorList> {
    self.errors.as_ref()
  }

  pub fn reset_errors(&mut self) {
    self.errors = None;
  }

}



