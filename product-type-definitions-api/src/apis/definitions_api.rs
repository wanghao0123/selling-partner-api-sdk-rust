/* 
 * Selling Partner API for Product Type Definitions
 *
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct DefinitionsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DefinitionsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefinitionsApiClient<C> {
        DefinitionsApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefinitionsApi {
    fn get_definitions_product_type(&self, product_type: &str, marketplace_ids: Vec<String>, seller_id: &str, product_type_version: &str, requirements: &str, requirements_enforced: &str, locale: &str) -> Box<Future<Item = ::models::ProductTypeDefinition, Error = Error<serde_json::Value>>>;
    fn search_definitions_product_types(&self, marketplace_ids: Vec<String>, keywords: Vec<String>) -> Box<Future<Item = ::models::ProductTypeList, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>DefinitionsApi for DefinitionsApiClient<C> {
    fn get_definitions_product_type(&self, product_type: &str, marketplace_ids: Vec<String>, seller_id: &str, product_type_version: &str, requirements: &str, requirements_enforced: &str, locale: &str) -> Box<Future<Item = ::models::ProductTypeDefinition, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("sellerId", &seller_id.to_string());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.append_pair("productTypeVersion", &product_type_version.to_string());
            query.append_pair("requirements", &requirements.to_string());
            query.append_pair("requirementsEnforced", &requirements_enforced.to_string());
            query.append_pair("locale", &locale.to_string());
            query.finish()
        };
        let uri_str = format!("{}/definitions/2020-09-01/productTypes/{productType}?{}", configuration.base_path, query_string, productType=product_type);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::ProductTypeDefinition, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn search_definitions_product_types(&self, marketplace_ids: Vec<String>, keywords: Vec<String>) -> Box<Future<Item = ::models::ProductTypeList, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("keywords", &keywords.join(",").to_string());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/definitions/2020-09-01/productTypes?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::ProductTypeList, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
