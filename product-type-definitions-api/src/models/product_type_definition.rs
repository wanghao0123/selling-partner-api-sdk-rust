/* 
 * Selling Partner API for Product Type Definitions
 *
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ProductTypeDefinition : A product type definition represents the attributes and data requirements for a product type in the Amazon catalog. Product type definitions are used interchangeably between the Selling Partner API for Listings Items, Selling Partner API for Catalog Items, and JSON-based listings feeds in the Selling Partner API for Feeds.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProductTypeDefinition {
  /// Link to meta-schema describing the vocabulary used by the product type schema.
  #[serde(rename = "metaSchema")]
  meta_schema: Option<::models::SchemaLink>,
  /// Link to schema describing the attributes and requirements for the product type.
  #[serde(rename = "schema")]
  schema: ::models::SchemaLink,
  /// Name of the requirements set represented in this product type definition.
  #[serde(rename = "requirements")]
  requirements: String,
  /// Identifies if the required attributes for a requirements set are enforced by the product type definition schema. Non-enforced requirements enable structural validation of individual attributes without all of the required attributes being present (such as for partial updates).
  #[serde(rename = "requirementsEnforced")]
  requirements_enforced: String,
  /// Mapping of property group names to property groups. Property groups represent logical groupings of schema properties that can be used for display or informational purposes.
  #[serde(rename = "propertyGroups")]
  property_groups: ::std::collections::HashMap<String, ::models::PropertyGroup>,
  /// Locale of the display elements contained in the product type definition.
  #[serde(rename = "locale")]
  locale: String,
  /// Amazon marketplace identifiers for which the product type definition is applicable.
  #[serde(rename = "marketplaceIds")]
  marketplace_ids: Vec<String>,
  /// The name of the Amazon product type that this product type definition applies to.
  #[serde(rename = "productType")]
  product_type: String,
  /// The version details for the Amazon product type.
  #[serde(rename = "productTypeVersion")]
  product_type_version: ::models::ProductTypeVersion
}

impl ProductTypeDefinition {
  /// A product type definition represents the attributes and data requirements for a product type in the Amazon catalog. Product type definitions are used interchangeably between the Selling Partner API for Listings Items, Selling Partner API for Catalog Items, and JSON-based listings feeds in the Selling Partner API for Feeds.
  pub fn new(schema: ::models::SchemaLink, requirements: String, requirements_enforced: String, property_groups: ::std::collections::HashMap<String, ::models::PropertyGroup>, locale: String, marketplace_ids: Vec<String>, product_type: String, product_type_version: ::models::ProductTypeVersion) -> ProductTypeDefinition {
    ProductTypeDefinition {
      meta_schema: None,
      schema: schema,
      requirements: requirements,
      requirements_enforced: requirements_enforced,
      property_groups: property_groups,
      locale: locale,
      marketplace_ids: marketplace_ids,
      product_type: product_type,
      product_type_version: product_type_version
    }
  }

  pub fn set_meta_schema(&mut self, meta_schema: ::models::SchemaLink) {
    self.meta_schema = Some(meta_schema);
  }

  pub fn with_meta_schema(mut self, meta_schema: ::models::SchemaLink) -> ProductTypeDefinition {
    self.meta_schema = Some(meta_schema);
    self
  }

  pub fn meta_schema(&self) -> Option<&::models::SchemaLink> {
    self.meta_schema.as_ref()
  }

  pub fn reset_meta_schema(&mut self) {
    self.meta_schema = None;
  }

  pub fn set_schema(&mut self, schema: ::models::SchemaLink) {
    self.schema = schema;
  }

  pub fn with_schema(mut self, schema: ::models::SchemaLink) -> ProductTypeDefinition {
    self.schema = schema;
    self
  }

  pub fn schema(&self) -> &::models::SchemaLink {
    &self.schema
  }


  pub fn set_requirements(&mut self, requirements: String) {
    self.requirements = requirements;
  }

  pub fn with_requirements(mut self, requirements: String) -> ProductTypeDefinition {
    self.requirements = requirements;
    self
  }

  pub fn requirements(&self) -> &String {
    &self.requirements
  }


  pub fn set_requirements_enforced(&mut self, requirements_enforced: String) {
    self.requirements_enforced = requirements_enforced;
  }

  pub fn with_requirements_enforced(mut self, requirements_enforced: String) -> ProductTypeDefinition {
    self.requirements_enforced = requirements_enforced;
    self
  }

  pub fn requirements_enforced(&self) -> &String {
    &self.requirements_enforced
  }


  pub fn set_property_groups(&mut self, property_groups: ::std::collections::HashMap<String, ::models::PropertyGroup>) {
    self.property_groups = property_groups;
  }

  pub fn with_property_groups(mut self, property_groups: ::std::collections::HashMap<String, ::models::PropertyGroup>) -> ProductTypeDefinition {
    self.property_groups = property_groups;
    self
  }

  pub fn property_groups(&self) -> &::std::collections::HashMap<String, ::models::PropertyGroup> {
    &self.property_groups
  }


  pub fn set_locale(&mut self, locale: String) {
    self.locale = locale;
  }

  pub fn with_locale(mut self, locale: String) -> ProductTypeDefinition {
    self.locale = locale;
    self
  }

  pub fn locale(&self) -> &String {
    &self.locale
  }


  pub fn set_marketplace_ids(&mut self, marketplace_ids: Vec<String>) {
    self.marketplace_ids = marketplace_ids;
  }

  pub fn with_marketplace_ids(mut self, marketplace_ids: Vec<String>) -> ProductTypeDefinition {
    self.marketplace_ids = marketplace_ids;
    self
  }

  pub fn marketplace_ids(&self) -> &Vec<String> {
    &self.marketplace_ids
  }


  pub fn set_product_type(&mut self, product_type: String) {
    self.product_type = product_type;
  }

  pub fn with_product_type(mut self, product_type: String) -> ProductTypeDefinition {
    self.product_type = product_type;
    self
  }

  pub fn product_type(&self) -> &String {
    &self.product_type
  }


  pub fn set_product_type_version(&mut self, product_type_version: ::models::ProductTypeVersion) {
    self.product_type_version = product_type_version;
  }

  pub fn with_product_type_version(mut self, product_type_version: ::models::ProductTypeVersion) -> ProductTypeDefinition {
    self.product_type_version = product_type_version;
    self
  }

  pub fn product_type_version(&self) -> &::models::ProductTypeVersion {
    &self.product_type_version
  }


}



