/* 
 * Selling Partner API for Product Type Definitions
 *
 * The Selling Partner API for Product Type Definitions provides programmatic access to attribute and data requirements for product types in the Amazon catalog. Use this API to return the JSON Schema for a product type that you can then use with other Selling Partner APIs, such as the Selling Partner API for Listings Items, the Selling Partner API for Catalog Items, and the Selling Partner API for Feeds (for JSON-based listing feeds).
 *
 * OpenAPI spec version: 2020-09-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ProductTypeVersion : The version details for an Amazon product type.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProductTypeVersion {
  /// Version identifier.
  #[serde(rename = "version")]
  version: String,
  /// When true, the version indicated by the version identifier is the latest available for the Amazon product type.
  #[serde(rename = "latest")]
  latest: bool,
  /// When true, the version indicated by the version identifier is the prerelease (release candidate) for the Amazon product type.
  #[serde(rename = "releaseCandidate")]
  release_candidate: Option<bool>
}

impl ProductTypeVersion {
  /// The version details for an Amazon product type.
  pub fn new(version: String, latest: bool) -> ProductTypeVersion {
    ProductTypeVersion {
      version: version,
      latest: latest,
      release_candidate: None
    }
  }

  pub fn set_version(&mut self, version: String) {
    self.version = version;
  }

  pub fn with_version(mut self, version: String) -> ProductTypeVersion {
    self.version = version;
    self
  }

  pub fn version(&self) -> &String {
    &self.version
  }


  pub fn set_latest(&mut self, latest: bool) {
    self.latest = latest;
  }

  pub fn with_latest(mut self, latest: bool) -> ProductTypeVersion {
    self.latest = latest;
    self
  }

  pub fn latest(&self) -> &bool {
    &self.latest
  }


  pub fn set_release_candidate(&mut self, release_candidate: bool) {
    self.release_candidate = Some(release_candidate);
  }

  pub fn with_release_candidate(mut self, release_candidate: bool) -> ProductTypeVersion {
    self.release_candidate = Some(release_candidate);
    self
  }

  pub fn release_candidate(&self) -> Option<&bool> {
    self.release_candidate.as_ref()
  }

  pub fn reset_release_candidate(&mut self) {
    self.release_candidate = None;
  }

}



