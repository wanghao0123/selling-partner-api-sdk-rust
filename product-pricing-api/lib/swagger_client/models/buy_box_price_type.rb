=begin
#Selling Partner API for Pricing

#The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.21

=end

require 'date'

module SwaggerClient
  class BuyBoxPriceType
    # Indicates the condition of the item. For example: New, Used, Collectible, Refurbished, or Club.
    attr_accessor :condition

    # Indicates the type of customer that the offer is valid for.
    attr_accessor :offer_type

    # Indicates at what quantity this price becomes active.
    attr_accessor :quantity_tier

    # Indicates the type of quantity discount this price applies to.
    attr_accessor :quantity_discount_type

    # The value calculated by adding ListingPrice + Shipping - Points.
    attr_accessor :landed_price

    # The price of the item.
    attr_accessor :listing_price

    # The shipping cost.
    attr_accessor :shipping

    # The number of Amazon Points offered with the purchase of an item.
    attr_accessor :points

    # The seller identifier for the offer.
    attr_accessor :seller_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'condition' => :'condition',
        :'offer_type' => :'offerType',
        :'quantity_tier' => :'quantityTier',
        :'quantity_discount_type' => :'quantityDiscountType',
        :'landed_price' => :'LandedPrice',
        :'listing_price' => :'ListingPrice',
        :'shipping' => :'Shipping',
        :'points' => :'Points',
        :'seller_id' => :'sellerId'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'condition' => :'String',
        :'offer_type' => :'OfferCustomerType',
        :'quantity_tier' => :'Integer',
        :'quantity_discount_type' => :'QuantityDiscountType',
        :'landed_price' => :'MoneyType',
        :'listing_price' => :'MoneyType',
        :'shipping' => :'MoneyType',
        :'points' => :'Points',
        :'seller_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'condition')
        self.condition = attributes[:'condition']
      end

      if attributes.has_key?(:'offerType')
        self.offer_type = attributes[:'offerType']
      end

      if attributes.has_key?(:'quantityTier')
        self.quantity_tier = attributes[:'quantityTier']
      end

      if attributes.has_key?(:'quantityDiscountType')
        self.quantity_discount_type = attributes[:'quantityDiscountType']
      end

      if attributes.has_key?(:'LandedPrice')
        self.landed_price = attributes[:'LandedPrice']
      end

      if attributes.has_key?(:'ListingPrice')
        self.listing_price = attributes[:'ListingPrice']
      end

      if attributes.has_key?(:'Shipping')
        self.shipping = attributes[:'Shipping']
      end

      if attributes.has_key?(:'Points')
        self.points = attributes[:'Points']
      end

      if attributes.has_key?(:'sellerId')
        self.seller_id = attributes[:'sellerId']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @condition.nil?
        invalid_properties.push('invalid value for "condition", condition cannot be nil.')
      end

      if @landed_price.nil?
        invalid_properties.push('invalid value for "landed_price", landed_price cannot be nil.')
      end

      if @listing_price.nil?
        invalid_properties.push('invalid value for "listing_price", listing_price cannot be nil.')
      end

      if @shipping.nil?
        invalid_properties.push('invalid value for "shipping", shipping cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @condition.nil?
      return false if @landed_price.nil?
      return false if @listing_price.nil?
      return false if @shipping.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          condition == o.condition &&
          offer_type == o.offer_type &&
          quantity_tier == o.quantity_tier &&
          quantity_discount_type == o.quantity_discount_type &&
          landed_price == o.landed_price &&
          listing_price == o.listing_price &&
          shipping == o.shipping &&
          points == o.points &&
          seller_id == o.seller_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [condition, offer_type, quantity_tier, quantity_discount_type, landed_price, listing_price, shipping, points, seller_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
