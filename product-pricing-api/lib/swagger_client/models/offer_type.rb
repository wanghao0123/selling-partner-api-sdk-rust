=begin
#Selling Partner API for Pricing

#The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.21

=end

require 'date'

module SwaggerClient
  class OfferType
    # Indicates the type of customer that the offer is valid for.
    attr_accessor :offer_type

    # Contains pricing information that includes promotions and contains the shipping cost.
    attr_accessor :buying_price

    # The current price excluding any promotions that apply to the product. Excludes the shipping cost.
    attr_accessor :regular_price

    # The current listing price for Business buyers.
    attr_accessor :business_price

    attr_accessor :quantity_discount_prices

    # The fulfillment channel for the offer listing. Possible values:  * Amazon - Fulfilled by Amazon. * Merchant - Fulfilled by the seller.
    attr_accessor :fulfillment_channel

    # The item condition for the offer listing. Possible values: New, Used, Collectible, Refurbished, or Club.
    attr_accessor :item_condition

    # The item subcondition for the offer listing. Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, or Other.
    attr_accessor :item_sub_condition

    # The seller stock keeping unit (SKU) of the item.
    attr_accessor :seller_sku

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'offer_type' => :'offerType',
        :'buying_price' => :'BuyingPrice',
        :'regular_price' => :'RegularPrice',
        :'business_price' => :'businessPrice',
        :'quantity_discount_prices' => :'quantityDiscountPrices',
        :'fulfillment_channel' => :'FulfillmentChannel',
        :'item_condition' => :'ItemCondition',
        :'item_sub_condition' => :'ItemSubCondition',
        :'seller_sku' => :'SellerSKU'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'offer_type' => :'OfferCustomerType',
        :'buying_price' => :'PriceType',
        :'regular_price' => :'MoneyType',
        :'business_price' => :'MoneyType',
        :'quantity_discount_prices' => :'Array<QuantityDiscountPriceType>',
        :'fulfillment_channel' => :'String',
        :'item_condition' => :'String',
        :'item_sub_condition' => :'String',
        :'seller_sku' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'offerType')
        self.offer_type = attributes[:'offerType']
      end

      if attributes.has_key?(:'BuyingPrice')
        self.buying_price = attributes[:'BuyingPrice']
      end

      if attributes.has_key?(:'RegularPrice')
        self.regular_price = attributes[:'RegularPrice']
      end

      if attributes.has_key?(:'businessPrice')
        self.business_price = attributes[:'businessPrice']
      end

      if attributes.has_key?(:'quantityDiscountPrices')
        if (value = attributes[:'quantityDiscountPrices']).is_a?(Array)
          self.quantity_discount_prices = value
        end
      end

      if attributes.has_key?(:'FulfillmentChannel')
        self.fulfillment_channel = attributes[:'FulfillmentChannel']
      end

      if attributes.has_key?(:'ItemCondition')
        self.item_condition = attributes[:'ItemCondition']
      end

      if attributes.has_key?(:'ItemSubCondition')
        self.item_sub_condition = attributes[:'ItemSubCondition']
      end

      if attributes.has_key?(:'SellerSKU')
        self.seller_sku = attributes[:'SellerSKU']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @buying_price.nil?
        invalid_properties.push('invalid value for "buying_price", buying_price cannot be nil.')
      end

      if @regular_price.nil?
        invalid_properties.push('invalid value for "regular_price", regular_price cannot be nil.')
      end

      if @fulfillment_channel.nil?
        invalid_properties.push('invalid value for "fulfillment_channel", fulfillment_channel cannot be nil.')
      end

      if @item_condition.nil?
        invalid_properties.push('invalid value for "item_condition", item_condition cannot be nil.')
      end

      if @item_sub_condition.nil?
        invalid_properties.push('invalid value for "item_sub_condition", item_sub_condition cannot be nil.')
      end

      if @seller_sku.nil?
        invalid_properties.push('invalid value for "seller_sku", seller_sku cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @buying_price.nil?
      return false if @regular_price.nil?
      return false if @fulfillment_channel.nil?
      return false if @item_condition.nil?
      return false if @item_sub_condition.nil?
      return false if @seller_sku.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          offer_type == o.offer_type &&
          buying_price == o.buying_price &&
          regular_price == o.regular_price &&
          business_price == o.business_price &&
          quantity_discount_prices == o.quantity_discount_prices &&
          fulfillment_channel == o.fulfillment_channel &&
          item_condition == o.item_condition &&
          item_sub_condition == o.item_sub_condition &&
          seller_sku == o.seller_sku
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [offer_type, buying_price, regular_price, business_price, quantity_discount_prices, fulfillment_channel, item_condition, item_sub_condition, seller_sku].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
