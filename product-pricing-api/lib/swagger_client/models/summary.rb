=begin
#Selling Partner API for Pricing

#The Selling Partner API for Pricing helps you programmatically retrieve product pricing and offer information for Amazon Marketplace products.

OpenAPI spec version: v0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.21

=end

require 'date'

module SwaggerClient
  # Contains price information about the product, including the LowestPrices and BuyBoxPrices, the ListPrice, the SuggestedLowerPricePlusShipping, and NumberOfOffers and NumberOfBuyBoxEligibleOffers.
  class Summary
    # The number of unique offers contained in NumberOfOffers.
    attr_accessor :total_offer_count

    # A list that contains the total number of offers for the item for the given conditions and fulfillment channels.
    attr_accessor :number_of_offers

    # A list of the lowest prices for the item.
    attr_accessor :lowest_prices

    # A list of item prices.
    attr_accessor :buy_box_prices

    # The list price of the item as suggested by the manufacturer.
    attr_accessor :list_price

    # The suggested lower price of the item, including shipping and Amazon Points. The suggested lower price is based on a range of factors, including historical selling prices, recent Buy Box-eligible prices, and input from customers for your products.
    attr_accessor :suggested_lower_price_plus_shipping

    # A list that contains the total number of offers that are eligible for the Buy Box for the given conditions and fulfillment channels.
    attr_accessor :buy_box_eligible_offers

    # When the status is ActiveButTooSoonForProcessing, this is the time when the offers will be available for processing.
    attr_accessor :offers_available_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'total_offer_count' => :'TotalOfferCount',
        :'number_of_offers' => :'NumberOfOffers',
        :'lowest_prices' => :'LowestPrices',
        :'buy_box_prices' => :'BuyBoxPrices',
        :'list_price' => :'ListPrice',
        :'suggested_lower_price_plus_shipping' => :'SuggestedLowerPricePlusShipping',
        :'buy_box_eligible_offers' => :'BuyBoxEligibleOffers',
        :'offers_available_time' => :'OffersAvailableTime'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'total_offer_count' => :'Integer',
        :'number_of_offers' => :'NumberOfOffers',
        :'lowest_prices' => :'LowestPrices',
        :'buy_box_prices' => :'BuyBoxPrices',
        :'list_price' => :'MoneyType',
        :'suggested_lower_price_plus_shipping' => :'MoneyType',
        :'buy_box_eligible_offers' => :'BuyBoxEligibleOffers',
        :'offers_available_time' => :'DateTime'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'TotalOfferCount')
        self.total_offer_count = attributes[:'TotalOfferCount']
      end

      if attributes.has_key?(:'NumberOfOffers')
        self.number_of_offers = attributes[:'NumberOfOffers']
      end

      if attributes.has_key?(:'LowestPrices')
        self.lowest_prices = attributes[:'LowestPrices']
      end

      if attributes.has_key?(:'BuyBoxPrices')
        self.buy_box_prices = attributes[:'BuyBoxPrices']
      end

      if attributes.has_key?(:'ListPrice')
        self.list_price = attributes[:'ListPrice']
      end

      if attributes.has_key?(:'SuggestedLowerPricePlusShipping')
        self.suggested_lower_price_plus_shipping = attributes[:'SuggestedLowerPricePlusShipping']
      end

      if attributes.has_key?(:'BuyBoxEligibleOffers')
        self.buy_box_eligible_offers = attributes[:'BuyBoxEligibleOffers']
      end

      if attributes.has_key?(:'OffersAvailableTime')
        self.offers_available_time = attributes[:'OffersAvailableTime']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @total_offer_count.nil?
        invalid_properties.push('invalid value for "total_offer_count", total_offer_count cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @total_offer_count.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          total_offer_count == o.total_offer_count &&
          number_of_offers == o.number_of_offers &&
          lowest_prices == o.lowest_prices &&
          buy_box_prices == o.buy_box_prices &&
          list_price == o.list_price &&
          suggested_lower_price_plus_shipping == o.suggested_lower_price_plus_shipping &&
          buy_box_eligible_offers == o.buy_box_eligible_offers &&
          offers_available_time == o.offers_available_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [total_offer_count, number_of_offers, lowest_prices, buy_box_prices, list_price, suggested_lower_price_plus_shipping, buy_box_eligible_offers, offers_available_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = SwaggerClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
