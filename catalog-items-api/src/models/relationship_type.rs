/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RelationshipType : Specific variations of the item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RelationshipType {
  /// The identifiers that uniquely identify the item that is related.
  #[serde(rename = "Identifiers")]
  identifiers: Option<::models::IdentifierType>,
  /// The color variation of the item.
  #[serde(rename = "Color")]
  color: Option<String>,
  /// The edition variation of the item.
  #[serde(rename = "Edition")]
  edition: Option<String>,
  /// The flavor variation of the item.
  #[serde(rename = "Flavor")]
  flavor: Option<String>,
  /// The gem type variations of the item.
  #[serde(rename = "GemType")]
  gem_type: Option<Vec<String>>,
  /// The golf club flex variation of an item.
  #[serde(rename = "GolfClubFlex")]
  golf_club_flex: Option<String>,
  /// The hand orientation variation of an item.
  #[serde(rename = "HandOrientation")]
  hand_orientation: Option<String>,
  /// The hardware platform variation of an item.
  #[serde(rename = "HardwarePlatform")]
  hardware_platform: Option<String>,
  /// The material type variations of an item.
  #[serde(rename = "MaterialType")]
  material_type: Option<Vec<String>>,
  /// The metal type variation of an item.
  #[serde(rename = "MetalType")]
  metal_type: Option<String>,
  /// The model variation of an item.
  #[serde(rename = "Model")]
  model: Option<String>,
  /// The operating system variations of an item.
  #[serde(rename = "OperatingSystem")]
  operating_system: Option<Vec<String>>,
  /// The product type subcategory variation of an item.
  #[serde(rename = "ProductTypeSubcategory")]
  product_type_subcategory: Option<String>,
  /// The ring size variation of an item.
  #[serde(rename = "RingSize")]
  ring_size: Option<String>,
  /// The shaft material variation of an item.
  #[serde(rename = "ShaftMaterial")]
  shaft_material: Option<String>,
  /// The scent variation of an item.
  #[serde(rename = "Scent")]
  scent: Option<String>,
  /// The size variation of an item.
  #[serde(rename = "Size")]
  size: Option<String>,
  /// The size per pearl variation of an item.
  #[serde(rename = "SizePerPearl")]
  size_per_pearl: Option<String>,
  /// The golf club loft variation of an item.
  #[serde(rename = "GolfClubLoft")]
  golf_club_loft: Option<::models::DecimalWithUnits>,
  /// The total diamond weight variation of an item.
  #[serde(rename = "TotalDiamondWeight")]
  total_diamond_weight: Option<::models::DecimalWithUnits>,
  /// The total gem weight variation of an item.
  #[serde(rename = "TotalGemWeight")]
  total_gem_weight: Option<::models::DecimalWithUnits>,
  /// The package quantity variation of an item.
  #[serde(rename = "PackageQuantity")]
  package_quantity: Option<i32>,
  /// The item dimensions relationship of an item.
  #[serde(rename = "ItemDimensions")]
  item_dimensions: Option<::models::DimensionType>
}

impl RelationshipType {
  /// Specific variations of the item.
  pub fn new() -> RelationshipType {
    RelationshipType {
      identifiers: None,
      color: None,
      edition: None,
      flavor: None,
      gem_type: None,
      golf_club_flex: None,
      hand_orientation: None,
      hardware_platform: None,
      material_type: None,
      metal_type: None,
      model: None,
      operating_system: None,
      product_type_subcategory: None,
      ring_size: None,
      shaft_material: None,
      scent: None,
      size: None,
      size_per_pearl: None,
      golf_club_loft: None,
      total_diamond_weight: None,
      total_gem_weight: None,
      package_quantity: None,
      item_dimensions: None
    }
  }

  pub fn set_identifiers(&mut self, identifiers: ::models::IdentifierType) {
    self.identifiers = Some(identifiers);
  }

  pub fn with_identifiers(mut self, identifiers: ::models::IdentifierType) -> RelationshipType {
    self.identifiers = Some(identifiers);
    self
  }

  pub fn identifiers(&self) -> Option<&::models::IdentifierType> {
    self.identifiers.as_ref()
  }

  pub fn reset_identifiers(&mut self) {
    self.identifiers = None;
  }

  pub fn set_color(&mut self, color: String) {
    self.color = Some(color);
  }

  pub fn with_color(mut self, color: String) -> RelationshipType {
    self.color = Some(color);
    self
  }

  pub fn color(&self) -> Option<&String> {
    self.color.as_ref()
  }

  pub fn reset_color(&mut self) {
    self.color = None;
  }

  pub fn set_edition(&mut self, edition: String) {
    self.edition = Some(edition);
  }

  pub fn with_edition(mut self, edition: String) -> RelationshipType {
    self.edition = Some(edition);
    self
  }

  pub fn edition(&self) -> Option<&String> {
    self.edition.as_ref()
  }

  pub fn reset_edition(&mut self) {
    self.edition = None;
  }

  pub fn set_flavor(&mut self, flavor: String) {
    self.flavor = Some(flavor);
  }

  pub fn with_flavor(mut self, flavor: String) -> RelationshipType {
    self.flavor = Some(flavor);
    self
  }

  pub fn flavor(&self) -> Option<&String> {
    self.flavor.as_ref()
  }

  pub fn reset_flavor(&mut self) {
    self.flavor = None;
  }

  pub fn set_gem_type(&mut self, gem_type: Vec<String>) {
    self.gem_type = Some(gem_type);
  }

  pub fn with_gem_type(mut self, gem_type: Vec<String>) -> RelationshipType {
    self.gem_type = Some(gem_type);
    self
  }

  pub fn gem_type(&self) -> Option<&Vec<String>> {
    self.gem_type.as_ref()
  }

  pub fn reset_gem_type(&mut self) {
    self.gem_type = None;
  }

  pub fn set_golf_club_flex(&mut self, golf_club_flex: String) {
    self.golf_club_flex = Some(golf_club_flex);
  }

  pub fn with_golf_club_flex(mut self, golf_club_flex: String) -> RelationshipType {
    self.golf_club_flex = Some(golf_club_flex);
    self
  }

  pub fn golf_club_flex(&self) -> Option<&String> {
    self.golf_club_flex.as_ref()
  }

  pub fn reset_golf_club_flex(&mut self) {
    self.golf_club_flex = None;
  }

  pub fn set_hand_orientation(&mut self, hand_orientation: String) {
    self.hand_orientation = Some(hand_orientation);
  }

  pub fn with_hand_orientation(mut self, hand_orientation: String) -> RelationshipType {
    self.hand_orientation = Some(hand_orientation);
    self
  }

  pub fn hand_orientation(&self) -> Option<&String> {
    self.hand_orientation.as_ref()
  }

  pub fn reset_hand_orientation(&mut self) {
    self.hand_orientation = None;
  }

  pub fn set_hardware_platform(&mut self, hardware_platform: String) {
    self.hardware_platform = Some(hardware_platform);
  }

  pub fn with_hardware_platform(mut self, hardware_platform: String) -> RelationshipType {
    self.hardware_platform = Some(hardware_platform);
    self
  }

  pub fn hardware_platform(&self) -> Option<&String> {
    self.hardware_platform.as_ref()
  }

  pub fn reset_hardware_platform(&mut self) {
    self.hardware_platform = None;
  }

  pub fn set_material_type(&mut self, material_type: Vec<String>) {
    self.material_type = Some(material_type);
  }

  pub fn with_material_type(mut self, material_type: Vec<String>) -> RelationshipType {
    self.material_type = Some(material_type);
    self
  }

  pub fn material_type(&self) -> Option<&Vec<String>> {
    self.material_type.as_ref()
  }

  pub fn reset_material_type(&mut self) {
    self.material_type = None;
  }

  pub fn set_metal_type(&mut self, metal_type: String) {
    self.metal_type = Some(metal_type);
  }

  pub fn with_metal_type(mut self, metal_type: String) -> RelationshipType {
    self.metal_type = Some(metal_type);
    self
  }

  pub fn metal_type(&self) -> Option<&String> {
    self.metal_type.as_ref()
  }

  pub fn reset_metal_type(&mut self) {
    self.metal_type = None;
  }

  pub fn set_model(&mut self, model: String) {
    self.model = Some(model);
  }

  pub fn with_model(mut self, model: String) -> RelationshipType {
    self.model = Some(model);
    self
  }

  pub fn model(&self) -> Option<&String> {
    self.model.as_ref()
  }

  pub fn reset_model(&mut self) {
    self.model = None;
  }

  pub fn set_operating_system(&mut self, operating_system: Vec<String>) {
    self.operating_system = Some(operating_system);
  }

  pub fn with_operating_system(mut self, operating_system: Vec<String>) -> RelationshipType {
    self.operating_system = Some(operating_system);
    self
  }

  pub fn operating_system(&self) -> Option<&Vec<String>> {
    self.operating_system.as_ref()
  }

  pub fn reset_operating_system(&mut self) {
    self.operating_system = None;
  }

  pub fn set_product_type_subcategory(&mut self, product_type_subcategory: String) {
    self.product_type_subcategory = Some(product_type_subcategory);
  }

  pub fn with_product_type_subcategory(mut self, product_type_subcategory: String) -> RelationshipType {
    self.product_type_subcategory = Some(product_type_subcategory);
    self
  }

  pub fn product_type_subcategory(&self) -> Option<&String> {
    self.product_type_subcategory.as_ref()
  }

  pub fn reset_product_type_subcategory(&mut self) {
    self.product_type_subcategory = None;
  }

  pub fn set_ring_size(&mut self, ring_size: String) {
    self.ring_size = Some(ring_size);
  }

  pub fn with_ring_size(mut self, ring_size: String) -> RelationshipType {
    self.ring_size = Some(ring_size);
    self
  }

  pub fn ring_size(&self) -> Option<&String> {
    self.ring_size.as_ref()
  }

  pub fn reset_ring_size(&mut self) {
    self.ring_size = None;
  }

  pub fn set_shaft_material(&mut self, shaft_material: String) {
    self.shaft_material = Some(shaft_material);
  }

  pub fn with_shaft_material(mut self, shaft_material: String) -> RelationshipType {
    self.shaft_material = Some(shaft_material);
    self
  }

  pub fn shaft_material(&self) -> Option<&String> {
    self.shaft_material.as_ref()
  }

  pub fn reset_shaft_material(&mut self) {
    self.shaft_material = None;
  }

  pub fn set_scent(&mut self, scent: String) {
    self.scent = Some(scent);
  }

  pub fn with_scent(mut self, scent: String) -> RelationshipType {
    self.scent = Some(scent);
    self
  }

  pub fn scent(&self) -> Option<&String> {
    self.scent.as_ref()
  }

  pub fn reset_scent(&mut self) {
    self.scent = None;
  }

  pub fn set_size(&mut self, size: String) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: String) -> RelationshipType {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&String> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_size_per_pearl(&mut self, size_per_pearl: String) {
    self.size_per_pearl = Some(size_per_pearl);
  }

  pub fn with_size_per_pearl(mut self, size_per_pearl: String) -> RelationshipType {
    self.size_per_pearl = Some(size_per_pearl);
    self
  }

  pub fn size_per_pearl(&self) -> Option<&String> {
    self.size_per_pearl.as_ref()
  }

  pub fn reset_size_per_pearl(&mut self) {
    self.size_per_pearl = None;
  }

  pub fn set_golf_club_loft(&mut self, golf_club_loft: ::models::DecimalWithUnits) {
    self.golf_club_loft = Some(golf_club_loft);
  }

  pub fn with_golf_club_loft(mut self, golf_club_loft: ::models::DecimalWithUnits) -> RelationshipType {
    self.golf_club_loft = Some(golf_club_loft);
    self
  }

  pub fn golf_club_loft(&self) -> Option<&::models::DecimalWithUnits> {
    self.golf_club_loft.as_ref()
  }

  pub fn reset_golf_club_loft(&mut self) {
    self.golf_club_loft = None;
  }

  pub fn set_total_diamond_weight(&mut self, total_diamond_weight: ::models::DecimalWithUnits) {
    self.total_diamond_weight = Some(total_diamond_weight);
  }

  pub fn with_total_diamond_weight(mut self, total_diamond_weight: ::models::DecimalWithUnits) -> RelationshipType {
    self.total_diamond_weight = Some(total_diamond_weight);
    self
  }

  pub fn total_diamond_weight(&self) -> Option<&::models::DecimalWithUnits> {
    self.total_diamond_weight.as_ref()
  }

  pub fn reset_total_diamond_weight(&mut self) {
    self.total_diamond_weight = None;
  }

  pub fn set_total_gem_weight(&mut self, total_gem_weight: ::models::DecimalWithUnits) {
    self.total_gem_weight = Some(total_gem_weight);
  }

  pub fn with_total_gem_weight(mut self, total_gem_weight: ::models::DecimalWithUnits) -> RelationshipType {
    self.total_gem_weight = Some(total_gem_weight);
    self
  }

  pub fn total_gem_weight(&self) -> Option<&::models::DecimalWithUnits> {
    self.total_gem_weight.as_ref()
  }

  pub fn reset_total_gem_weight(&mut self) {
    self.total_gem_weight = None;
  }

  pub fn set_package_quantity(&mut self, package_quantity: i32) {
    self.package_quantity = Some(package_quantity);
  }

  pub fn with_package_quantity(mut self, package_quantity: i32) -> RelationshipType {
    self.package_quantity = Some(package_quantity);
    self
  }

  pub fn package_quantity(&self) -> Option<&i32> {
    self.package_quantity.as_ref()
  }

  pub fn reset_package_quantity(&mut self) {
    self.package_quantity = None;
  }

  pub fn set_item_dimensions(&mut self, item_dimensions: ::models::DimensionType) {
    self.item_dimensions = Some(item_dimensions);
  }

  pub fn with_item_dimensions(mut self, item_dimensions: ::models::DimensionType) -> RelationshipType {
    self.item_dimensions = Some(item_dimensions);
    self
  }

  pub fn item_dimensions(&self) -> Option<&::models::DimensionType> {
    self.item_dimensions.as_ref()
  }

  pub fn reset_item_dimensions(&mut self) {
    self.item_dimensions = None;
  }

}



