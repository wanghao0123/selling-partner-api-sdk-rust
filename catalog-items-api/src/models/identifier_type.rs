/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IdentifierType {
  /// Indicates the item is identified by MarketPlaceId and ASIN.
  #[serde(rename = "MarketplaceASIN")]
  marketplace_asin: Option<::models::AsinIdentifier>,
  /// Indicates the item is identified by MarketPlaceId, SellerId, and SellerSKU.
  #[serde(rename = "SKUIdentifier")]
  sku_identifier: Option<::models::SellerSkuIdentifier>
}

impl IdentifierType {
  pub fn new() -> IdentifierType {
    IdentifierType {
      marketplace_asin: None,
      sku_identifier: None
    }
  }

  pub fn set_marketplace_asin(&mut self, marketplace_asin: ::models::AsinIdentifier) {
    self.marketplace_asin = Some(marketplace_asin);
  }

  pub fn with_marketplace_asin(mut self, marketplace_asin: ::models::AsinIdentifier) -> IdentifierType {
    self.marketplace_asin = Some(marketplace_asin);
    self
  }

  pub fn marketplace_asin(&self) -> Option<&::models::AsinIdentifier> {
    self.marketplace_asin.as_ref()
  }

  pub fn reset_marketplace_asin(&mut self) {
    self.marketplace_asin = None;
  }

  pub fn set_sku_identifier(&mut self, sku_identifier: ::models::SellerSkuIdentifier) {
    self.sku_identifier = Some(sku_identifier);
  }

  pub fn with_sku_identifier(mut self, sku_identifier: ::models::SellerSkuIdentifier) -> IdentifierType {
    self.sku_identifier = Some(sku_identifier);
    self
  }

  pub fn sku_identifier(&self) -> Option<&::models::SellerSkuIdentifier> {
    self.sku_identifier.as_ref()
  }

  pub fn reset_sku_identifier(&mut self) {
    self.sku_identifier = None;
  }

}



