/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Categories {
  /// The identifier for the product category (or browse node).
  #[serde(rename = "ProductCategoryId")]
  product_category_id: Option<String>,
  /// The name of the product category (or browse node).
  #[serde(rename = "ProductCategoryName")]
  product_category_name: Option<String>,
  /// The parent product category.
  #[serde(rename = "parent")]
  parent: Option<Value>
}

impl Categories {
  pub fn new() -> Categories {
    Categories {
      product_category_id: None,
      product_category_name: None,
      parent: None
    }
  }

  pub fn set_product_category_id(&mut self, product_category_id: String) {
    self.product_category_id = Some(product_category_id);
  }

  pub fn with_product_category_id(mut self, product_category_id: String) -> Categories {
    self.product_category_id = Some(product_category_id);
    self
  }

  pub fn product_category_id(&self) -> Option<&String> {
    self.product_category_id.as_ref()
  }

  pub fn reset_product_category_id(&mut self) {
    self.product_category_id = None;
  }

  pub fn set_product_category_name(&mut self, product_category_name: String) {
    self.product_category_name = Some(product_category_name);
  }

  pub fn with_product_category_name(mut self, product_category_name: String) -> Categories {
    self.product_category_name = Some(product_category_name);
    self
  }

  pub fn product_category_name(&self) -> Option<&String> {
    self.product_category_name.as_ref()
  }

  pub fn reset_product_category_name(&mut self) {
    self.product_category_name = None;
  }

  pub fn set_parent(&mut self, parent: Value) {
    self.parent = Some(parent);
  }

  pub fn with_parent(mut self, parent: Value) -> Categories {
    self.parent = Some(parent);
    self
  }

  pub fn parent(&self) -> Option<&Value> {
    self.parent.as_ref()
  }

  pub fn reset_parent(&mut self) {
    self.parent = None;
  }

}



