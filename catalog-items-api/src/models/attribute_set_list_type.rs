/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AttributeSetListType : The attributes of the item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AttributeSetListType {
  /// The actor attributes of the item.
  #[serde(rename = "Actor")]
  actor: Option<Vec<String>>,
  /// The artist attributes of the item.
  #[serde(rename = "Artist")]
  artist: Option<Vec<String>>,
  /// The aspect ratio attribute of the item.
  #[serde(rename = "AspectRatio")]
  aspect_ratio: Option<String>,
  /// The audience rating attribute of the item.
  #[serde(rename = "AudienceRating")]
  audience_rating: Option<String>,
  /// The author attributes of the item.
  #[serde(rename = "Author")]
  author: Option<Vec<String>>,
  /// The back finding attribute of the item.
  #[serde(rename = "BackFinding")]
  back_finding: Option<String>,
  /// The band material type attribute of the item.
  #[serde(rename = "BandMaterialType")]
  band_material_type: Option<String>,
  /// The binding attribute of the item.
  #[serde(rename = "Binding")]
  binding: Option<String>,
  /// The Bluray region attribute of the item.
  #[serde(rename = "BlurayRegion")]
  bluray_region: Option<String>,
  /// The brand attribute of the item.
  #[serde(rename = "Brand")]
  brand: Option<String>,
  /// The CERO age rating attribute of the item.
  #[serde(rename = "CeroAgeRating")]
  cero_age_rating: Option<String>,
  /// The chain type attribute of the item.
  #[serde(rename = "ChainType")]
  chain_type: Option<String>,
  /// The clasp type attribute of the item.
  #[serde(rename = "ClaspType")]
  clasp_type: Option<String>,
  /// The color attribute of the item.
  #[serde(rename = "Color")]
  color: Option<String>,
  /// The CPU manufacturer attribute of the item.
  #[serde(rename = "CpuManufacturer")]
  cpu_manufacturer: Option<String>,
  /// The CPU speed attribute of the item.
  #[serde(rename = "CpuSpeed")]
  cpu_speed: Option<::models::DecimalWithUnits>,
  /// The CPU type attribute of the item.
  #[serde(rename = "CpuType")]
  cpu_type: Option<String>,
  /// The creator attributes of the item.
  #[serde(rename = "Creator")]
  creator: Option<Vec<::models::CreatorType>>,
  /// The department attribute of the item.
  #[serde(rename = "Department")]
  department: Option<String>,
  /// The director attributes of the item.
  #[serde(rename = "Director")]
  director: Option<Vec<String>>,
  /// The display size attribute of the item.
  #[serde(rename = "DisplaySize")]
  display_size: Option<::models::DecimalWithUnits>,
  /// The edition attribute of the item.
  #[serde(rename = "Edition")]
  edition: Option<String>,
  /// The episode sequence attribute of the item.
  #[serde(rename = "EpisodeSequence")]
  episode_sequence: Option<String>,
  /// The ESRB age rating attribute of the item.
  #[serde(rename = "EsrbAgeRating")]
  esrb_age_rating: Option<String>,
  /// The feature attributes of the item
  #[serde(rename = "Feature")]
  feature: Option<Vec<String>>,
  /// The flavor attribute of the item.
  #[serde(rename = "Flavor")]
  flavor: Option<String>,
  /// The format attributes of the item.
  #[serde(rename = "Format")]
  format: Option<Vec<String>>,
  /// The gem type attributes of the item.
  #[serde(rename = "GemType")]
  gem_type: Option<Vec<String>>,
  /// The genre attribute of the item.
  #[serde(rename = "Genre")]
  genre: Option<String>,
  /// The golf club flex attribute of the item.
  #[serde(rename = "GolfClubFlex")]
  golf_club_flex: Option<String>,
  /// The golf club loft attribute of the item.
  #[serde(rename = "GolfClubLoft")]
  golf_club_loft: Option<::models::DecimalWithUnits>,
  /// The hand orientation attribute of the item.
  #[serde(rename = "HandOrientation")]
  hand_orientation: Option<String>,
  /// The hard disk interface attribute of the item.
  #[serde(rename = "HardDiskInterface")]
  hard_disk_interface: Option<String>,
  /// The hard disk size attribute of the item.
  #[serde(rename = "HardDiskSize")]
  hard_disk_size: Option<::models::DecimalWithUnits>,
  /// The hardware platform attribute of the item.
  #[serde(rename = "HardwarePlatform")]
  hardware_platform: Option<String>,
  /// The hazardous material type attribute of the item.
  #[serde(rename = "HazardousMaterialType")]
  hazardous_material_type: Option<String>,
  /// The item dimensions attribute of the item.
  #[serde(rename = "ItemDimensions")]
  item_dimensions: Option<::models::DimensionType>,
  /// The adult product attribute of the item.
  #[serde(rename = "IsAdultProduct")]
  is_adult_product: Option<bool>,
  /// The autographed attribute of the item.
  #[serde(rename = "IsAutographed")]
  is_autographed: Option<bool>,
  /// The is eligible for trade in attribute of the item.
  #[serde(rename = "IsEligibleForTradeIn")]
  is_eligible_for_trade_in: Option<bool>,
  /// The is memorabilia attribute of the item.
  #[serde(rename = "IsMemorabilia")]
  is_memorabilia: Option<bool>,
  /// The issues per year attribute of the item.
  #[serde(rename = "IssuesPerYear")]
  issues_per_year: Option<String>,
  /// The item part number attribute of the item.
  #[serde(rename = "ItemPartNumber")]
  item_part_number: Option<String>,
  /// The label attribute of the item.
  #[serde(rename = "Label")]
  label: Option<String>,
  /// The languages attribute of the item.
  #[serde(rename = "Languages")]
  languages: Option<Vec<::models::LanguageType>>,
  /// The legal disclaimer attribute of the item.
  #[serde(rename = "LegalDisclaimer")]
  legal_disclaimer: Option<String>,
  /// The list price attribute of the item.
  #[serde(rename = "ListPrice")]
  list_price: Option<::models::Price>,
  /// The manufacturer attribute of the item.
  #[serde(rename = "Manufacturer")]
  manufacturer: Option<String>,
  /// The manufacturer maximum age attribute of the item.
  #[serde(rename = "ManufacturerMaximumAge")]
  manufacturer_maximum_age: Option<::models::DecimalWithUnits>,
  /// The manufacturer minimum age attribute of the item.
  #[serde(rename = "ManufacturerMinimumAge")]
  manufacturer_minimum_age: Option<::models::DecimalWithUnits>,
  /// The manufacturer parts warranty description attribute of the item.
  #[serde(rename = "ManufacturerPartsWarrantyDescription")]
  manufacturer_parts_warranty_description: Option<String>,
  /// The material type attributes of the item.
  #[serde(rename = "MaterialType")]
  material_type: Option<Vec<String>>,
  /// The maximum resolution attribute of the item.
  #[serde(rename = "MaximumResolution")]
  maximum_resolution: Option<::models::DecimalWithUnits>,
  /// The media type attributes of the item.
  #[serde(rename = "MediaType")]
  media_type: Option<Vec<String>>,
  /// The metal stamp attribute of the item.
  #[serde(rename = "MetalStamp")]
  metal_stamp: Option<String>,
  /// The metal type attribute of the item.
  #[serde(rename = "MetalType")]
  metal_type: Option<String>,
  /// The model attribute of the item.
  #[serde(rename = "Model")]
  model: Option<String>,
  /// The number of discs attribute of the item.
  #[serde(rename = "NumberOfDiscs")]
  number_of_discs: Option<i32>,
  /// The number of issues attribute of the item.
  #[serde(rename = "NumberOfIssues")]
  number_of_issues: Option<i32>,
  /// The number of items attribute of the item.
  #[serde(rename = "NumberOfItems")]
  number_of_items: Option<i32>,
  /// The number of pages attribute of the item.
  #[serde(rename = "NumberOfPages")]
  number_of_pages: Option<i32>,
  /// The number of tracks attribute of the item.
  #[serde(rename = "NumberOfTracks")]
  number_of_tracks: Option<i32>,
  /// The operating system attributes of the item.
  #[serde(rename = "OperatingSystem")]
  operating_system: Option<Vec<String>>,
  /// The optical zoom attribute of the item.
  #[serde(rename = "OpticalZoom")]
  optical_zoom: Option<::models::DecimalWithUnits>,
  /// The package dimensions attribute of the item.
  #[serde(rename = "PackageDimensions")]
  package_dimensions: Option<::models::DimensionType>,
  /// The package quantity attribute of the item.
  #[serde(rename = "PackageQuantity")]
  package_quantity: Option<i32>,
  /// The part number attribute of the item.
  #[serde(rename = "PartNumber")]
  part_number: Option<String>,
  /// The PEGI rating attribute of the item.
  #[serde(rename = "PegiRating")]
  pegi_rating: Option<String>,
  /// The platform attributes of the item.
  #[serde(rename = "Platform")]
  platform: Option<Vec<String>>,
  /// The processor count attribute of the item.
  #[serde(rename = "ProcessorCount")]
  processor_count: Option<i32>,
  /// The product group attribute of the item.
  #[serde(rename = "ProductGroup")]
  product_group: Option<String>,
  /// The product type name attribute of the item.
  #[serde(rename = "ProductTypeName")]
  product_type_name: Option<String>,
  /// The product type subcategory attribute of the item.
  #[serde(rename = "ProductTypeSubcategory")]
  product_type_subcategory: Option<String>,
  /// The publication date attribute of the item.
  #[serde(rename = "PublicationDate")]
  publication_date: Option<String>,
  /// The publisher attribute of the item.
  #[serde(rename = "Publisher")]
  publisher: Option<String>,
  /// The region code attribute of the item.
  #[serde(rename = "RegionCode")]
  region_code: Option<String>,
  /// The release date attribute of the item.
  #[serde(rename = "ReleaseDate")]
  release_date: Option<String>,
  /// The ring size attribute of the item.
  #[serde(rename = "RingSize")]
  ring_size: Option<String>,
  /// The running time attribute of the item.
  #[serde(rename = "RunningTime")]
  running_time: Option<::models::DecimalWithUnits>,
  /// The shaft material attribute of the item.
  #[serde(rename = "ShaftMaterial")]
  shaft_material: Option<String>,
  /// The scent attribute of the item.
  #[serde(rename = "Scent")]
  scent: Option<String>,
  /// The season sequence attribute of the item.
  #[serde(rename = "SeasonSequence")]
  season_sequence: Option<String>,
  /// The Seikodo product code attribute of the item.
  #[serde(rename = "SeikodoProductCode")]
  seikodo_product_code: Option<String>,
  /// The size attribute of the item.
  #[serde(rename = "Size")]
  size: Option<String>,
  /// The size per pearl attribute of the item.
  #[serde(rename = "SizePerPearl")]
  size_per_pearl: Option<String>,
  /// The small image attribute of the item.
  #[serde(rename = "SmallImage")]
  small_image: Option<::models::Image>,
  /// The studio attribute of the item.
  #[serde(rename = "Studio")]
  studio: Option<String>,
  /// The subscription length attribute of the item.
  #[serde(rename = "SubscriptionLength")]
  subscription_length: Option<::models::DecimalWithUnits>,
  /// The system memory size attribute of the item.
  #[serde(rename = "SystemMemorySize")]
  system_memory_size: Option<::models::DecimalWithUnits>,
  /// The system memory type attribute of the item.
  #[serde(rename = "SystemMemoryType")]
  system_memory_type: Option<String>,
  /// The theatrical release date attribute of the item.
  #[serde(rename = "TheatricalReleaseDate")]
  theatrical_release_date: Option<String>,
  /// The title attribute of the item.
  #[serde(rename = "Title")]
  title: Option<String>,
  /// The total diamond weight attribute of the item.
  #[serde(rename = "TotalDiamondWeight")]
  total_diamond_weight: Option<::models::DecimalWithUnits>,
  /// The total gem weight attribute of the item.
  #[serde(rename = "TotalGemWeight")]
  total_gem_weight: Option<::models::DecimalWithUnits>,
  /// The warranty attribute of the item.
  #[serde(rename = "Warranty")]
  warranty: Option<String>,
  /// The WEEE tax value attribute of the item.
  #[serde(rename = "WeeeTaxValue")]
  weee_tax_value: Option<::models::Price>
}

impl AttributeSetListType {
  /// The attributes of the item.
  pub fn new() -> AttributeSetListType {
    AttributeSetListType {
      actor: None,
      artist: None,
      aspect_ratio: None,
      audience_rating: None,
      author: None,
      back_finding: None,
      band_material_type: None,
      binding: None,
      bluray_region: None,
      brand: None,
      cero_age_rating: None,
      chain_type: None,
      clasp_type: None,
      color: None,
      cpu_manufacturer: None,
      cpu_speed: None,
      cpu_type: None,
      creator: None,
      department: None,
      director: None,
      display_size: None,
      edition: None,
      episode_sequence: None,
      esrb_age_rating: None,
      feature: None,
      flavor: None,
      format: None,
      gem_type: None,
      genre: None,
      golf_club_flex: None,
      golf_club_loft: None,
      hand_orientation: None,
      hard_disk_interface: None,
      hard_disk_size: None,
      hardware_platform: None,
      hazardous_material_type: None,
      item_dimensions: None,
      is_adult_product: None,
      is_autographed: None,
      is_eligible_for_trade_in: None,
      is_memorabilia: None,
      issues_per_year: None,
      item_part_number: None,
      label: None,
      languages: None,
      legal_disclaimer: None,
      list_price: None,
      manufacturer: None,
      manufacturer_maximum_age: None,
      manufacturer_minimum_age: None,
      manufacturer_parts_warranty_description: None,
      material_type: None,
      maximum_resolution: None,
      media_type: None,
      metal_stamp: None,
      metal_type: None,
      model: None,
      number_of_discs: None,
      number_of_issues: None,
      number_of_items: None,
      number_of_pages: None,
      number_of_tracks: None,
      operating_system: None,
      optical_zoom: None,
      package_dimensions: None,
      package_quantity: None,
      part_number: None,
      pegi_rating: None,
      platform: None,
      processor_count: None,
      product_group: None,
      product_type_name: None,
      product_type_subcategory: None,
      publication_date: None,
      publisher: None,
      region_code: None,
      release_date: None,
      ring_size: None,
      running_time: None,
      shaft_material: None,
      scent: None,
      season_sequence: None,
      seikodo_product_code: None,
      size: None,
      size_per_pearl: None,
      small_image: None,
      studio: None,
      subscription_length: None,
      system_memory_size: None,
      system_memory_type: None,
      theatrical_release_date: None,
      title: None,
      total_diamond_weight: None,
      total_gem_weight: None,
      warranty: None,
      weee_tax_value: None
    }
  }

  pub fn set_actor(&mut self, actor: Vec<String>) {
    self.actor = Some(actor);
  }

  pub fn with_actor(mut self, actor: Vec<String>) -> AttributeSetListType {
    self.actor = Some(actor);
    self
  }

  pub fn actor(&self) -> Option<&Vec<String>> {
    self.actor.as_ref()
  }

  pub fn reset_actor(&mut self) {
    self.actor = None;
  }

  pub fn set_artist(&mut self, artist: Vec<String>) {
    self.artist = Some(artist);
  }

  pub fn with_artist(mut self, artist: Vec<String>) -> AttributeSetListType {
    self.artist = Some(artist);
    self
  }

  pub fn artist(&self) -> Option<&Vec<String>> {
    self.artist.as_ref()
  }

  pub fn reset_artist(&mut self) {
    self.artist = None;
  }

  pub fn set_aspect_ratio(&mut self, aspect_ratio: String) {
    self.aspect_ratio = Some(aspect_ratio);
  }

  pub fn with_aspect_ratio(mut self, aspect_ratio: String) -> AttributeSetListType {
    self.aspect_ratio = Some(aspect_ratio);
    self
  }

  pub fn aspect_ratio(&self) -> Option<&String> {
    self.aspect_ratio.as_ref()
  }

  pub fn reset_aspect_ratio(&mut self) {
    self.aspect_ratio = None;
  }

  pub fn set_audience_rating(&mut self, audience_rating: String) {
    self.audience_rating = Some(audience_rating);
  }

  pub fn with_audience_rating(mut self, audience_rating: String) -> AttributeSetListType {
    self.audience_rating = Some(audience_rating);
    self
  }

  pub fn audience_rating(&self) -> Option<&String> {
    self.audience_rating.as_ref()
  }

  pub fn reset_audience_rating(&mut self) {
    self.audience_rating = None;
  }

  pub fn set_author(&mut self, author: Vec<String>) {
    self.author = Some(author);
  }

  pub fn with_author(mut self, author: Vec<String>) -> AttributeSetListType {
    self.author = Some(author);
    self
  }

  pub fn author(&self) -> Option<&Vec<String>> {
    self.author.as_ref()
  }

  pub fn reset_author(&mut self) {
    self.author = None;
  }

  pub fn set_back_finding(&mut self, back_finding: String) {
    self.back_finding = Some(back_finding);
  }

  pub fn with_back_finding(mut self, back_finding: String) -> AttributeSetListType {
    self.back_finding = Some(back_finding);
    self
  }

  pub fn back_finding(&self) -> Option<&String> {
    self.back_finding.as_ref()
  }

  pub fn reset_back_finding(&mut self) {
    self.back_finding = None;
  }

  pub fn set_band_material_type(&mut self, band_material_type: String) {
    self.band_material_type = Some(band_material_type);
  }

  pub fn with_band_material_type(mut self, band_material_type: String) -> AttributeSetListType {
    self.band_material_type = Some(band_material_type);
    self
  }

  pub fn band_material_type(&self) -> Option<&String> {
    self.band_material_type.as_ref()
  }

  pub fn reset_band_material_type(&mut self) {
    self.band_material_type = None;
  }

  pub fn set_binding(&mut self, binding: String) {
    self.binding = Some(binding);
  }

  pub fn with_binding(mut self, binding: String) -> AttributeSetListType {
    self.binding = Some(binding);
    self
  }

  pub fn binding(&self) -> Option<&String> {
    self.binding.as_ref()
  }

  pub fn reset_binding(&mut self) {
    self.binding = None;
  }

  pub fn set_bluray_region(&mut self, bluray_region: String) {
    self.bluray_region = Some(bluray_region);
  }

  pub fn with_bluray_region(mut self, bluray_region: String) -> AttributeSetListType {
    self.bluray_region = Some(bluray_region);
    self
  }

  pub fn bluray_region(&self) -> Option<&String> {
    self.bluray_region.as_ref()
  }

  pub fn reset_bluray_region(&mut self) {
    self.bluray_region = None;
  }

  pub fn set_brand(&mut self, brand: String) {
    self.brand = Some(brand);
  }

  pub fn with_brand(mut self, brand: String) -> AttributeSetListType {
    self.brand = Some(brand);
    self
  }

  pub fn brand(&self) -> Option<&String> {
    self.brand.as_ref()
  }

  pub fn reset_brand(&mut self) {
    self.brand = None;
  }

  pub fn set_cero_age_rating(&mut self, cero_age_rating: String) {
    self.cero_age_rating = Some(cero_age_rating);
  }

  pub fn with_cero_age_rating(mut self, cero_age_rating: String) -> AttributeSetListType {
    self.cero_age_rating = Some(cero_age_rating);
    self
  }

  pub fn cero_age_rating(&self) -> Option<&String> {
    self.cero_age_rating.as_ref()
  }

  pub fn reset_cero_age_rating(&mut self) {
    self.cero_age_rating = None;
  }

  pub fn set_chain_type(&mut self, chain_type: String) {
    self.chain_type = Some(chain_type);
  }

  pub fn with_chain_type(mut self, chain_type: String) -> AttributeSetListType {
    self.chain_type = Some(chain_type);
    self
  }

  pub fn chain_type(&self) -> Option<&String> {
    self.chain_type.as_ref()
  }

  pub fn reset_chain_type(&mut self) {
    self.chain_type = None;
  }

  pub fn set_clasp_type(&mut self, clasp_type: String) {
    self.clasp_type = Some(clasp_type);
  }

  pub fn with_clasp_type(mut self, clasp_type: String) -> AttributeSetListType {
    self.clasp_type = Some(clasp_type);
    self
  }

  pub fn clasp_type(&self) -> Option<&String> {
    self.clasp_type.as_ref()
  }

  pub fn reset_clasp_type(&mut self) {
    self.clasp_type = None;
  }

  pub fn set_color(&mut self, color: String) {
    self.color = Some(color);
  }

  pub fn with_color(mut self, color: String) -> AttributeSetListType {
    self.color = Some(color);
    self
  }

  pub fn color(&self) -> Option<&String> {
    self.color.as_ref()
  }

  pub fn reset_color(&mut self) {
    self.color = None;
  }

  pub fn set_cpu_manufacturer(&mut self, cpu_manufacturer: String) {
    self.cpu_manufacturer = Some(cpu_manufacturer);
  }

  pub fn with_cpu_manufacturer(mut self, cpu_manufacturer: String) -> AttributeSetListType {
    self.cpu_manufacturer = Some(cpu_manufacturer);
    self
  }

  pub fn cpu_manufacturer(&self) -> Option<&String> {
    self.cpu_manufacturer.as_ref()
  }

  pub fn reset_cpu_manufacturer(&mut self) {
    self.cpu_manufacturer = None;
  }

  pub fn set_cpu_speed(&mut self, cpu_speed: ::models::DecimalWithUnits) {
    self.cpu_speed = Some(cpu_speed);
  }

  pub fn with_cpu_speed(mut self, cpu_speed: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.cpu_speed = Some(cpu_speed);
    self
  }

  pub fn cpu_speed(&self) -> Option<&::models::DecimalWithUnits> {
    self.cpu_speed.as_ref()
  }

  pub fn reset_cpu_speed(&mut self) {
    self.cpu_speed = None;
  }

  pub fn set_cpu_type(&mut self, cpu_type: String) {
    self.cpu_type = Some(cpu_type);
  }

  pub fn with_cpu_type(mut self, cpu_type: String) -> AttributeSetListType {
    self.cpu_type = Some(cpu_type);
    self
  }

  pub fn cpu_type(&self) -> Option<&String> {
    self.cpu_type.as_ref()
  }

  pub fn reset_cpu_type(&mut self) {
    self.cpu_type = None;
  }

  pub fn set_creator(&mut self, creator: Vec<::models::CreatorType>) {
    self.creator = Some(creator);
  }

  pub fn with_creator(mut self, creator: Vec<::models::CreatorType>) -> AttributeSetListType {
    self.creator = Some(creator);
    self
  }

  pub fn creator(&self) -> Option<&Vec<::models::CreatorType>> {
    self.creator.as_ref()
  }

  pub fn reset_creator(&mut self) {
    self.creator = None;
  }

  pub fn set_department(&mut self, department: String) {
    self.department = Some(department);
  }

  pub fn with_department(mut self, department: String) -> AttributeSetListType {
    self.department = Some(department);
    self
  }

  pub fn department(&self) -> Option<&String> {
    self.department.as_ref()
  }

  pub fn reset_department(&mut self) {
    self.department = None;
  }

  pub fn set_director(&mut self, director: Vec<String>) {
    self.director = Some(director);
  }

  pub fn with_director(mut self, director: Vec<String>) -> AttributeSetListType {
    self.director = Some(director);
    self
  }

  pub fn director(&self) -> Option<&Vec<String>> {
    self.director.as_ref()
  }

  pub fn reset_director(&mut self) {
    self.director = None;
  }

  pub fn set_display_size(&mut self, display_size: ::models::DecimalWithUnits) {
    self.display_size = Some(display_size);
  }

  pub fn with_display_size(mut self, display_size: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.display_size = Some(display_size);
    self
  }

  pub fn display_size(&self) -> Option<&::models::DecimalWithUnits> {
    self.display_size.as_ref()
  }

  pub fn reset_display_size(&mut self) {
    self.display_size = None;
  }

  pub fn set_edition(&mut self, edition: String) {
    self.edition = Some(edition);
  }

  pub fn with_edition(mut self, edition: String) -> AttributeSetListType {
    self.edition = Some(edition);
    self
  }

  pub fn edition(&self) -> Option<&String> {
    self.edition.as_ref()
  }

  pub fn reset_edition(&mut self) {
    self.edition = None;
  }

  pub fn set_episode_sequence(&mut self, episode_sequence: String) {
    self.episode_sequence = Some(episode_sequence);
  }

  pub fn with_episode_sequence(mut self, episode_sequence: String) -> AttributeSetListType {
    self.episode_sequence = Some(episode_sequence);
    self
  }

  pub fn episode_sequence(&self) -> Option<&String> {
    self.episode_sequence.as_ref()
  }

  pub fn reset_episode_sequence(&mut self) {
    self.episode_sequence = None;
  }

  pub fn set_esrb_age_rating(&mut self, esrb_age_rating: String) {
    self.esrb_age_rating = Some(esrb_age_rating);
  }

  pub fn with_esrb_age_rating(mut self, esrb_age_rating: String) -> AttributeSetListType {
    self.esrb_age_rating = Some(esrb_age_rating);
    self
  }

  pub fn esrb_age_rating(&self) -> Option<&String> {
    self.esrb_age_rating.as_ref()
  }

  pub fn reset_esrb_age_rating(&mut self) {
    self.esrb_age_rating = None;
  }

  pub fn set_feature(&mut self, feature: Vec<String>) {
    self.feature = Some(feature);
  }

  pub fn with_feature(mut self, feature: Vec<String>) -> AttributeSetListType {
    self.feature = Some(feature);
    self
  }

  pub fn feature(&self) -> Option<&Vec<String>> {
    self.feature.as_ref()
  }

  pub fn reset_feature(&mut self) {
    self.feature = None;
  }

  pub fn set_flavor(&mut self, flavor: String) {
    self.flavor = Some(flavor);
  }

  pub fn with_flavor(mut self, flavor: String) -> AttributeSetListType {
    self.flavor = Some(flavor);
    self
  }

  pub fn flavor(&self) -> Option<&String> {
    self.flavor.as_ref()
  }

  pub fn reset_flavor(&mut self) {
    self.flavor = None;
  }

  pub fn set_format(&mut self, format: Vec<String>) {
    self.format = Some(format);
  }

  pub fn with_format(mut self, format: Vec<String>) -> AttributeSetListType {
    self.format = Some(format);
    self
  }

  pub fn format(&self) -> Option<&Vec<String>> {
    self.format.as_ref()
  }

  pub fn reset_format(&mut self) {
    self.format = None;
  }

  pub fn set_gem_type(&mut self, gem_type: Vec<String>) {
    self.gem_type = Some(gem_type);
  }

  pub fn with_gem_type(mut self, gem_type: Vec<String>) -> AttributeSetListType {
    self.gem_type = Some(gem_type);
    self
  }

  pub fn gem_type(&self) -> Option<&Vec<String>> {
    self.gem_type.as_ref()
  }

  pub fn reset_gem_type(&mut self) {
    self.gem_type = None;
  }

  pub fn set_genre(&mut self, genre: String) {
    self.genre = Some(genre);
  }

  pub fn with_genre(mut self, genre: String) -> AttributeSetListType {
    self.genre = Some(genre);
    self
  }

  pub fn genre(&self) -> Option<&String> {
    self.genre.as_ref()
  }

  pub fn reset_genre(&mut self) {
    self.genre = None;
  }

  pub fn set_golf_club_flex(&mut self, golf_club_flex: String) {
    self.golf_club_flex = Some(golf_club_flex);
  }

  pub fn with_golf_club_flex(mut self, golf_club_flex: String) -> AttributeSetListType {
    self.golf_club_flex = Some(golf_club_flex);
    self
  }

  pub fn golf_club_flex(&self) -> Option<&String> {
    self.golf_club_flex.as_ref()
  }

  pub fn reset_golf_club_flex(&mut self) {
    self.golf_club_flex = None;
  }

  pub fn set_golf_club_loft(&mut self, golf_club_loft: ::models::DecimalWithUnits) {
    self.golf_club_loft = Some(golf_club_loft);
  }

  pub fn with_golf_club_loft(mut self, golf_club_loft: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.golf_club_loft = Some(golf_club_loft);
    self
  }

  pub fn golf_club_loft(&self) -> Option<&::models::DecimalWithUnits> {
    self.golf_club_loft.as_ref()
  }

  pub fn reset_golf_club_loft(&mut self) {
    self.golf_club_loft = None;
  }

  pub fn set_hand_orientation(&mut self, hand_orientation: String) {
    self.hand_orientation = Some(hand_orientation);
  }

  pub fn with_hand_orientation(mut self, hand_orientation: String) -> AttributeSetListType {
    self.hand_orientation = Some(hand_orientation);
    self
  }

  pub fn hand_orientation(&self) -> Option<&String> {
    self.hand_orientation.as_ref()
  }

  pub fn reset_hand_orientation(&mut self) {
    self.hand_orientation = None;
  }

  pub fn set_hard_disk_interface(&mut self, hard_disk_interface: String) {
    self.hard_disk_interface = Some(hard_disk_interface);
  }

  pub fn with_hard_disk_interface(mut self, hard_disk_interface: String) -> AttributeSetListType {
    self.hard_disk_interface = Some(hard_disk_interface);
    self
  }

  pub fn hard_disk_interface(&self) -> Option<&String> {
    self.hard_disk_interface.as_ref()
  }

  pub fn reset_hard_disk_interface(&mut self) {
    self.hard_disk_interface = None;
  }

  pub fn set_hard_disk_size(&mut self, hard_disk_size: ::models::DecimalWithUnits) {
    self.hard_disk_size = Some(hard_disk_size);
  }

  pub fn with_hard_disk_size(mut self, hard_disk_size: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.hard_disk_size = Some(hard_disk_size);
    self
  }

  pub fn hard_disk_size(&self) -> Option<&::models::DecimalWithUnits> {
    self.hard_disk_size.as_ref()
  }

  pub fn reset_hard_disk_size(&mut self) {
    self.hard_disk_size = None;
  }

  pub fn set_hardware_platform(&mut self, hardware_platform: String) {
    self.hardware_platform = Some(hardware_platform);
  }

  pub fn with_hardware_platform(mut self, hardware_platform: String) -> AttributeSetListType {
    self.hardware_platform = Some(hardware_platform);
    self
  }

  pub fn hardware_platform(&self) -> Option<&String> {
    self.hardware_platform.as_ref()
  }

  pub fn reset_hardware_platform(&mut self) {
    self.hardware_platform = None;
  }

  pub fn set_hazardous_material_type(&mut self, hazardous_material_type: String) {
    self.hazardous_material_type = Some(hazardous_material_type);
  }

  pub fn with_hazardous_material_type(mut self, hazardous_material_type: String) -> AttributeSetListType {
    self.hazardous_material_type = Some(hazardous_material_type);
    self
  }

  pub fn hazardous_material_type(&self) -> Option<&String> {
    self.hazardous_material_type.as_ref()
  }

  pub fn reset_hazardous_material_type(&mut self) {
    self.hazardous_material_type = None;
  }

  pub fn set_item_dimensions(&mut self, item_dimensions: ::models::DimensionType) {
    self.item_dimensions = Some(item_dimensions);
  }

  pub fn with_item_dimensions(mut self, item_dimensions: ::models::DimensionType) -> AttributeSetListType {
    self.item_dimensions = Some(item_dimensions);
    self
  }

  pub fn item_dimensions(&self) -> Option<&::models::DimensionType> {
    self.item_dimensions.as_ref()
  }

  pub fn reset_item_dimensions(&mut self) {
    self.item_dimensions = None;
  }

  pub fn set_is_adult_product(&mut self, is_adult_product: bool) {
    self.is_adult_product = Some(is_adult_product);
  }

  pub fn with_is_adult_product(mut self, is_adult_product: bool) -> AttributeSetListType {
    self.is_adult_product = Some(is_adult_product);
    self
  }

  pub fn is_adult_product(&self) -> Option<&bool> {
    self.is_adult_product.as_ref()
  }

  pub fn reset_is_adult_product(&mut self) {
    self.is_adult_product = None;
  }

  pub fn set_is_autographed(&mut self, is_autographed: bool) {
    self.is_autographed = Some(is_autographed);
  }

  pub fn with_is_autographed(mut self, is_autographed: bool) -> AttributeSetListType {
    self.is_autographed = Some(is_autographed);
    self
  }

  pub fn is_autographed(&self) -> Option<&bool> {
    self.is_autographed.as_ref()
  }

  pub fn reset_is_autographed(&mut self) {
    self.is_autographed = None;
  }

  pub fn set_is_eligible_for_trade_in(&mut self, is_eligible_for_trade_in: bool) {
    self.is_eligible_for_trade_in = Some(is_eligible_for_trade_in);
  }

  pub fn with_is_eligible_for_trade_in(mut self, is_eligible_for_trade_in: bool) -> AttributeSetListType {
    self.is_eligible_for_trade_in = Some(is_eligible_for_trade_in);
    self
  }

  pub fn is_eligible_for_trade_in(&self) -> Option<&bool> {
    self.is_eligible_for_trade_in.as_ref()
  }

  pub fn reset_is_eligible_for_trade_in(&mut self) {
    self.is_eligible_for_trade_in = None;
  }

  pub fn set_is_memorabilia(&mut self, is_memorabilia: bool) {
    self.is_memorabilia = Some(is_memorabilia);
  }

  pub fn with_is_memorabilia(mut self, is_memorabilia: bool) -> AttributeSetListType {
    self.is_memorabilia = Some(is_memorabilia);
    self
  }

  pub fn is_memorabilia(&self) -> Option<&bool> {
    self.is_memorabilia.as_ref()
  }

  pub fn reset_is_memorabilia(&mut self) {
    self.is_memorabilia = None;
  }

  pub fn set_issues_per_year(&mut self, issues_per_year: String) {
    self.issues_per_year = Some(issues_per_year);
  }

  pub fn with_issues_per_year(mut self, issues_per_year: String) -> AttributeSetListType {
    self.issues_per_year = Some(issues_per_year);
    self
  }

  pub fn issues_per_year(&self) -> Option<&String> {
    self.issues_per_year.as_ref()
  }

  pub fn reset_issues_per_year(&mut self) {
    self.issues_per_year = None;
  }

  pub fn set_item_part_number(&mut self, item_part_number: String) {
    self.item_part_number = Some(item_part_number);
  }

  pub fn with_item_part_number(mut self, item_part_number: String) -> AttributeSetListType {
    self.item_part_number = Some(item_part_number);
    self
  }

  pub fn item_part_number(&self) -> Option<&String> {
    self.item_part_number.as_ref()
  }

  pub fn reset_item_part_number(&mut self) {
    self.item_part_number = None;
  }

  pub fn set_label(&mut self, label: String) {
    self.label = Some(label);
  }

  pub fn with_label(mut self, label: String) -> AttributeSetListType {
    self.label = Some(label);
    self
  }

  pub fn label(&self) -> Option<&String> {
    self.label.as_ref()
  }

  pub fn reset_label(&mut self) {
    self.label = None;
  }

  pub fn set_languages(&mut self, languages: Vec<::models::LanguageType>) {
    self.languages = Some(languages);
  }

  pub fn with_languages(mut self, languages: Vec<::models::LanguageType>) -> AttributeSetListType {
    self.languages = Some(languages);
    self
  }

  pub fn languages(&self) -> Option<&Vec<::models::LanguageType>> {
    self.languages.as_ref()
  }

  pub fn reset_languages(&mut self) {
    self.languages = None;
  }

  pub fn set_legal_disclaimer(&mut self, legal_disclaimer: String) {
    self.legal_disclaimer = Some(legal_disclaimer);
  }

  pub fn with_legal_disclaimer(mut self, legal_disclaimer: String) -> AttributeSetListType {
    self.legal_disclaimer = Some(legal_disclaimer);
    self
  }

  pub fn legal_disclaimer(&self) -> Option<&String> {
    self.legal_disclaimer.as_ref()
  }

  pub fn reset_legal_disclaimer(&mut self) {
    self.legal_disclaimer = None;
  }

  pub fn set_list_price(&mut self, list_price: ::models::Price) {
    self.list_price = Some(list_price);
  }

  pub fn with_list_price(mut self, list_price: ::models::Price) -> AttributeSetListType {
    self.list_price = Some(list_price);
    self
  }

  pub fn list_price(&self) -> Option<&::models::Price> {
    self.list_price.as_ref()
  }

  pub fn reset_list_price(&mut self) {
    self.list_price = None;
  }

  pub fn set_manufacturer(&mut self, manufacturer: String) {
    self.manufacturer = Some(manufacturer);
  }

  pub fn with_manufacturer(mut self, manufacturer: String) -> AttributeSetListType {
    self.manufacturer = Some(manufacturer);
    self
  }

  pub fn manufacturer(&self) -> Option<&String> {
    self.manufacturer.as_ref()
  }

  pub fn reset_manufacturer(&mut self) {
    self.manufacturer = None;
  }

  pub fn set_manufacturer_maximum_age(&mut self, manufacturer_maximum_age: ::models::DecimalWithUnits) {
    self.manufacturer_maximum_age = Some(manufacturer_maximum_age);
  }

  pub fn with_manufacturer_maximum_age(mut self, manufacturer_maximum_age: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.manufacturer_maximum_age = Some(manufacturer_maximum_age);
    self
  }

  pub fn manufacturer_maximum_age(&self) -> Option<&::models::DecimalWithUnits> {
    self.manufacturer_maximum_age.as_ref()
  }

  pub fn reset_manufacturer_maximum_age(&mut self) {
    self.manufacturer_maximum_age = None;
  }

  pub fn set_manufacturer_minimum_age(&mut self, manufacturer_minimum_age: ::models::DecimalWithUnits) {
    self.manufacturer_minimum_age = Some(manufacturer_minimum_age);
  }

  pub fn with_manufacturer_minimum_age(mut self, manufacturer_minimum_age: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.manufacturer_minimum_age = Some(manufacturer_minimum_age);
    self
  }

  pub fn manufacturer_minimum_age(&self) -> Option<&::models::DecimalWithUnits> {
    self.manufacturer_minimum_age.as_ref()
  }

  pub fn reset_manufacturer_minimum_age(&mut self) {
    self.manufacturer_minimum_age = None;
  }

  pub fn set_manufacturer_parts_warranty_description(&mut self, manufacturer_parts_warranty_description: String) {
    self.manufacturer_parts_warranty_description = Some(manufacturer_parts_warranty_description);
  }

  pub fn with_manufacturer_parts_warranty_description(mut self, manufacturer_parts_warranty_description: String) -> AttributeSetListType {
    self.manufacturer_parts_warranty_description = Some(manufacturer_parts_warranty_description);
    self
  }

  pub fn manufacturer_parts_warranty_description(&self) -> Option<&String> {
    self.manufacturer_parts_warranty_description.as_ref()
  }

  pub fn reset_manufacturer_parts_warranty_description(&mut self) {
    self.manufacturer_parts_warranty_description = None;
  }

  pub fn set_material_type(&mut self, material_type: Vec<String>) {
    self.material_type = Some(material_type);
  }

  pub fn with_material_type(mut self, material_type: Vec<String>) -> AttributeSetListType {
    self.material_type = Some(material_type);
    self
  }

  pub fn material_type(&self) -> Option<&Vec<String>> {
    self.material_type.as_ref()
  }

  pub fn reset_material_type(&mut self) {
    self.material_type = None;
  }

  pub fn set_maximum_resolution(&mut self, maximum_resolution: ::models::DecimalWithUnits) {
    self.maximum_resolution = Some(maximum_resolution);
  }

  pub fn with_maximum_resolution(mut self, maximum_resolution: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.maximum_resolution = Some(maximum_resolution);
    self
  }

  pub fn maximum_resolution(&self) -> Option<&::models::DecimalWithUnits> {
    self.maximum_resolution.as_ref()
  }

  pub fn reset_maximum_resolution(&mut self) {
    self.maximum_resolution = None;
  }

  pub fn set_media_type(&mut self, media_type: Vec<String>) {
    self.media_type = Some(media_type);
  }

  pub fn with_media_type(mut self, media_type: Vec<String>) -> AttributeSetListType {
    self.media_type = Some(media_type);
    self
  }

  pub fn media_type(&self) -> Option<&Vec<String>> {
    self.media_type.as_ref()
  }

  pub fn reset_media_type(&mut self) {
    self.media_type = None;
  }

  pub fn set_metal_stamp(&mut self, metal_stamp: String) {
    self.metal_stamp = Some(metal_stamp);
  }

  pub fn with_metal_stamp(mut self, metal_stamp: String) -> AttributeSetListType {
    self.metal_stamp = Some(metal_stamp);
    self
  }

  pub fn metal_stamp(&self) -> Option<&String> {
    self.metal_stamp.as_ref()
  }

  pub fn reset_metal_stamp(&mut self) {
    self.metal_stamp = None;
  }

  pub fn set_metal_type(&mut self, metal_type: String) {
    self.metal_type = Some(metal_type);
  }

  pub fn with_metal_type(mut self, metal_type: String) -> AttributeSetListType {
    self.metal_type = Some(metal_type);
    self
  }

  pub fn metal_type(&self) -> Option<&String> {
    self.metal_type.as_ref()
  }

  pub fn reset_metal_type(&mut self) {
    self.metal_type = None;
  }

  pub fn set_model(&mut self, model: String) {
    self.model = Some(model);
  }

  pub fn with_model(mut self, model: String) -> AttributeSetListType {
    self.model = Some(model);
    self
  }

  pub fn model(&self) -> Option<&String> {
    self.model.as_ref()
  }

  pub fn reset_model(&mut self) {
    self.model = None;
  }

  pub fn set_number_of_discs(&mut self, number_of_discs: i32) {
    self.number_of_discs = Some(number_of_discs);
  }

  pub fn with_number_of_discs(mut self, number_of_discs: i32) -> AttributeSetListType {
    self.number_of_discs = Some(number_of_discs);
    self
  }

  pub fn number_of_discs(&self) -> Option<&i32> {
    self.number_of_discs.as_ref()
  }

  pub fn reset_number_of_discs(&mut self) {
    self.number_of_discs = None;
  }

  pub fn set_number_of_issues(&mut self, number_of_issues: i32) {
    self.number_of_issues = Some(number_of_issues);
  }

  pub fn with_number_of_issues(mut self, number_of_issues: i32) -> AttributeSetListType {
    self.number_of_issues = Some(number_of_issues);
    self
  }

  pub fn number_of_issues(&self) -> Option<&i32> {
    self.number_of_issues.as_ref()
  }

  pub fn reset_number_of_issues(&mut self) {
    self.number_of_issues = None;
  }

  pub fn set_number_of_items(&mut self, number_of_items: i32) {
    self.number_of_items = Some(number_of_items);
  }

  pub fn with_number_of_items(mut self, number_of_items: i32) -> AttributeSetListType {
    self.number_of_items = Some(number_of_items);
    self
  }

  pub fn number_of_items(&self) -> Option<&i32> {
    self.number_of_items.as_ref()
  }

  pub fn reset_number_of_items(&mut self) {
    self.number_of_items = None;
  }

  pub fn set_number_of_pages(&mut self, number_of_pages: i32) {
    self.number_of_pages = Some(number_of_pages);
  }

  pub fn with_number_of_pages(mut self, number_of_pages: i32) -> AttributeSetListType {
    self.number_of_pages = Some(number_of_pages);
    self
  }

  pub fn number_of_pages(&self) -> Option<&i32> {
    self.number_of_pages.as_ref()
  }

  pub fn reset_number_of_pages(&mut self) {
    self.number_of_pages = None;
  }

  pub fn set_number_of_tracks(&mut self, number_of_tracks: i32) {
    self.number_of_tracks = Some(number_of_tracks);
  }

  pub fn with_number_of_tracks(mut self, number_of_tracks: i32) -> AttributeSetListType {
    self.number_of_tracks = Some(number_of_tracks);
    self
  }

  pub fn number_of_tracks(&self) -> Option<&i32> {
    self.number_of_tracks.as_ref()
  }

  pub fn reset_number_of_tracks(&mut self) {
    self.number_of_tracks = None;
  }

  pub fn set_operating_system(&mut self, operating_system: Vec<String>) {
    self.operating_system = Some(operating_system);
  }

  pub fn with_operating_system(mut self, operating_system: Vec<String>) -> AttributeSetListType {
    self.operating_system = Some(operating_system);
    self
  }

  pub fn operating_system(&self) -> Option<&Vec<String>> {
    self.operating_system.as_ref()
  }

  pub fn reset_operating_system(&mut self) {
    self.operating_system = None;
  }

  pub fn set_optical_zoom(&mut self, optical_zoom: ::models::DecimalWithUnits) {
    self.optical_zoom = Some(optical_zoom);
  }

  pub fn with_optical_zoom(mut self, optical_zoom: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.optical_zoom = Some(optical_zoom);
    self
  }

  pub fn optical_zoom(&self) -> Option<&::models::DecimalWithUnits> {
    self.optical_zoom.as_ref()
  }

  pub fn reset_optical_zoom(&mut self) {
    self.optical_zoom = None;
  }

  pub fn set_package_dimensions(&mut self, package_dimensions: ::models::DimensionType) {
    self.package_dimensions = Some(package_dimensions);
  }

  pub fn with_package_dimensions(mut self, package_dimensions: ::models::DimensionType) -> AttributeSetListType {
    self.package_dimensions = Some(package_dimensions);
    self
  }

  pub fn package_dimensions(&self) -> Option<&::models::DimensionType> {
    self.package_dimensions.as_ref()
  }

  pub fn reset_package_dimensions(&mut self) {
    self.package_dimensions = None;
  }

  pub fn set_package_quantity(&mut self, package_quantity: i32) {
    self.package_quantity = Some(package_quantity);
  }

  pub fn with_package_quantity(mut self, package_quantity: i32) -> AttributeSetListType {
    self.package_quantity = Some(package_quantity);
    self
  }

  pub fn package_quantity(&self) -> Option<&i32> {
    self.package_quantity.as_ref()
  }

  pub fn reset_package_quantity(&mut self) {
    self.package_quantity = None;
  }

  pub fn set_part_number(&mut self, part_number: String) {
    self.part_number = Some(part_number);
  }

  pub fn with_part_number(mut self, part_number: String) -> AttributeSetListType {
    self.part_number = Some(part_number);
    self
  }

  pub fn part_number(&self) -> Option<&String> {
    self.part_number.as_ref()
  }

  pub fn reset_part_number(&mut self) {
    self.part_number = None;
  }

  pub fn set_pegi_rating(&mut self, pegi_rating: String) {
    self.pegi_rating = Some(pegi_rating);
  }

  pub fn with_pegi_rating(mut self, pegi_rating: String) -> AttributeSetListType {
    self.pegi_rating = Some(pegi_rating);
    self
  }

  pub fn pegi_rating(&self) -> Option<&String> {
    self.pegi_rating.as_ref()
  }

  pub fn reset_pegi_rating(&mut self) {
    self.pegi_rating = None;
  }

  pub fn set_platform(&mut self, platform: Vec<String>) {
    self.platform = Some(platform);
  }

  pub fn with_platform(mut self, platform: Vec<String>) -> AttributeSetListType {
    self.platform = Some(platform);
    self
  }

  pub fn platform(&self) -> Option<&Vec<String>> {
    self.platform.as_ref()
  }

  pub fn reset_platform(&mut self) {
    self.platform = None;
  }

  pub fn set_processor_count(&mut self, processor_count: i32) {
    self.processor_count = Some(processor_count);
  }

  pub fn with_processor_count(mut self, processor_count: i32) -> AttributeSetListType {
    self.processor_count = Some(processor_count);
    self
  }

  pub fn processor_count(&self) -> Option<&i32> {
    self.processor_count.as_ref()
  }

  pub fn reset_processor_count(&mut self) {
    self.processor_count = None;
  }

  pub fn set_product_group(&mut self, product_group: String) {
    self.product_group = Some(product_group);
  }

  pub fn with_product_group(mut self, product_group: String) -> AttributeSetListType {
    self.product_group = Some(product_group);
    self
  }

  pub fn product_group(&self) -> Option<&String> {
    self.product_group.as_ref()
  }

  pub fn reset_product_group(&mut self) {
    self.product_group = None;
  }

  pub fn set_product_type_name(&mut self, product_type_name: String) {
    self.product_type_name = Some(product_type_name);
  }

  pub fn with_product_type_name(mut self, product_type_name: String) -> AttributeSetListType {
    self.product_type_name = Some(product_type_name);
    self
  }

  pub fn product_type_name(&self) -> Option<&String> {
    self.product_type_name.as_ref()
  }

  pub fn reset_product_type_name(&mut self) {
    self.product_type_name = None;
  }

  pub fn set_product_type_subcategory(&mut self, product_type_subcategory: String) {
    self.product_type_subcategory = Some(product_type_subcategory);
  }

  pub fn with_product_type_subcategory(mut self, product_type_subcategory: String) -> AttributeSetListType {
    self.product_type_subcategory = Some(product_type_subcategory);
    self
  }

  pub fn product_type_subcategory(&self) -> Option<&String> {
    self.product_type_subcategory.as_ref()
  }

  pub fn reset_product_type_subcategory(&mut self) {
    self.product_type_subcategory = None;
  }

  pub fn set_publication_date(&mut self, publication_date: String) {
    self.publication_date = Some(publication_date);
  }

  pub fn with_publication_date(mut self, publication_date: String) -> AttributeSetListType {
    self.publication_date = Some(publication_date);
    self
  }

  pub fn publication_date(&self) -> Option<&String> {
    self.publication_date.as_ref()
  }

  pub fn reset_publication_date(&mut self) {
    self.publication_date = None;
  }

  pub fn set_publisher(&mut self, publisher: String) {
    self.publisher = Some(publisher);
  }

  pub fn with_publisher(mut self, publisher: String) -> AttributeSetListType {
    self.publisher = Some(publisher);
    self
  }

  pub fn publisher(&self) -> Option<&String> {
    self.publisher.as_ref()
  }

  pub fn reset_publisher(&mut self) {
    self.publisher = None;
  }

  pub fn set_region_code(&mut self, region_code: String) {
    self.region_code = Some(region_code);
  }

  pub fn with_region_code(mut self, region_code: String) -> AttributeSetListType {
    self.region_code = Some(region_code);
    self
  }

  pub fn region_code(&self) -> Option<&String> {
    self.region_code.as_ref()
  }

  pub fn reset_region_code(&mut self) {
    self.region_code = None;
  }

  pub fn set_release_date(&mut self, release_date: String) {
    self.release_date = Some(release_date);
  }

  pub fn with_release_date(mut self, release_date: String) -> AttributeSetListType {
    self.release_date = Some(release_date);
    self
  }

  pub fn release_date(&self) -> Option<&String> {
    self.release_date.as_ref()
  }

  pub fn reset_release_date(&mut self) {
    self.release_date = None;
  }

  pub fn set_ring_size(&mut self, ring_size: String) {
    self.ring_size = Some(ring_size);
  }

  pub fn with_ring_size(mut self, ring_size: String) -> AttributeSetListType {
    self.ring_size = Some(ring_size);
    self
  }

  pub fn ring_size(&self) -> Option<&String> {
    self.ring_size.as_ref()
  }

  pub fn reset_ring_size(&mut self) {
    self.ring_size = None;
  }

  pub fn set_running_time(&mut self, running_time: ::models::DecimalWithUnits) {
    self.running_time = Some(running_time);
  }

  pub fn with_running_time(mut self, running_time: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.running_time = Some(running_time);
    self
  }

  pub fn running_time(&self) -> Option<&::models::DecimalWithUnits> {
    self.running_time.as_ref()
  }

  pub fn reset_running_time(&mut self) {
    self.running_time = None;
  }

  pub fn set_shaft_material(&mut self, shaft_material: String) {
    self.shaft_material = Some(shaft_material);
  }

  pub fn with_shaft_material(mut self, shaft_material: String) -> AttributeSetListType {
    self.shaft_material = Some(shaft_material);
    self
  }

  pub fn shaft_material(&self) -> Option<&String> {
    self.shaft_material.as_ref()
  }

  pub fn reset_shaft_material(&mut self) {
    self.shaft_material = None;
  }

  pub fn set_scent(&mut self, scent: String) {
    self.scent = Some(scent);
  }

  pub fn with_scent(mut self, scent: String) -> AttributeSetListType {
    self.scent = Some(scent);
    self
  }

  pub fn scent(&self) -> Option<&String> {
    self.scent.as_ref()
  }

  pub fn reset_scent(&mut self) {
    self.scent = None;
  }

  pub fn set_season_sequence(&mut self, season_sequence: String) {
    self.season_sequence = Some(season_sequence);
  }

  pub fn with_season_sequence(mut self, season_sequence: String) -> AttributeSetListType {
    self.season_sequence = Some(season_sequence);
    self
  }

  pub fn season_sequence(&self) -> Option<&String> {
    self.season_sequence.as_ref()
  }

  pub fn reset_season_sequence(&mut self) {
    self.season_sequence = None;
  }

  pub fn set_seikodo_product_code(&mut self, seikodo_product_code: String) {
    self.seikodo_product_code = Some(seikodo_product_code);
  }

  pub fn with_seikodo_product_code(mut self, seikodo_product_code: String) -> AttributeSetListType {
    self.seikodo_product_code = Some(seikodo_product_code);
    self
  }

  pub fn seikodo_product_code(&self) -> Option<&String> {
    self.seikodo_product_code.as_ref()
  }

  pub fn reset_seikodo_product_code(&mut self) {
    self.seikodo_product_code = None;
  }

  pub fn set_size(&mut self, size: String) {
    self.size = Some(size);
  }

  pub fn with_size(mut self, size: String) -> AttributeSetListType {
    self.size = Some(size);
    self
  }

  pub fn size(&self) -> Option<&String> {
    self.size.as_ref()
  }

  pub fn reset_size(&mut self) {
    self.size = None;
  }

  pub fn set_size_per_pearl(&mut self, size_per_pearl: String) {
    self.size_per_pearl = Some(size_per_pearl);
  }

  pub fn with_size_per_pearl(mut self, size_per_pearl: String) -> AttributeSetListType {
    self.size_per_pearl = Some(size_per_pearl);
    self
  }

  pub fn size_per_pearl(&self) -> Option<&String> {
    self.size_per_pearl.as_ref()
  }

  pub fn reset_size_per_pearl(&mut self) {
    self.size_per_pearl = None;
  }

  pub fn set_small_image(&mut self, small_image: ::models::Image) {
    self.small_image = Some(small_image);
  }

  pub fn with_small_image(mut self, small_image: ::models::Image) -> AttributeSetListType {
    self.small_image = Some(small_image);
    self
  }

  pub fn small_image(&self) -> Option<&::models::Image> {
    self.small_image.as_ref()
  }

  pub fn reset_small_image(&mut self) {
    self.small_image = None;
  }

  pub fn set_studio(&mut self, studio: String) {
    self.studio = Some(studio);
  }

  pub fn with_studio(mut self, studio: String) -> AttributeSetListType {
    self.studio = Some(studio);
    self
  }

  pub fn studio(&self) -> Option<&String> {
    self.studio.as_ref()
  }

  pub fn reset_studio(&mut self) {
    self.studio = None;
  }

  pub fn set_subscription_length(&mut self, subscription_length: ::models::DecimalWithUnits) {
    self.subscription_length = Some(subscription_length);
  }

  pub fn with_subscription_length(mut self, subscription_length: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.subscription_length = Some(subscription_length);
    self
  }

  pub fn subscription_length(&self) -> Option<&::models::DecimalWithUnits> {
    self.subscription_length.as_ref()
  }

  pub fn reset_subscription_length(&mut self) {
    self.subscription_length = None;
  }

  pub fn set_system_memory_size(&mut self, system_memory_size: ::models::DecimalWithUnits) {
    self.system_memory_size = Some(system_memory_size);
  }

  pub fn with_system_memory_size(mut self, system_memory_size: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.system_memory_size = Some(system_memory_size);
    self
  }

  pub fn system_memory_size(&self) -> Option<&::models::DecimalWithUnits> {
    self.system_memory_size.as_ref()
  }

  pub fn reset_system_memory_size(&mut self) {
    self.system_memory_size = None;
  }

  pub fn set_system_memory_type(&mut self, system_memory_type: String) {
    self.system_memory_type = Some(system_memory_type);
  }

  pub fn with_system_memory_type(mut self, system_memory_type: String) -> AttributeSetListType {
    self.system_memory_type = Some(system_memory_type);
    self
  }

  pub fn system_memory_type(&self) -> Option<&String> {
    self.system_memory_type.as_ref()
  }

  pub fn reset_system_memory_type(&mut self) {
    self.system_memory_type = None;
  }

  pub fn set_theatrical_release_date(&mut self, theatrical_release_date: String) {
    self.theatrical_release_date = Some(theatrical_release_date);
  }

  pub fn with_theatrical_release_date(mut self, theatrical_release_date: String) -> AttributeSetListType {
    self.theatrical_release_date = Some(theatrical_release_date);
    self
  }

  pub fn theatrical_release_date(&self) -> Option<&String> {
    self.theatrical_release_date.as_ref()
  }

  pub fn reset_theatrical_release_date(&mut self) {
    self.theatrical_release_date = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> AttributeSetListType {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_total_diamond_weight(&mut self, total_diamond_weight: ::models::DecimalWithUnits) {
    self.total_diamond_weight = Some(total_diamond_weight);
  }

  pub fn with_total_diamond_weight(mut self, total_diamond_weight: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.total_diamond_weight = Some(total_diamond_weight);
    self
  }

  pub fn total_diamond_weight(&self) -> Option<&::models::DecimalWithUnits> {
    self.total_diamond_weight.as_ref()
  }

  pub fn reset_total_diamond_weight(&mut self) {
    self.total_diamond_weight = None;
  }

  pub fn set_total_gem_weight(&mut self, total_gem_weight: ::models::DecimalWithUnits) {
    self.total_gem_weight = Some(total_gem_weight);
  }

  pub fn with_total_gem_weight(mut self, total_gem_weight: ::models::DecimalWithUnits) -> AttributeSetListType {
    self.total_gem_weight = Some(total_gem_weight);
    self
  }

  pub fn total_gem_weight(&self) -> Option<&::models::DecimalWithUnits> {
    self.total_gem_weight.as_ref()
  }

  pub fn reset_total_gem_weight(&mut self) {
    self.total_gem_weight = None;
  }

  pub fn set_warranty(&mut self, warranty: String) {
    self.warranty = Some(warranty);
  }

  pub fn with_warranty(mut self, warranty: String) -> AttributeSetListType {
    self.warranty = Some(warranty);
    self
  }

  pub fn warranty(&self) -> Option<&String> {
    self.warranty.as_ref()
  }

  pub fn reset_warranty(&mut self) {
    self.warranty = None;
  }

  pub fn set_weee_tax_value(&mut self, weee_tax_value: ::models::Price) {
    self.weee_tax_value = Some(weee_tax_value);
  }

  pub fn with_weee_tax_value(mut self, weee_tax_value: ::models::Price) -> AttributeSetListType {
    self.weee_tax_value = Some(weee_tax_value);
    self
  }

  pub fn weee_tax_value(&self) -> Option<&::models::Price> {
    self.weee_tax_value.as_ref()
  }

  pub fn reset_weee_tax_value(&mut self) {
    self.weee_tax_value = None;
  }

}



