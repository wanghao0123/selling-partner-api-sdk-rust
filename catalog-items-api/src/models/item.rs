/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Item : An item in the Amazon catalog.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Item {
  /// The identifiers that uniquely identify the item.
  #[serde(rename = "Identifiers")]
  identifiers: ::models::IdentifierType,
  /// A list of attributes of the item.
  #[serde(rename = "AttributeSets")]
  attribute_sets: Option<::models::AttributeSetList>,
  /// A list of variation relationship information for the item.
  #[serde(rename = "Relationships")]
  relationships: Option<::models::RelationshipList>,
  /// A list of sales rank information for the item by category.
  #[serde(rename = "SalesRankings")]
  sales_rankings: Option<::models::SalesRankList>
}

impl Item {
  /// An item in the Amazon catalog.
  pub fn new(identifiers: ::models::IdentifierType) -> Item {
    Item {
      identifiers: identifiers,
      attribute_sets: None,
      relationships: None,
      sales_rankings: None
    }
  }

  pub fn set_identifiers(&mut self, identifiers: ::models::IdentifierType) {
    self.identifiers = identifiers;
  }

  pub fn with_identifiers(mut self, identifiers: ::models::IdentifierType) -> Item {
    self.identifiers = identifiers;
    self
  }

  pub fn identifiers(&self) -> &::models::IdentifierType {
    &self.identifiers
  }


  pub fn set_attribute_sets(&mut self, attribute_sets: ::models::AttributeSetList) {
    self.attribute_sets = Some(attribute_sets);
  }

  pub fn with_attribute_sets(mut self, attribute_sets: ::models::AttributeSetList) -> Item {
    self.attribute_sets = Some(attribute_sets);
    self
  }

  pub fn attribute_sets(&self) -> Option<&::models::AttributeSetList> {
    self.attribute_sets.as_ref()
  }

  pub fn reset_attribute_sets(&mut self) {
    self.attribute_sets = None;
  }

  pub fn set_relationships(&mut self, relationships: ::models::RelationshipList) {
    self.relationships = Some(relationships);
  }

  pub fn with_relationships(mut self, relationships: ::models::RelationshipList) -> Item {
    self.relationships = Some(relationships);
    self
  }

  pub fn relationships(&self) -> Option<&::models::RelationshipList> {
    self.relationships.as_ref()
  }

  pub fn reset_relationships(&mut self) {
    self.relationships = None;
  }

  pub fn set_sales_rankings(&mut self, sales_rankings: ::models::SalesRankList) {
    self.sales_rankings = Some(sales_rankings);
  }

  pub fn with_sales_rankings(mut self, sales_rankings: ::models::SalesRankList) -> Item {
    self.sales_rankings = Some(sales_rankings);
    self
  }

  pub fn sales_rankings(&self) -> Option<&::models::SalesRankList> {
    self.sales_rankings.as_ref()
  }

  pub fn reset_sales_rankings(&mut self) {
    self.sales_rankings = None;
  }

}



