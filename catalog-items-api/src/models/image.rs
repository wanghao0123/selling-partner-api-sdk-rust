/* 
 * Selling Partner API for Catalog Items
 *
 * The Selling Partner API for Catalog Items helps you programmatically retrieve item details for items in the catalog.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Image : The image attribute of the item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Image {
  /// The image URL attribute of the item.
  #[serde(rename = "URL")]
  URL: Option<String>,
  /// The image height attribute of the item.
  #[serde(rename = "Height")]
  height: Option<::models::DecimalWithUnits>,
  /// The image width attribute of the item.
  #[serde(rename = "Width")]
  width: Option<::models::DecimalWithUnits>
}

impl Image {
  /// The image attribute of the item.
  pub fn new() -> Image {
    Image {
      URL: None,
      height: None,
      width: None
    }
  }

  pub fn set_URL(&mut self, URL: String) {
    self.URL = Some(URL);
  }

  pub fn with_URL(mut self, URL: String) -> Image {
    self.URL = Some(URL);
    self
  }

  pub fn URL(&self) -> Option<&String> {
    self.URL.as_ref()
  }

  pub fn reset_URL(&mut self) {
    self.URL = None;
  }

  pub fn set_height(&mut self, height: ::models::DecimalWithUnits) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: ::models::DecimalWithUnits) -> Image {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&::models::DecimalWithUnits> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_width(&mut self, width: ::models::DecimalWithUnits) {
    self.width = Some(width);
  }

  pub fn with_width(mut self, width: ::models::DecimalWithUnits) -> Image {
    self.width = Some(width);
    self
  }

  pub fn width(&self) -> Option<&::models::DecimalWithUnits> {
    self.width.as_ref()
  }

  pub fn reset_width(&mut self) {
    self.width = None;
  }

}



