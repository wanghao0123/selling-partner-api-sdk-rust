/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreateInboundShipmentPlanRequest : The request schema for the createInboundShipmentPlan operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateInboundShipmentPlanRequest {
  /// The address from which the inbound shipment will be sent.
  #[serde(rename = "ShipFromAddress")]
  ship_from_address: ::models::Address,
  /// The seller's preference for label preparation for an inbound shipment.
  #[serde(rename = "LabelPrepPreference")]
  label_prep_preference: ::models::LabelPrepPreference,
  /// The two-character country code for the country where the inbound shipment is to be sent.  Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.   Values:   ShipToCountryCode values for North America:  * CA – Canada  * MX - Mexico  * US - United States  ShipToCountryCode values for MCI sellers in Europe:  * DE – Germany  * ES – Spain  * FR – France  * GB – United Kingdom  * IT – Italy  Default: The country code for the seller's home marketplace.
  #[serde(rename = "ShipToCountryCode")]
  ship_to_country_code: Option<String>,
  /// The two-character country code, followed by a dash and then up to three characters that represent the subdivision of the country where the inbound shipment is to be sent. For example, \"IN-MH\". In full ISO 3166-2 format.  Note: Not required. Specifying both ShipToCountryCode and ShipToCountrySubdivisionCode returns an error.
  #[serde(rename = "ShipToCountrySubdivisionCode")]
  ship_to_country_subdivision_code: Option<String>,
  #[serde(rename = "InboundShipmentPlanRequestItems")]
  inbound_shipment_plan_request_items: ::models::InboundShipmentPlanRequestItemList
}

impl CreateInboundShipmentPlanRequest {
  /// The request schema for the createInboundShipmentPlan operation.
  pub fn new(ship_from_address: ::models::Address, label_prep_preference: ::models::LabelPrepPreference, inbound_shipment_plan_request_items: ::models::InboundShipmentPlanRequestItemList) -> CreateInboundShipmentPlanRequest {
    CreateInboundShipmentPlanRequest {
      ship_from_address: ship_from_address,
      label_prep_preference: label_prep_preference,
      ship_to_country_code: None,
      ship_to_country_subdivision_code: None,
      inbound_shipment_plan_request_items: inbound_shipment_plan_request_items
    }
  }

  pub fn set_ship_from_address(&mut self, ship_from_address: ::models::Address) {
    self.ship_from_address = ship_from_address;
  }

  pub fn with_ship_from_address(mut self, ship_from_address: ::models::Address) -> CreateInboundShipmentPlanRequest {
    self.ship_from_address = ship_from_address;
    self
  }

  pub fn ship_from_address(&self) -> &::models::Address {
    &self.ship_from_address
  }


  pub fn set_label_prep_preference(&mut self, label_prep_preference: ::models::LabelPrepPreference) {
    self.label_prep_preference = label_prep_preference;
  }

  pub fn with_label_prep_preference(mut self, label_prep_preference: ::models::LabelPrepPreference) -> CreateInboundShipmentPlanRequest {
    self.label_prep_preference = label_prep_preference;
    self
  }

  pub fn label_prep_preference(&self) -> &::models::LabelPrepPreference {
    &self.label_prep_preference
  }


  pub fn set_ship_to_country_code(&mut self, ship_to_country_code: String) {
    self.ship_to_country_code = Some(ship_to_country_code);
  }

  pub fn with_ship_to_country_code(mut self, ship_to_country_code: String) -> CreateInboundShipmentPlanRequest {
    self.ship_to_country_code = Some(ship_to_country_code);
    self
  }

  pub fn ship_to_country_code(&self) -> Option<&String> {
    self.ship_to_country_code.as_ref()
  }

  pub fn reset_ship_to_country_code(&mut self) {
    self.ship_to_country_code = None;
  }

  pub fn set_ship_to_country_subdivision_code(&mut self, ship_to_country_subdivision_code: String) {
    self.ship_to_country_subdivision_code = Some(ship_to_country_subdivision_code);
  }

  pub fn with_ship_to_country_subdivision_code(mut self, ship_to_country_subdivision_code: String) -> CreateInboundShipmentPlanRequest {
    self.ship_to_country_subdivision_code = Some(ship_to_country_subdivision_code);
    self
  }

  pub fn ship_to_country_subdivision_code(&self) -> Option<&String> {
    self.ship_to_country_subdivision_code.as_ref()
  }

  pub fn reset_ship_to_country_subdivision_code(&mut self) {
    self.ship_to_country_subdivision_code = None;
  }

  pub fn set_inbound_shipment_plan_request_items(&mut self, inbound_shipment_plan_request_items: ::models::InboundShipmentPlanRequestItemList) {
    self.inbound_shipment_plan_request_items = inbound_shipment_plan_request_items;
  }

  pub fn with_inbound_shipment_plan_request_items(mut self, inbound_shipment_plan_request_items: ::models::InboundShipmentPlanRequestItemList) -> CreateInboundShipmentPlanRequest {
    self.inbound_shipment_plan_request_items = inbound_shipment_plan_request_items;
    self
  }

  pub fn inbound_shipment_plan_request_items(&self) -> &::models::InboundShipmentPlanRequestItemList {
    &self.inbound_shipment_plan_request_items
  }


}



