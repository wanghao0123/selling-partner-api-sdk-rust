/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SkuPrepInstructions : Labeling requirements and item preparation instructions to help you prepare items for shipment to Amazon's fulfillment network.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SkuPrepInstructions {
  /// The seller SKU of the item.
  #[serde(rename = "SellerSKU")]
  seller_sku: Option<String>,
  /// The Amazon Standard Identification Number (ASIN) of the item.
  #[serde(rename = "ASIN")]
  ASIN: Option<String>,
  #[serde(rename = "BarcodeInstruction")]
  barcode_instruction: Option<::models::BarcodeInstruction>,
  #[serde(rename = "PrepGuidance")]
  prep_guidance: Option<::models::PrepGuidance>,
  #[serde(rename = "PrepInstructionList")]
  prep_instruction_list: Option<::models::PrepInstructionList>,
  #[serde(rename = "AmazonPrepFeesDetailsList")]
  amazon_prep_fees_details_list: Option<::models::AmazonPrepFeesDetailsList>
}

impl SkuPrepInstructions {
  /// Labeling requirements and item preparation instructions to help you prepare items for shipment to Amazon's fulfillment network.
  pub fn new() -> SkuPrepInstructions {
    SkuPrepInstructions {
      seller_sku: None,
      ASIN: None,
      barcode_instruction: None,
      prep_guidance: None,
      prep_instruction_list: None,
      amazon_prep_fees_details_list: None
    }
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = Some(seller_sku);
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> SkuPrepInstructions {
    self.seller_sku = Some(seller_sku);
    self
  }

  pub fn seller_sku(&self) -> Option<&String> {
    self.seller_sku.as_ref()
  }

  pub fn reset_seller_sku(&mut self) {
    self.seller_sku = None;
  }

  pub fn set_ASIN(&mut self, ASIN: String) {
    self.ASIN = Some(ASIN);
  }

  pub fn with_ASIN(mut self, ASIN: String) -> SkuPrepInstructions {
    self.ASIN = Some(ASIN);
    self
  }

  pub fn ASIN(&self) -> Option<&String> {
    self.ASIN.as_ref()
  }

  pub fn reset_ASIN(&mut self) {
    self.ASIN = None;
  }

  pub fn set_barcode_instruction(&mut self, barcode_instruction: ::models::BarcodeInstruction) {
    self.barcode_instruction = Some(barcode_instruction);
  }

  pub fn with_barcode_instruction(mut self, barcode_instruction: ::models::BarcodeInstruction) -> SkuPrepInstructions {
    self.barcode_instruction = Some(barcode_instruction);
    self
  }

  pub fn barcode_instruction(&self) -> Option<&::models::BarcodeInstruction> {
    self.barcode_instruction.as_ref()
  }

  pub fn reset_barcode_instruction(&mut self) {
    self.barcode_instruction = None;
  }

  pub fn set_prep_guidance(&mut self, prep_guidance: ::models::PrepGuidance) {
    self.prep_guidance = Some(prep_guidance);
  }

  pub fn with_prep_guidance(mut self, prep_guidance: ::models::PrepGuidance) -> SkuPrepInstructions {
    self.prep_guidance = Some(prep_guidance);
    self
  }

  pub fn prep_guidance(&self) -> Option<&::models::PrepGuidance> {
    self.prep_guidance.as_ref()
  }

  pub fn reset_prep_guidance(&mut self) {
    self.prep_guidance = None;
  }

  pub fn set_prep_instruction_list(&mut self, prep_instruction_list: ::models::PrepInstructionList) {
    self.prep_instruction_list = Some(prep_instruction_list);
  }

  pub fn with_prep_instruction_list(mut self, prep_instruction_list: ::models::PrepInstructionList) -> SkuPrepInstructions {
    self.prep_instruction_list = Some(prep_instruction_list);
    self
  }

  pub fn prep_instruction_list(&self) -> Option<&::models::PrepInstructionList> {
    self.prep_instruction_list.as_ref()
  }

  pub fn reset_prep_instruction_list(&mut self) {
    self.prep_instruction_list = None;
  }

  pub fn set_amazon_prep_fees_details_list(&mut self, amazon_prep_fees_details_list: ::models::AmazonPrepFeesDetailsList) {
    self.amazon_prep_fees_details_list = Some(amazon_prep_fees_details_list);
  }

  pub fn with_amazon_prep_fees_details_list(mut self, amazon_prep_fees_details_list: ::models::AmazonPrepFeesDetailsList) -> SkuPrepInstructions {
    self.amazon_prep_fees_details_list = Some(amazon_prep_fees_details_list);
    self
  }

  pub fn amazon_prep_fees_details_list(&self) -> Option<&::models::AmazonPrepFeesDetailsList> {
    self.amazon_prep_fees_details_list.as_ref()
  }

  pub fn reset_amazon_prep_fees_details_list(&mut self) {
    self.amazon_prep_fees_details_list = None;
  }

}



