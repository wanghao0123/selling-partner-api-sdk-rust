/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Pallet : Pallet information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Pallet {
  /// The dimensions of the pallet. Length and width must be 40 inches by 48 inches. Height must be less than or equal to 60 inches.
  #[serde(rename = "Dimensions")]
  dimensions: ::models::Dimensions,
  /// The weight of the pallet.
  #[serde(rename = "Weight")]
  weight: Option<::models::Weight>,
  /// Indicates whether pallets will be stacked when carrier arrives for pick-up.
  #[serde(rename = "IsStacked")]
  is_stacked: bool
}

impl Pallet {
  /// Pallet information.
  pub fn new(dimensions: ::models::Dimensions, is_stacked: bool) -> Pallet {
    Pallet {
      dimensions: dimensions,
      weight: None,
      is_stacked: is_stacked
    }
  }

  pub fn set_dimensions(&mut self, dimensions: ::models::Dimensions) {
    self.dimensions = dimensions;
  }

  pub fn with_dimensions(mut self, dimensions: ::models::Dimensions) -> Pallet {
    self.dimensions = dimensions;
    self
  }

  pub fn dimensions(&self) -> &::models::Dimensions {
    &self.dimensions
  }


  pub fn set_weight(&mut self, weight: ::models::Weight) {
    self.weight = Some(weight);
  }

  pub fn with_weight(mut self, weight: ::models::Weight) -> Pallet {
    self.weight = Some(weight);
    self
  }

  pub fn weight(&self) -> Option<&::models::Weight> {
    self.weight.as_ref()
  }

  pub fn reset_weight(&mut self) {
    self.weight = None;
  }

  pub fn set_is_stacked(&mut self, is_stacked: bool) {
    self.is_stacked = is_stacked;
  }

  pub fn with_is_stacked(mut self, is_stacked: bool) -> Pallet {
    self.is_stacked = is_stacked;
    self
  }

  pub fn is_stacked(&self) -> &bool {
    &self.is_stacked
  }


}



