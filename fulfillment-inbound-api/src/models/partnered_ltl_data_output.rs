/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PartneredLtlDataOutput : Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by an Amazon-partnered carrier.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartneredLtlDataOutput {
  /// Contact information for the person in the seller's organization who is responsible for the shipment. Used by the carrier if they have questions about the shipment.
  #[serde(rename = "Contact")]
  contact: ::models::Contact,
  /// The number of boxes in the shipment.
  #[serde(rename = "BoxCount")]
  box_count: ::models::UnsignedIntType,
  #[serde(rename = "SellerFreightClass")]
  seller_freight_class: Option<::models::SellerFreightClass>,
  /// The date that the shipment will be ready to be picked up by the carrier. Must be in YYYY-MM-DD format.
  #[serde(rename = "FreightReadyDate")]
  freight_ready_date: ::models::DateStringType,
  #[serde(rename = "PalletList")]
  pallet_list: ::models::PalletList,
  /// The total weight of the shipment.
  #[serde(rename = "TotalWeight")]
  total_weight: ::models::Weight,
  /// Your declaration of the total value of the inventory in the shipment.
  #[serde(rename = "SellerDeclaredValue")]
  seller_declared_value: Option<::models::Amount>,
  /// Estimate by Amazon of the total value of the inventory in the shipment.
  #[serde(rename = "AmazonCalculatedValue")]
  amazon_calculated_value: Option<::models::Amount>,
  /// The estimated date that the shipment will be picked up by the carrier, in YYYY-MM-DD format.
  #[serde(rename = "PreviewPickupDate")]
  preview_pickup_date: ::models::DateStringType,
  /// The estimated date that the shipment will be delivered to an Amazon fulfillment center, in YYYY-MM-DD format.
  #[serde(rename = "PreviewDeliveryDate")]
  preview_delivery_date: ::models::DateStringType,
  /// The freight class of the shipment as estimated by Amazon if you did not include a freight class when you called the putTransportDetails operation.
  #[serde(rename = "PreviewFreightClass")]
  preview_freight_class: ::models::SellerFreightClass,
  /// A unique identifier created by Amazon that identifies this Amazon-partnered, Less Than Truckload/Full Truckload (LTL/FTL) shipment.
  #[serde(rename = "AmazonReferenceId")]
  amazon_reference_id: String,
  /// Indicates whether the bill of lading for the shipment is available.
  #[serde(rename = "IsBillOfLadingAvailable")]
  is_bill_of_lading_available: bool,
  /// The estimated shipping cost using an Amazon-partnered carrier.
  #[serde(rename = "PartneredEstimate")]
  partnered_estimate: Option<::models::PartneredEstimate>,
  /// The carrier for the inbound shipment.
  #[serde(rename = "CarrierName")]
  carrier_name: String
}

impl PartneredLtlDataOutput {
  /// Information returned by Amazon about a Less Than Truckload/Full Truckload (LTL/FTL) shipment by an Amazon-partnered carrier.
  pub fn new(contact: ::models::Contact, box_count: ::models::UnsignedIntType, freight_ready_date: ::models::DateStringType, pallet_list: ::models::PalletList, total_weight: ::models::Weight, preview_pickup_date: ::models::DateStringType, preview_delivery_date: ::models::DateStringType, preview_freight_class: ::models::SellerFreightClass, amazon_reference_id: String, is_bill_of_lading_available: bool, carrier_name: String) -> PartneredLtlDataOutput {
    PartneredLtlDataOutput {
      contact: contact,
      box_count: box_count,
      seller_freight_class: None,
      freight_ready_date: freight_ready_date,
      pallet_list: pallet_list,
      total_weight: total_weight,
      seller_declared_value: None,
      amazon_calculated_value: None,
      preview_pickup_date: preview_pickup_date,
      preview_delivery_date: preview_delivery_date,
      preview_freight_class: preview_freight_class,
      amazon_reference_id: amazon_reference_id,
      is_bill_of_lading_available: is_bill_of_lading_available,
      partnered_estimate: None,
      carrier_name: carrier_name
    }
  }

  pub fn set_contact(&mut self, contact: ::models::Contact) {
    self.contact = contact;
  }

  pub fn with_contact(mut self, contact: ::models::Contact) -> PartneredLtlDataOutput {
    self.contact = contact;
    self
  }

  pub fn contact(&self) -> &::models::Contact {
    &self.contact
  }


  pub fn set_box_count(&mut self, box_count: ::models::UnsignedIntType) {
    self.box_count = box_count;
  }

  pub fn with_box_count(mut self, box_count: ::models::UnsignedIntType) -> PartneredLtlDataOutput {
    self.box_count = box_count;
    self
  }

  pub fn box_count(&self) -> &::models::UnsignedIntType {
    &self.box_count
  }


  pub fn set_seller_freight_class(&mut self, seller_freight_class: ::models::SellerFreightClass) {
    self.seller_freight_class = Some(seller_freight_class);
  }

  pub fn with_seller_freight_class(mut self, seller_freight_class: ::models::SellerFreightClass) -> PartneredLtlDataOutput {
    self.seller_freight_class = Some(seller_freight_class);
    self
  }

  pub fn seller_freight_class(&self) -> Option<&::models::SellerFreightClass> {
    self.seller_freight_class.as_ref()
  }

  pub fn reset_seller_freight_class(&mut self) {
    self.seller_freight_class = None;
  }

  pub fn set_freight_ready_date(&mut self, freight_ready_date: ::models::DateStringType) {
    self.freight_ready_date = freight_ready_date;
  }

  pub fn with_freight_ready_date(mut self, freight_ready_date: ::models::DateStringType) -> PartneredLtlDataOutput {
    self.freight_ready_date = freight_ready_date;
    self
  }

  pub fn freight_ready_date(&self) -> &::models::DateStringType {
    &self.freight_ready_date
  }


  pub fn set_pallet_list(&mut self, pallet_list: ::models::PalletList) {
    self.pallet_list = pallet_list;
  }

  pub fn with_pallet_list(mut self, pallet_list: ::models::PalletList) -> PartneredLtlDataOutput {
    self.pallet_list = pallet_list;
    self
  }

  pub fn pallet_list(&self) -> &::models::PalletList {
    &self.pallet_list
  }


  pub fn set_total_weight(&mut self, total_weight: ::models::Weight) {
    self.total_weight = total_weight;
  }

  pub fn with_total_weight(mut self, total_weight: ::models::Weight) -> PartneredLtlDataOutput {
    self.total_weight = total_weight;
    self
  }

  pub fn total_weight(&self) -> &::models::Weight {
    &self.total_weight
  }


  pub fn set_seller_declared_value(&mut self, seller_declared_value: ::models::Amount) {
    self.seller_declared_value = Some(seller_declared_value);
  }

  pub fn with_seller_declared_value(mut self, seller_declared_value: ::models::Amount) -> PartneredLtlDataOutput {
    self.seller_declared_value = Some(seller_declared_value);
    self
  }

  pub fn seller_declared_value(&self) -> Option<&::models::Amount> {
    self.seller_declared_value.as_ref()
  }

  pub fn reset_seller_declared_value(&mut self) {
    self.seller_declared_value = None;
  }

  pub fn set_amazon_calculated_value(&mut self, amazon_calculated_value: ::models::Amount) {
    self.amazon_calculated_value = Some(amazon_calculated_value);
  }

  pub fn with_amazon_calculated_value(mut self, amazon_calculated_value: ::models::Amount) -> PartneredLtlDataOutput {
    self.amazon_calculated_value = Some(amazon_calculated_value);
    self
  }

  pub fn amazon_calculated_value(&self) -> Option<&::models::Amount> {
    self.amazon_calculated_value.as_ref()
  }

  pub fn reset_amazon_calculated_value(&mut self) {
    self.amazon_calculated_value = None;
  }

  pub fn set_preview_pickup_date(&mut self, preview_pickup_date: ::models::DateStringType) {
    self.preview_pickup_date = preview_pickup_date;
  }

  pub fn with_preview_pickup_date(mut self, preview_pickup_date: ::models::DateStringType) -> PartneredLtlDataOutput {
    self.preview_pickup_date = preview_pickup_date;
    self
  }

  pub fn preview_pickup_date(&self) -> &::models::DateStringType {
    &self.preview_pickup_date
  }


  pub fn set_preview_delivery_date(&mut self, preview_delivery_date: ::models::DateStringType) {
    self.preview_delivery_date = preview_delivery_date;
  }

  pub fn with_preview_delivery_date(mut self, preview_delivery_date: ::models::DateStringType) -> PartneredLtlDataOutput {
    self.preview_delivery_date = preview_delivery_date;
    self
  }

  pub fn preview_delivery_date(&self) -> &::models::DateStringType {
    &self.preview_delivery_date
  }


  pub fn set_preview_freight_class(&mut self, preview_freight_class: ::models::SellerFreightClass) {
    self.preview_freight_class = preview_freight_class;
  }

  pub fn with_preview_freight_class(mut self, preview_freight_class: ::models::SellerFreightClass) -> PartneredLtlDataOutput {
    self.preview_freight_class = preview_freight_class;
    self
  }

  pub fn preview_freight_class(&self) -> &::models::SellerFreightClass {
    &self.preview_freight_class
  }


  pub fn set_amazon_reference_id(&mut self, amazon_reference_id: String) {
    self.amazon_reference_id = amazon_reference_id;
  }

  pub fn with_amazon_reference_id(mut self, amazon_reference_id: String) -> PartneredLtlDataOutput {
    self.amazon_reference_id = amazon_reference_id;
    self
  }

  pub fn amazon_reference_id(&self) -> &String {
    &self.amazon_reference_id
  }


  pub fn set_is_bill_of_lading_available(&mut self, is_bill_of_lading_available: bool) {
    self.is_bill_of_lading_available = is_bill_of_lading_available;
  }

  pub fn with_is_bill_of_lading_available(mut self, is_bill_of_lading_available: bool) -> PartneredLtlDataOutput {
    self.is_bill_of_lading_available = is_bill_of_lading_available;
    self
  }

  pub fn is_bill_of_lading_available(&self) -> &bool {
    &self.is_bill_of_lading_available
  }


  pub fn set_partnered_estimate(&mut self, partnered_estimate: ::models::PartneredEstimate) {
    self.partnered_estimate = Some(partnered_estimate);
  }

  pub fn with_partnered_estimate(mut self, partnered_estimate: ::models::PartneredEstimate) -> PartneredLtlDataOutput {
    self.partnered_estimate = Some(partnered_estimate);
    self
  }

  pub fn partnered_estimate(&self) -> Option<&::models::PartneredEstimate> {
    self.partnered_estimate.as_ref()
  }

  pub fn reset_partnered_estimate(&mut self) {
    self.partnered_estimate = None;
  }

  pub fn set_carrier_name(&mut self, carrier_name: String) {
    self.carrier_name = carrier_name;
  }

  pub fn with_carrier_name(mut self, carrier_name: String) -> PartneredLtlDataOutput {
    self.carrier_name = carrier_name;
    self
  }

  pub fn carrier_name(&self) -> &String {
    &self.carrier_name
  }


}



