/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetPrepInstructionsResult {
  #[serde(rename = "SKUPrepInstructionsList")]
  sku_prep_instructions_list: Option<::models::SkuPrepInstructionsList>,
  #[serde(rename = "InvalidSKUList")]
  invalid_sku_list: Option<::models::InvalidSkuList>,
  #[serde(rename = "ASINPrepInstructionsList")]
  asin_prep_instructions_list: Option<::models::AsinPrepInstructionsList>,
  #[serde(rename = "InvalidASINList")]
  invalid_asin_list: Option<::models::InvalidAsinList>
}

impl GetPrepInstructionsResult {
  pub fn new() -> GetPrepInstructionsResult {
    GetPrepInstructionsResult {
      sku_prep_instructions_list: None,
      invalid_sku_list: None,
      asin_prep_instructions_list: None,
      invalid_asin_list: None
    }
  }

  pub fn set_sku_prep_instructions_list(&mut self, sku_prep_instructions_list: ::models::SkuPrepInstructionsList) {
    self.sku_prep_instructions_list = Some(sku_prep_instructions_list);
  }

  pub fn with_sku_prep_instructions_list(mut self, sku_prep_instructions_list: ::models::SkuPrepInstructionsList) -> GetPrepInstructionsResult {
    self.sku_prep_instructions_list = Some(sku_prep_instructions_list);
    self
  }

  pub fn sku_prep_instructions_list(&self) -> Option<&::models::SkuPrepInstructionsList> {
    self.sku_prep_instructions_list.as_ref()
  }

  pub fn reset_sku_prep_instructions_list(&mut self) {
    self.sku_prep_instructions_list = None;
  }

  pub fn set_invalid_sku_list(&mut self, invalid_sku_list: ::models::InvalidSkuList) {
    self.invalid_sku_list = Some(invalid_sku_list);
  }

  pub fn with_invalid_sku_list(mut self, invalid_sku_list: ::models::InvalidSkuList) -> GetPrepInstructionsResult {
    self.invalid_sku_list = Some(invalid_sku_list);
    self
  }

  pub fn invalid_sku_list(&self) -> Option<&::models::InvalidSkuList> {
    self.invalid_sku_list.as_ref()
  }

  pub fn reset_invalid_sku_list(&mut self) {
    self.invalid_sku_list = None;
  }

  pub fn set_asin_prep_instructions_list(&mut self, asin_prep_instructions_list: ::models::AsinPrepInstructionsList) {
    self.asin_prep_instructions_list = Some(asin_prep_instructions_list);
  }

  pub fn with_asin_prep_instructions_list(mut self, asin_prep_instructions_list: ::models::AsinPrepInstructionsList) -> GetPrepInstructionsResult {
    self.asin_prep_instructions_list = Some(asin_prep_instructions_list);
    self
  }

  pub fn asin_prep_instructions_list(&self) -> Option<&::models::AsinPrepInstructionsList> {
    self.asin_prep_instructions_list.as_ref()
  }

  pub fn reset_asin_prep_instructions_list(&mut self) {
    self.asin_prep_instructions_list = None;
  }

  pub fn set_invalid_asin_list(&mut self, invalid_asin_list: ::models::InvalidAsinList) {
    self.invalid_asin_list = Some(invalid_asin_list);
  }

  pub fn with_invalid_asin_list(mut self, invalid_asin_list: ::models::InvalidAsinList) -> GetPrepInstructionsResult {
    self.invalid_asin_list = Some(invalid_asin_list);
    self
  }

  pub fn invalid_asin_list(&self) -> Option<&::models::InvalidAsinList> {
    self.invalid_asin_list.as_ref()
  }

  pub fn reset_invalid_asin_list(&mut self) {
    self.invalid_asin_list = None;
  }

}



