/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ConfirmPreorderResult {
  /// Date passed in with the NeedByDate parameter. The confirmed shipment must arrive at the Amazon fulfillment center by this date to avoid delivery promise breaks for pre-ordered items. In YYYY-MM-DD format.
  #[serde(rename = "ConfirmedNeedByDate")]
  confirmed_need_by_date: Option<::models::DateStringType>,
  /// Date that determines which pre-order items in the shipment are eligible for pre-order. The pre-order Buy Box will appear for any pre-order item in the shipment with a release date on or after this date. In YYYY-MM-DD format.
  #[serde(rename = "ConfirmedFulfillableDate")]
  confirmed_fulfillable_date: Option<::models::DateStringType>
}

impl ConfirmPreorderResult {
  pub fn new() -> ConfirmPreorderResult {
    ConfirmPreorderResult {
      confirmed_need_by_date: None,
      confirmed_fulfillable_date: None
    }
  }

  pub fn set_confirmed_need_by_date(&mut self, confirmed_need_by_date: ::models::DateStringType) {
    self.confirmed_need_by_date = Some(confirmed_need_by_date);
  }

  pub fn with_confirmed_need_by_date(mut self, confirmed_need_by_date: ::models::DateStringType) -> ConfirmPreorderResult {
    self.confirmed_need_by_date = Some(confirmed_need_by_date);
    self
  }

  pub fn confirmed_need_by_date(&self) -> Option<&::models::DateStringType> {
    self.confirmed_need_by_date.as_ref()
  }

  pub fn reset_confirmed_need_by_date(&mut self) {
    self.confirmed_need_by_date = None;
  }

  pub fn set_confirmed_fulfillable_date(&mut self, confirmed_fulfillable_date: ::models::DateStringType) {
    self.confirmed_fulfillable_date = Some(confirmed_fulfillable_date);
  }

  pub fn with_confirmed_fulfillable_date(mut self, confirmed_fulfillable_date: ::models::DateStringType) -> ConfirmPreorderResult {
    self.confirmed_fulfillable_date = Some(confirmed_fulfillable_date);
    self
  }

  pub fn confirmed_fulfillable_date(&self) -> Option<&::models::DateStringType> {
    self.confirmed_fulfillable_date.as_ref()
  }

  pub fn reset_confirmed_fulfillable_date(&mut self) {
    self.confirmed_fulfillable_date = None;
  }

}



