/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SkuInboundGuidance : Reasons why a given seller SKU is not recommended for shipment to Amazon's fulfillment network.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SkuInboundGuidance {
  /// The seller SKU of the item.
  #[serde(rename = "SellerSKU")]
  seller_sku: String,
  /// The Amazon Standard Identification Number (ASIN) of the item.
  #[serde(rename = "ASIN")]
  ASIN: String,
  /// Specific inbound guidance for an item.
  #[serde(rename = "InboundGuidance")]
  inbound_guidance: ::models::InboundGuidance,
  /// A list of reasons for the current inbound guidance for this item.
  #[serde(rename = "GuidanceReasonList")]
  guidance_reason_list: Option<::models::GuidanceReasonList>
}

impl SkuInboundGuidance {
  /// Reasons why a given seller SKU is not recommended for shipment to Amazon's fulfillment network.
  pub fn new(seller_sku: String, ASIN: String, inbound_guidance: ::models::InboundGuidance) -> SkuInboundGuidance {
    SkuInboundGuidance {
      seller_sku: seller_sku,
      ASIN: ASIN,
      inbound_guidance: inbound_guidance,
      guidance_reason_list: None
    }
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = seller_sku;
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> SkuInboundGuidance {
    self.seller_sku = seller_sku;
    self
  }

  pub fn seller_sku(&self) -> &String {
    &self.seller_sku
  }


  pub fn set_ASIN(&mut self, ASIN: String) {
    self.ASIN = ASIN;
  }

  pub fn with_ASIN(mut self, ASIN: String) -> SkuInboundGuidance {
    self.ASIN = ASIN;
    self
  }

  pub fn ASIN(&self) -> &String {
    &self.ASIN
  }


  pub fn set_inbound_guidance(&mut self, inbound_guidance: ::models::InboundGuidance) {
    self.inbound_guidance = inbound_guidance;
  }

  pub fn with_inbound_guidance(mut self, inbound_guidance: ::models::InboundGuidance) -> SkuInboundGuidance {
    self.inbound_guidance = inbound_guidance;
    self
  }

  pub fn inbound_guidance(&self) -> &::models::InboundGuidance {
    &self.inbound_guidance
  }


  pub fn set_guidance_reason_list(&mut self, guidance_reason_list: ::models::GuidanceReasonList) {
    self.guidance_reason_list = Some(guidance_reason_list);
  }

  pub fn with_guidance_reason_list(mut self, guidance_reason_list: ::models::GuidanceReasonList) -> SkuInboundGuidance {
    self.guidance_reason_list = Some(guidance_reason_list);
    self
  }

  pub fn guidance_reason_list(&self) -> Option<&::models::GuidanceReasonList> {
    self.guidance_reason_list.as_ref()
  }

  pub fn reset_guidance_reason_list(&mut self) {
    self.guidance_reason_list = None;
  }

}



