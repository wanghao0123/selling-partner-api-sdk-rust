/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PartneredLtlDataInput : Information that is required by an Amazon-partnered carrier to ship a Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartneredLtlDataInput {
  /// Contact information for the person in the seller's organization who is responsible for the shipment. Used by the carrier if they have questions about the shipment.
  #[serde(rename = "Contact")]
  contact: Option<::models::Contact>,
  /// The number of boxes in the shipment.
  #[serde(rename = "BoxCount")]
  box_count: Option<::models::UnsignedIntType>,
  #[serde(rename = "SellerFreightClass")]
  seller_freight_class: Option<::models::SellerFreightClass>,
  /// The date that the shipment will be ready to be picked up by the carrier.
  #[serde(rename = "FreightReadyDate")]
  freight_ready_date: Option<::models::DateStringType>,
  #[serde(rename = "PalletList")]
  pallet_list: Option<::models::PalletList>,
  /// The total weight of the shipment.
  #[serde(rename = "TotalWeight")]
  total_weight: Option<::models::Weight>,
  /// The declaration of the total value of the inventory in the shipment.
  #[serde(rename = "SellerDeclaredValue")]
  seller_declared_value: Option<::models::Amount>
}

impl PartneredLtlDataInput {
  /// Information that is required by an Amazon-partnered carrier to ship a Less Than Truckload/Full Truckload (LTL/FTL) inbound shipment.
  pub fn new() -> PartneredLtlDataInput {
    PartneredLtlDataInput {
      contact: None,
      box_count: None,
      seller_freight_class: None,
      freight_ready_date: None,
      pallet_list: None,
      total_weight: None,
      seller_declared_value: None
    }
  }

  pub fn set_contact(&mut self, contact: ::models::Contact) {
    self.contact = Some(contact);
  }

  pub fn with_contact(mut self, contact: ::models::Contact) -> PartneredLtlDataInput {
    self.contact = Some(contact);
    self
  }

  pub fn contact(&self) -> Option<&::models::Contact> {
    self.contact.as_ref()
  }

  pub fn reset_contact(&mut self) {
    self.contact = None;
  }

  pub fn set_box_count(&mut self, box_count: ::models::UnsignedIntType) {
    self.box_count = Some(box_count);
  }

  pub fn with_box_count(mut self, box_count: ::models::UnsignedIntType) -> PartneredLtlDataInput {
    self.box_count = Some(box_count);
    self
  }

  pub fn box_count(&self) -> Option<&::models::UnsignedIntType> {
    self.box_count.as_ref()
  }

  pub fn reset_box_count(&mut self) {
    self.box_count = None;
  }

  pub fn set_seller_freight_class(&mut self, seller_freight_class: ::models::SellerFreightClass) {
    self.seller_freight_class = Some(seller_freight_class);
  }

  pub fn with_seller_freight_class(mut self, seller_freight_class: ::models::SellerFreightClass) -> PartneredLtlDataInput {
    self.seller_freight_class = Some(seller_freight_class);
    self
  }

  pub fn seller_freight_class(&self) -> Option<&::models::SellerFreightClass> {
    self.seller_freight_class.as_ref()
  }

  pub fn reset_seller_freight_class(&mut self) {
    self.seller_freight_class = None;
  }

  pub fn set_freight_ready_date(&mut self, freight_ready_date: ::models::DateStringType) {
    self.freight_ready_date = Some(freight_ready_date);
  }

  pub fn with_freight_ready_date(mut self, freight_ready_date: ::models::DateStringType) -> PartneredLtlDataInput {
    self.freight_ready_date = Some(freight_ready_date);
    self
  }

  pub fn freight_ready_date(&self) -> Option<&::models::DateStringType> {
    self.freight_ready_date.as_ref()
  }

  pub fn reset_freight_ready_date(&mut self) {
    self.freight_ready_date = None;
  }

  pub fn set_pallet_list(&mut self, pallet_list: ::models::PalletList) {
    self.pallet_list = Some(pallet_list);
  }

  pub fn with_pallet_list(mut self, pallet_list: ::models::PalletList) -> PartneredLtlDataInput {
    self.pallet_list = Some(pallet_list);
    self
  }

  pub fn pallet_list(&self) -> Option<&::models::PalletList> {
    self.pallet_list.as_ref()
  }

  pub fn reset_pallet_list(&mut self) {
    self.pallet_list = None;
  }

  pub fn set_total_weight(&mut self, total_weight: ::models::Weight) {
    self.total_weight = Some(total_weight);
  }

  pub fn with_total_weight(mut self, total_weight: ::models::Weight) -> PartneredLtlDataInput {
    self.total_weight = Some(total_weight);
    self
  }

  pub fn total_weight(&self) -> Option<&::models::Weight> {
    self.total_weight.as_ref()
  }

  pub fn reset_total_weight(&mut self) {
    self.total_weight = None;
  }

  pub fn set_seller_declared_value(&mut self, seller_declared_value: ::models::Amount) {
    self.seller_declared_value = Some(seller_declared_value);
  }

  pub fn with_seller_declared_value(mut self, seller_declared_value: ::models::Amount) -> PartneredLtlDataInput {
    self.seller_declared_value = Some(seller_declared_value);
    self
  }

  pub fn seller_declared_value(&self) -> Option<&::models::Amount> {
    self.seller_declared_value.as_ref()
  }

  pub fn reset_seller_declared_value(&mut self) {
    self.seller_declared_value = None;
  }

}



