/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// InboundShipmentItem : Item information for an inbound shipment. Submitted with a call to the createInboundShipment or updateInboundShipment operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InboundShipmentItem {
  /// A shipment identifier originally returned by the createInboundShipmentPlan operation.
  #[serde(rename = "ShipmentId")]
  shipment_id: Option<String>,
  /// The seller SKU of the item.
  #[serde(rename = "SellerSKU")]
  seller_sku: String,
  /// Amazon's fulfillment network SKU of the item.
  #[serde(rename = "FulfillmentNetworkSKU")]
  fulfillment_network_sku: Option<String>,
  /// The item quantity that you are shipping.
  #[serde(rename = "QuantityShipped")]
  quantity_shipped: ::models::Quantity,
  /// The item quantity that has been received at an Amazon fulfillment center.
  #[serde(rename = "QuantityReceived")]
  quantity_received: Option<::models::Quantity>,
  /// The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of boxes in the inbound shipment equals QuantityShipped. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipment or the updateInboundShipment operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment.
  #[serde(rename = "QuantityInCase")]
  quantity_in_case: Option<::models::Quantity>,
  /// The date that a pre-order item will be available for sale.
  #[serde(rename = "ReleaseDate")]
  release_date: Option<::models::DateStringType>,
  #[serde(rename = "PrepDetailsList")]
  prep_details_list: Option<::models::PrepDetailsList>
}

impl InboundShipmentItem {
  /// Item information for an inbound shipment. Submitted with a call to the createInboundShipment or updateInboundShipment operation.
  pub fn new(seller_sku: String, quantity_shipped: ::models::Quantity) -> InboundShipmentItem {
    InboundShipmentItem {
      shipment_id: None,
      seller_sku: seller_sku,
      fulfillment_network_sku: None,
      quantity_shipped: quantity_shipped,
      quantity_received: None,
      quantity_in_case: None,
      release_date: None,
      prep_details_list: None
    }
  }

  pub fn set_shipment_id(&mut self, shipment_id: String) {
    self.shipment_id = Some(shipment_id);
  }

  pub fn with_shipment_id(mut self, shipment_id: String) -> InboundShipmentItem {
    self.shipment_id = Some(shipment_id);
    self
  }

  pub fn shipment_id(&self) -> Option<&String> {
    self.shipment_id.as_ref()
  }

  pub fn reset_shipment_id(&mut self) {
    self.shipment_id = None;
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = seller_sku;
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> InboundShipmentItem {
    self.seller_sku = seller_sku;
    self
  }

  pub fn seller_sku(&self) -> &String {
    &self.seller_sku
  }


  pub fn set_fulfillment_network_sku(&mut self, fulfillment_network_sku: String) {
    self.fulfillment_network_sku = Some(fulfillment_network_sku);
  }

  pub fn with_fulfillment_network_sku(mut self, fulfillment_network_sku: String) -> InboundShipmentItem {
    self.fulfillment_network_sku = Some(fulfillment_network_sku);
    self
  }

  pub fn fulfillment_network_sku(&self) -> Option<&String> {
    self.fulfillment_network_sku.as_ref()
  }

  pub fn reset_fulfillment_network_sku(&mut self) {
    self.fulfillment_network_sku = None;
  }

  pub fn set_quantity_shipped(&mut self, quantity_shipped: ::models::Quantity) {
    self.quantity_shipped = quantity_shipped;
  }

  pub fn with_quantity_shipped(mut self, quantity_shipped: ::models::Quantity) -> InboundShipmentItem {
    self.quantity_shipped = quantity_shipped;
    self
  }

  pub fn quantity_shipped(&self) -> &::models::Quantity {
    &self.quantity_shipped
  }


  pub fn set_quantity_received(&mut self, quantity_received: ::models::Quantity) {
    self.quantity_received = Some(quantity_received);
  }

  pub fn with_quantity_received(mut self, quantity_received: ::models::Quantity) -> InboundShipmentItem {
    self.quantity_received = Some(quantity_received);
    self
  }

  pub fn quantity_received(&self) -> Option<&::models::Quantity> {
    self.quantity_received.as_ref()
  }

  pub fn reset_quantity_received(&mut self) {
    self.quantity_received = None;
  }

  pub fn set_quantity_in_case(&mut self, quantity_in_case: ::models::Quantity) {
    self.quantity_in_case = Some(quantity_in_case);
  }

  pub fn with_quantity_in_case(mut self, quantity_in_case: ::models::Quantity) -> InboundShipmentItem {
    self.quantity_in_case = Some(quantity_in_case);
    self
  }

  pub fn quantity_in_case(&self) -> Option<&::models::Quantity> {
    self.quantity_in_case.as_ref()
  }

  pub fn reset_quantity_in_case(&mut self) {
    self.quantity_in_case = None;
  }

  pub fn set_release_date(&mut self, release_date: ::models::DateStringType) {
    self.release_date = Some(release_date);
  }

  pub fn with_release_date(mut self, release_date: ::models::DateStringType) -> InboundShipmentItem {
    self.release_date = Some(release_date);
    self
  }

  pub fn release_date(&self) -> Option<&::models::DateStringType> {
    self.release_date.as_ref()
  }

  pub fn reset_release_date(&mut self) {
    self.release_date = None;
  }

  pub fn set_prep_details_list(&mut self, prep_details_list: ::models::PrepDetailsList) {
    self.prep_details_list = Some(prep_details_list);
  }

  pub fn with_prep_details_list(mut self, prep_details_list: ::models::PrepDetailsList) -> InboundShipmentItem {
    self.prep_details_list = Some(prep_details_list);
    self
  }

  pub fn prep_details_list(&self) -> Option<&::models::PrepDetailsList> {
    self.prep_details_list.as_ref()
  }

  pub fn reset_prep_details_list(&mut self) {
    self.prep_details_list = None;
  }

}



