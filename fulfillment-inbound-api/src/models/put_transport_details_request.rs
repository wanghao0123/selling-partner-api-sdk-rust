/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PutTransportDetailsRequest : The request schema for a putTransportDetails operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PutTransportDetailsRequest {
  /// Indicates whether a putTransportDetails request is for an Amazon-partnered carrier.
  #[serde(rename = "IsPartnered")]
  is_partnered: bool,
  #[serde(rename = "ShipmentType")]
  shipment_type: ::models::ShipmentType,
  /// Information required to create an Amazon-partnered carrier shipping estimate, or to alert the Amazon fulfillment center to the arrival of an inbound shipment by a non-Amazon-partnered carrier.
  #[serde(rename = "TransportDetails")]
  transport_details: ::models::TransportDetailInput
}

impl PutTransportDetailsRequest {
  /// The request schema for a putTransportDetails operation.
  pub fn new(is_partnered: bool, shipment_type: ::models::ShipmentType, transport_details: ::models::TransportDetailInput) -> PutTransportDetailsRequest {
    PutTransportDetailsRequest {
      is_partnered: is_partnered,
      shipment_type: shipment_type,
      transport_details: transport_details
    }
  }

  pub fn set_is_partnered(&mut self, is_partnered: bool) {
    self.is_partnered = is_partnered;
  }

  pub fn with_is_partnered(mut self, is_partnered: bool) -> PutTransportDetailsRequest {
    self.is_partnered = is_partnered;
    self
  }

  pub fn is_partnered(&self) -> &bool {
    &self.is_partnered
  }


  pub fn set_shipment_type(&mut self, shipment_type: ::models::ShipmentType) {
    self.shipment_type = shipment_type;
  }

  pub fn with_shipment_type(mut self, shipment_type: ::models::ShipmentType) -> PutTransportDetailsRequest {
    self.shipment_type = shipment_type;
    self
  }

  pub fn shipment_type(&self) -> &::models::ShipmentType {
    &self.shipment_type
  }


  pub fn set_transport_details(&mut self, transport_details: ::models::TransportDetailInput) {
    self.transport_details = transport_details;
  }

  pub fn with_transport_details(mut self, transport_details: ::models::TransportDetailInput) -> PutTransportDetailsRequest {
    self.transport_details = transport_details;
    self
  }

  pub fn transport_details(&self) -> &::models::TransportDetailInput {
    &self.transport_details
  }


}



