/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PartneredEstimate : The estimated shipping cost for a shipment using an Amazon-partnered carrier.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartneredEstimate {
  /// The amount that the Amazon-partnered carrier will charge to ship the inbound shipment.
  #[serde(rename = "Amount")]
  amount: ::models::Amount,
  /// The date in ISO 8601 date time format by which this estimate must be confirmed. After this date the estimate is no longer valid and cannot be confirmed.  Returned only if the TransportStatus value of the inbound shipment is ESTIMATED.
  #[serde(rename = "ConfirmDeadline")]
  confirm_deadline: Option<::models::TimeStampStringType>,
  /// The date in ISO 8601 date time format after which a confirmed transportation request can no longer be voided. This date is 24 hours after a Small Parcel shipment transportation request is confirmed or one hour after a Less Than Truckload/Full Truckload (LTL/FTL) shipment transportation request is confirmed. After the void deadline passes the seller's account will be charged for the shipping cost.  Returned only if the TransportStatus value of the inbound shipment is CONFIRMED.
  #[serde(rename = "VoidDeadline")]
  void_deadline: Option<::models::TimeStampStringType>
}

impl PartneredEstimate {
  /// The estimated shipping cost for a shipment using an Amazon-partnered carrier.
  pub fn new(amount: ::models::Amount) -> PartneredEstimate {
    PartneredEstimate {
      amount: amount,
      confirm_deadline: None,
      void_deadline: None
    }
  }

  pub fn set_amount(&mut self, amount: ::models::Amount) {
    self.amount = amount;
  }

  pub fn with_amount(mut self, amount: ::models::Amount) -> PartneredEstimate {
    self.amount = amount;
    self
  }

  pub fn amount(&self) -> &::models::Amount {
    &self.amount
  }


  pub fn set_confirm_deadline(&mut self, confirm_deadline: ::models::TimeStampStringType) {
    self.confirm_deadline = Some(confirm_deadline);
  }

  pub fn with_confirm_deadline(mut self, confirm_deadline: ::models::TimeStampStringType) -> PartneredEstimate {
    self.confirm_deadline = Some(confirm_deadline);
    self
  }

  pub fn confirm_deadline(&self) -> Option<&::models::TimeStampStringType> {
    self.confirm_deadline.as_ref()
  }

  pub fn reset_confirm_deadline(&mut self) {
    self.confirm_deadline = None;
  }

  pub fn set_void_deadline(&mut self, void_deadline: ::models::TimeStampStringType) {
    self.void_deadline = Some(void_deadline);
  }

  pub fn with_void_deadline(mut self, void_deadline: ::models::TimeStampStringType) -> PartneredEstimate {
    self.void_deadline = Some(void_deadline);
    self
  }

  pub fn void_deadline(&self) -> Option<&::models::TimeStampStringType> {
    self.void_deadline.as_ref()
  }

  pub fn reset_void_deadline(&mut self) {
    self.void_deadline = None;
  }

}



