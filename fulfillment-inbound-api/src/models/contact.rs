/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Contact : Contact information for the person in the seller's organization who is responsible for a Less Than Truckload/Full Truckload (LTL/FTL) shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Contact {
  /// The name of the contact person.
  #[serde(rename = "Name")]
  name: String,
  /// The phone number of the contact person.
  #[serde(rename = "Phone")]
  phone: String,
  /// The email address of the contact person.
  #[serde(rename = "Email")]
  email: String,
  /// The fax number of the contact person.
  #[serde(rename = "Fax")]
  fax: Option<String>
}

impl Contact {
  /// Contact information for the person in the seller's organization who is responsible for a Less Than Truckload/Full Truckload (LTL/FTL) shipment.
  pub fn new(name: String, phone: String, email: String) -> Contact {
    Contact {
      name: name,
      phone: phone,
      email: email,
      fax: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Contact {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_phone(&mut self, phone: String) {
    self.phone = phone;
  }

  pub fn with_phone(mut self, phone: String) -> Contact {
    self.phone = phone;
    self
  }

  pub fn phone(&self) -> &String {
    &self.phone
  }


  pub fn set_email(&mut self, email: String) {
    self.email = email;
  }

  pub fn with_email(mut self, email: String) -> Contact {
    self.email = email;
    self
  }

  pub fn email(&self) -> &String {
    &self.email
  }


  pub fn set_fax(&mut self, fax: String) {
    self.fax = Some(fax);
  }

  pub fn with_fax(mut self, fax: String) -> Contact {
    self.fax = Some(fax);
    self
  }

  pub fn fax(&self) -> Option<&String> {
    self.fax.as_ref()
  }

  pub fn reset_fax(&mut self) {
    self.fax = None;
  }

}



