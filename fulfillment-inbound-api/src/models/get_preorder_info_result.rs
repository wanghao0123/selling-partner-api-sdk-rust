/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetPreorderInfoResult {
  /// Indicates whether the shipment contains items that have been enabled for pre-order. For more information about enabling items for pre-order, see the Seller Central Help.
  #[serde(rename = "ShipmentContainsPreorderableItems")]
  shipment_contains_preorderable_items: Option<bool>,
  /// Indicates whether this shipment has been confirmed for pre-order.
  #[serde(rename = "ShipmentConfirmedForPreorder")]
  shipment_confirmed_for_preorder: Option<bool>,
  /// Date that the shipment would need to arrive at an Amazon fulfillment center to avoid delivery promise breaks for pre-ordered items if this shipment is later confirmed for pre-order. In YYYY-MM-DD format. See also the confirmPreorder operation.
  #[serde(rename = "NeedByDate")]
  need_by_date: Option<::models::DateStringType>,
  /// Date in YYYY-MM-DD format that determines which pre-order items in the shipment are eligible for pre-order. If this shipment is confirmed for pre-order with a subsequent call to the confirmPreorder operation, the pre-order Buy Box will appear for any pre-order items in the shipment with a release date on or after this date. Call the getShipmentItems operation to get the release dates for the pre-order items in this shipment.
  #[serde(rename = "ConfirmedFulfillableDate")]
  confirmed_fulfillable_date: Option<::models::DateStringType>
}

impl GetPreorderInfoResult {
  pub fn new() -> GetPreorderInfoResult {
    GetPreorderInfoResult {
      shipment_contains_preorderable_items: None,
      shipment_confirmed_for_preorder: None,
      need_by_date: None,
      confirmed_fulfillable_date: None
    }
  }

  pub fn set_shipment_contains_preorderable_items(&mut self, shipment_contains_preorderable_items: bool) {
    self.shipment_contains_preorderable_items = Some(shipment_contains_preorderable_items);
  }

  pub fn with_shipment_contains_preorderable_items(mut self, shipment_contains_preorderable_items: bool) -> GetPreorderInfoResult {
    self.shipment_contains_preorderable_items = Some(shipment_contains_preorderable_items);
    self
  }

  pub fn shipment_contains_preorderable_items(&self) -> Option<&bool> {
    self.shipment_contains_preorderable_items.as_ref()
  }

  pub fn reset_shipment_contains_preorderable_items(&mut self) {
    self.shipment_contains_preorderable_items = None;
  }

  pub fn set_shipment_confirmed_for_preorder(&mut self, shipment_confirmed_for_preorder: bool) {
    self.shipment_confirmed_for_preorder = Some(shipment_confirmed_for_preorder);
  }

  pub fn with_shipment_confirmed_for_preorder(mut self, shipment_confirmed_for_preorder: bool) -> GetPreorderInfoResult {
    self.shipment_confirmed_for_preorder = Some(shipment_confirmed_for_preorder);
    self
  }

  pub fn shipment_confirmed_for_preorder(&self) -> Option<&bool> {
    self.shipment_confirmed_for_preorder.as_ref()
  }

  pub fn reset_shipment_confirmed_for_preorder(&mut self) {
    self.shipment_confirmed_for_preorder = None;
  }

  pub fn set_need_by_date(&mut self, need_by_date: ::models::DateStringType) {
    self.need_by_date = Some(need_by_date);
  }

  pub fn with_need_by_date(mut self, need_by_date: ::models::DateStringType) -> GetPreorderInfoResult {
    self.need_by_date = Some(need_by_date);
    self
  }

  pub fn need_by_date(&self) -> Option<&::models::DateStringType> {
    self.need_by_date.as_ref()
  }

  pub fn reset_need_by_date(&mut self) {
    self.need_by_date = None;
  }

  pub fn set_confirmed_fulfillable_date(&mut self, confirmed_fulfillable_date: ::models::DateStringType) {
    self.confirmed_fulfillable_date = Some(confirmed_fulfillable_date);
  }

  pub fn with_confirmed_fulfillable_date(mut self, confirmed_fulfillable_date: ::models::DateStringType) -> GetPreorderInfoResult {
    self.confirmed_fulfillable_date = Some(confirmed_fulfillable_date);
    self
  }

  pub fn confirmed_fulfillable_date(&self) -> Option<&::models::DateStringType> {
    self.confirmed_fulfillable_date.as_ref()
  }

  pub fn reset_confirmed_fulfillable_date(&mut self) {
    self.confirmed_fulfillable_date = None;
  }

}



