/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TransportResult : The workflow status for a shipment with an Amazon-partnered carrier.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TransportResult {
  #[serde(rename = "TransportStatus")]
  transport_status: ::models::TransportStatus,
  /// An error code that identifies the type of error that occured.
  #[serde(rename = "ErrorCode")]
  error_code: Option<String>,
  /// A message that describes the error condition.
  #[serde(rename = "ErrorDescription")]
  error_description: Option<String>
}

impl TransportResult {
  /// The workflow status for a shipment with an Amazon-partnered carrier.
  pub fn new(transport_status: ::models::TransportStatus) -> TransportResult {
    TransportResult {
      transport_status: transport_status,
      error_code: None,
      error_description: None
    }
  }

  pub fn set_transport_status(&mut self, transport_status: ::models::TransportStatus) {
    self.transport_status = transport_status;
  }

  pub fn with_transport_status(mut self, transport_status: ::models::TransportStatus) -> TransportResult {
    self.transport_status = transport_status;
    self
  }

  pub fn transport_status(&self) -> &::models::TransportStatus {
    &self.transport_status
  }


  pub fn set_error_code(&mut self, error_code: String) {
    self.error_code = Some(error_code);
  }

  pub fn with_error_code(mut self, error_code: String) -> TransportResult {
    self.error_code = Some(error_code);
    self
  }

  pub fn error_code(&self) -> Option<&String> {
    self.error_code.as_ref()
  }

  pub fn reset_error_code(&mut self) {
    self.error_code = None;
  }

  pub fn set_error_description(&mut self, error_description: String) {
    self.error_description = Some(error_description);
  }

  pub fn with_error_description(mut self, error_description: String) -> TransportResult {
    self.error_description = Some(error_description);
    self
  }

  pub fn error_description(&self) -> Option<&String> {
    self.error_description.as_ref()
  }

  pub fn reset_error_description(&mut self) {
    self.error_description = None;
  }

}



