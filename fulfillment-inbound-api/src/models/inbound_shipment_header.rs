/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// InboundShipmentHeader : Inbound shipment information used to create and update inbound shipments.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InboundShipmentHeader {
  /// The name for the shipment. Use a naming convention that helps distinguish between shipments over time, such as the date the shipment was created.
  #[serde(rename = "ShipmentName")]
  shipment_name: String,
  /// The return address.
  #[serde(rename = "ShipFromAddress")]
  ship_from_address: ::models::Address,
  /// The identifier for the fulfillment center to which the shipment will be shipped. Get this value from the InboundShipmentPlan object in the response returned by the createInboundShipmentPlan operation.
  #[serde(rename = "DestinationFulfillmentCenterId")]
  destination_fulfillment_center_id: String,
  /// Indicates whether or not an inbound shipment contains case-packed boxes. Note: A shipment must contain either all case-packed boxes or all individually packed boxes.  Possible values:  true - All boxes in the shipment must be case packed.  false - All boxes in the shipment must be individually packed.  Note: If AreCasesRequired = true for an inbound shipment, then the value of QuantityInCase must be greater than zero for every item in the shipment. Otherwise the service returns an error.
  #[serde(rename = "AreCasesRequired")]
  are_cases_required: Option<bool>,
  #[serde(rename = "ShipmentStatus")]
  shipment_status: ::models::ShipmentStatus,
  /// The preference for label preparation for an inbound shipment.
  #[serde(rename = "LabelPrepPreference")]
  label_prep_preference: ::models::LabelPrepPreference,
  #[serde(rename = "IntendedBoxContentsSource")]
  intended_box_contents_source: Option<::models::IntendedBoxContentsSource>
}

impl InboundShipmentHeader {
  /// Inbound shipment information used to create and update inbound shipments.
  pub fn new(shipment_name: String, ship_from_address: ::models::Address, destination_fulfillment_center_id: String, shipment_status: ::models::ShipmentStatus, label_prep_preference: ::models::LabelPrepPreference) -> InboundShipmentHeader {
    InboundShipmentHeader {
      shipment_name: shipment_name,
      ship_from_address: ship_from_address,
      destination_fulfillment_center_id: destination_fulfillment_center_id,
      are_cases_required: None,
      shipment_status: shipment_status,
      label_prep_preference: label_prep_preference,
      intended_box_contents_source: None
    }
  }

  pub fn set_shipment_name(&mut self, shipment_name: String) {
    self.shipment_name = shipment_name;
  }

  pub fn with_shipment_name(mut self, shipment_name: String) -> InboundShipmentHeader {
    self.shipment_name = shipment_name;
    self
  }

  pub fn shipment_name(&self) -> &String {
    &self.shipment_name
  }


  pub fn set_ship_from_address(&mut self, ship_from_address: ::models::Address) {
    self.ship_from_address = ship_from_address;
  }

  pub fn with_ship_from_address(mut self, ship_from_address: ::models::Address) -> InboundShipmentHeader {
    self.ship_from_address = ship_from_address;
    self
  }

  pub fn ship_from_address(&self) -> &::models::Address {
    &self.ship_from_address
  }


  pub fn set_destination_fulfillment_center_id(&mut self, destination_fulfillment_center_id: String) {
    self.destination_fulfillment_center_id = destination_fulfillment_center_id;
  }

  pub fn with_destination_fulfillment_center_id(mut self, destination_fulfillment_center_id: String) -> InboundShipmentHeader {
    self.destination_fulfillment_center_id = destination_fulfillment_center_id;
    self
  }

  pub fn destination_fulfillment_center_id(&self) -> &String {
    &self.destination_fulfillment_center_id
  }


  pub fn set_are_cases_required(&mut self, are_cases_required: bool) {
    self.are_cases_required = Some(are_cases_required);
  }

  pub fn with_are_cases_required(mut self, are_cases_required: bool) -> InboundShipmentHeader {
    self.are_cases_required = Some(are_cases_required);
    self
  }

  pub fn are_cases_required(&self) -> Option<&bool> {
    self.are_cases_required.as_ref()
  }

  pub fn reset_are_cases_required(&mut self) {
    self.are_cases_required = None;
  }

  pub fn set_shipment_status(&mut self, shipment_status: ::models::ShipmentStatus) {
    self.shipment_status = shipment_status;
  }

  pub fn with_shipment_status(mut self, shipment_status: ::models::ShipmentStatus) -> InboundShipmentHeader {
    self.shipment_status = shipment_status;
    self
  }

  pub fn shipment_status(&self) -> &::models::ShipmentStatus {
    &self.shipment_status
  }


  pub fn set_label_prep_preference(&mut self, label_prep_preference: ::models::LabelPrepPreference) {
    self.label_prep_preference = label_prep_preference;
  }

  pub fn with_label_prep_preference(mut self, label_prep_preference: ::models::LabelPrepPreference) -> InboundShipmentHeader {
    self.label_prep_preference = label_prep_preference;
    self
  }

  pub fn label_prep_preference(&self) -> &::models::LabelPrepPreference {
    &self.label_prep_preference
  }


  pub fn set_intended_box_contents_source(&mut self, intended_box_contents_source: ::models::IntendedBoxContentsSource) {
    self.intended_box_contents_source = Some(intended_box_contents_source);
  }

  pub fn with_intended_box_contents_source(mut self, intended_box_contents_source: ::models::IntendedBoxContentsSource) -> InboundShipmentHeader {
    self.intended_box_contents_source = Some(intended_box_contents_source);
    self
  }

  pub fn intended_box_contents_source(&self) -> Option<&::models::IntendedBoxContentsSource> {
    self.intended_box_contents_source.as_ref()
  }

  pub fn reset_intended_box_contents_source(&mut self) {
    self.intended_box_contents_source = None;
  }

}



