/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AmazonPrepFeesDetails : The fees for Amazon to prep goods for shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AmazonPrepFeesDetails {
  #[serde(rename = "PrepInstruction")]
  prep_instruction: Option<::models::PrepInstruction>,
  /// The fee for Amazon to prepare 1 unit.
  #[serde(rename = "FeePerUnit")]
  fee_per_unit: Option<::models::Amount>
}

impl AmazonPrepFeesDetails {
  /// The fees for Amazon to prep goods for shipment.
  pub fn new() -> AmazonPrepFeesDetails {
    AmazonPrepFeesDetails {
      prep_instruction: None,
      fee_per_unit: None
    }
  }

  pub fn set_prep_instruction(&mut self, prep_instruction: ::models::PrepInstruction) {
    self.prep_instruction = Some(prep_instruction);
  }

  pub fn with_prep_instruction(mut self, prep_instruction: ::models::PrepInstruction) -> AmazonPrepFeesDetails {
    self.prep_instruction = Some(prep_instruction);
    self
  }

  pub fn prep_instruction(&self) -> Option<&::models::PrepInstruction> {
    self.prep_instruction.as_ref()
  }

  pub fn reset_prep_instruction(&mut self) {
    self.prep_instruction = None;
  }

  pub fn set_fee_per_unit(&mut self, fee_per_unit: ::models::Amount) {
    self.fee_per_unit = Some(fee_per_unit);
  }

  pub fn with_fee_per_unit(mut self, fee_per_unit: ::models::Amount) -> AmazonPrepFeesDetails {
    self.fee_per_unit = Some(fee_per_unit);
    self
  }

  pub fn fee_per_unit(&self) -> Option<&::models::Amount> {
    self.fee_per_unit.as_ref()
  }

  pub fn reset_fee_per_unit(&mut self) {
    self.fee_per_unit = None;
  }

}



