/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// InboundShipmentPlanRequestItem : Item information for creating an inbound shipment plan. Submitted with a call to the createInboundShipmentPlan operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InboundShipmentPlanRequestItem {
  /// The seller SKU of the item.
  #[serde(rename = "SellerSKU")]
  seller_sku: String,
  /// The Amazon Standard Identification Number (ASIN) of the item.
  #[serde(rename = "ASIN")]
  ASIN: String,
  #[serde(rename = "Condition")]
  condition: ::models::Condition,
  #[serde(rename = "Quantity")]
  quantity: ::models::Quantity,
  /// The item quantity in each case, for case-packed items. Note that QuantityInCase multiplied by the number of cases in the inbound shipment equals Quantity. Also note that all of the boxes of an inbound shipment must either be case packed or individually packed. For that reason, when you submit the createInboundShipmentPlan operation, the value of QuantityInCase must be provided for every item in the shipment or for none of the items in the shipment.
  #[serde(rename = "QuantityInCase")]
  quantity_in_case: Option<::models::Quantity>,
  #[serde(rename = "PrepDetailsList")]
  prep_details_list: Option<::models::PrepDetailsList>
}

impl InboundShipmentPlanRequestItem {
  /// Item information for creating an inbound shipment plan. Submitted with a call to the createInboundShipmentPlan operation.
  pub fn new(seller_sku: String, ASIN: String, condition: ::models::Condition, quantity: ::models::Quantity) -> InboundShipmentPlanRequestItem {
    InboundShipmentPlanRequestItem {
      seller_sku: seller_sku,
      ASIN: ASIN,
      condition: condition,
      quantity: quantity,
      quantity_in_case: None,
      prep_details_list: None
    }
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = seller_sku;
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> InboundShipmentPlanRequestItem {
    self.seller_sku = seller_sku;
    self
  }

  pub fn seller_sku(&self) -> &String {
    &self.seller_sku
  }


  pub fn set_ASIN(&mut self, ASIN: String) {
    self.ASIN = ASIN;
  }

  pub fn with_ASIN(mut self, ASIN: String) -> InboundShipmentPlanRequestItem {
    self.ASIN = ASIN;
    self
  }

  pub fn ASIN(&self) -> &String {
    &self.ASIN
  }


  pub fn set_condition(&mut self, condition: ::models::Condition) {
    self.condition = condition;
  }

  pub fn with_condition(mut self, condition: ::models::Condition) -> InboundShipmentPlanRequestItem {
    self.condition = condition;
    self
  }

  pub fn condition(&self) -> &::models::Condition {
    &self.condition
  }


  pub fn set_quantity(&mut self, quantity: ::models::Quantity) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: ::models::Quantity) -> InboundShipmentPlanRequestItem {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &::models::Quantity {
    &self.quantity
  }


  pub fn set_quantity_in_case(&mut self, quantity_in_case: ::models::Quantity) {
    self.quantity_in_case = Some(quantity_in_case);
  }

  pub fn with_quantity_in_case(mut self, quantity_in_case: ::models::Quantity) -> InboundShipmentPlanRequestItem {
    self.quantity_in_case = Some(quantity_in_case);
    self
  }

  pub fn quantity_in_case(&self) -> Option<&::models::Quantity> {
    self.quantity_in_case.as_ref()
  }

  pub fn reset_quantity_in_case(&mut self) {
    self.quantity_in_case = None;
  }

  pub fn set_prep_details_list(&mut self, prep_details_list: ::models::PrepDetailsList) {
    self.prep_details_list = Some(prep_details_list);
  }

  pub fn with_prep_details_list(mut self, prep_details_list: ::models::PrepDetailsList) -> InboundShipmentPlanRequestItem {
    self.prep_details_list = Some(prep_details_list);
    self
  }

  pub fn prep_details_list(&self) -> Option<&::models::PrepDetailsList> {
    self.prep_details_list.as_ref()
  }

  pub fn reset_prep_details_list(&mut self) {
    self.prep_details_list = None;
  }

}



