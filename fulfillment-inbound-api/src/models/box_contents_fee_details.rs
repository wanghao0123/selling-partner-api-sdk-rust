/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// BoxContentsFeeDetails : The manual processing fee per unit and total fee for a shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct BoxContentsFeeDetails {
  /// The number of units to ship.
  #[serde(rename = "TotalUnits")]
  total_units: Option<::models::Quantity>,
  /// The manual processing fee per unit.
  #[serde(rename = "FeePerUnit")]
  fee_per_unit: Option<::models::Amount>,
  /// The total manual processing fee for the shipment.
  #[serde(rename = "TotalFee")]
  total_fee: Option<::models::Amount>
}

impl BoxContentsFeeDetails {
  /// The manual processing fee per unit and total fee for a shipment.
  pub fn new() -> BoxContentsFeeDetails {
    BoxContentsFeeDetails {
      total_units: None,
      fee_per_unit: None,
      total_fee: None
    }
  }

  pub fn set_total_units(&mut self, total_units: ::models::Quantity) {
    self.total_units = Some(total_units);
  }

  pub fn with_total_units(mut self, total_units: ::models::Quantity) -> BoxContentsFeeDetails {
    self.total_units = Some(total_units);
    self
  }

  pub fn total_units(&self) -> Option<&::models::Quantity> {
    self.total_units.as_ref()
  }

  pub fn reset_total_units(&mut self) {
    self.total_units = None;
  }

  pub fn set_fee_per_unit(&mut self, fee_per_unit: ::models::Amount) {
    self.fee_per_unit = Some(fee_per_unit);
  }

  pub fn with_fee_per_unit(mut self, fee_per_unit: ::models::Amount) -> BoxContentsFeeDetails {
    self.fee_per_unit = Some(fee_per_unit);
    self
  }

  pub fn fee_per_unit(&self) -> Option<&::models::Amount> {
    self.fee_per_unit.as_ref()
  }

  pub fn reset_fee_per_unit(&mut self) {
    self.fee_per_unit = None;
  }

  pub fn set_total_fee(&mut self, total_fee: ::models::Amount) {
    self.total_fee = Some(total_fee);
  }

  pub fn with_total_fee(mut self, total_fee: ::models::Amount) -> BoxContentsFeeDetails {
    self.total_fee = Some(total_fee);
    self
  }

  pub fn total_fee(&self) -> Option<&::models::Amount> {
    self.total_fee.as_ref()
  }

  pub fn reset_total_fee(&mut self) {
    self.total_fee = None;
  }

}



