/* 
 * Selling Partner API for Fulfillment Inbound
 *
 * The Selling Partner API for Fulfillment Inbound lets you create applications that create and update inbound shipments of inventory to Amazon's fulfillment network.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct FbaInboundApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> FbaInboundApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> FbaInboundApiClient<C> {
        FbaInboundApiClient {
            configuration: configuration,
        }
    }
}

pub trait FbaInboundApi {
    fn confirm_preorder(&self, shipment_id: &str, need_by_date: String, marketplace_id: &str) -> Box<Future<Item = ::models::ConfirmPreorderResponse, Error = Error<serde_json::Value>>>;
    fn confirm_transport(&self, shipment_id: &str) -> Box<Future<Item = ::models::ConfirmTransportResponse, Error = Error<serde_json::Value>>>;
    fn create_inbound_shipment(&self, body: ::models::InboundShipmentRequest, shipment_id: &str) -> Box<Future<Item = ::models::InboundShipmentResponse, Error = Error<serde_json::Value>>>;
    fn create_inbound_shipment_plan(&self, body: ::models::CreateInboundShipmentPlanRequest) -> Box<Future<Item = ::models::CreateInboundShipmentPlanResponse, Error = Error<serde_json::Value>>>;
    fn estimate_transport(&self, shipment_id: &str) -> Box<Future<Item = ::models::EstimateTransportResponse, Error = Error<serde_json::Value>>>;
    fn get_bill_of_lading(&self, shipment_id: &str) -> Box<Future<Item = ::models::GetBillOfLadingResponse, Error = Error<serde_json::Value>>>;
    fn get_inbound_guidance(&self, marketplace_id: &str, seller_sku_list: Vec<String>, asin_list: Vec<String>) -> Box<Future<Item = ::models::GetInboundGuidanceResponse, Error = Error<serde_json::Value>>>;
    fn get_labels(&self, shipment_id: &str, page_type: &str, label_type: &str, number_of_packages: i32, package_labels_to_print: Vec<String>, number_of_pallets: i32, page_size: i32, page_start_index: i32) -> Box<Future<Item = ::models::GetLabelsResponse, Error = Error<serde_json::Value>>>;
    fn get_preorder_info(&self, shipment_id: &str, marketplace_id: &str) -> Box<Future<Item = ::models::GetPreorderInfoResponse, Error = Error<serde_json::Value>>>;
    fn get_prep_instructions(&self, ship_to_country_code: &str, seller_sku_list: Vec<String>, asin_list: Vec<String>) -> Box<Future<Item = ::models::GetPrepInstructionsResponse, Error = Error<serde_json::Value>>>;
    fn get_shipment_items(&self, query_type: &str, marketplace_id: &str, last_updated_after: String, last_updated_before: String, next_token: &str) -> Box<Future<Item = ::models::GetShipmentItemsResponse, Error = Error<serde_json::Value>>>;
    fn get_shipment_items_by_shipment_id(&self, shipment_id: &str, marketplace_id: &str) -> Box<Future<Item = ::models::GetShipmentItemsResponse, Error = Error<serde_json::Value>>>;
    fn get_shipments(&self, query_type: &str, marketplace_id: &str, shipment_status_list: Vec<String>, shipment_id_list: Vec<String>, last_updated_after: String, last_updated_before: String, next_token: &str) -> Box<Future<Item = ::models::GetShipmentsResponse, Error = Error<serde_json::Value>>>;
    fn get_transport_details(&self, shipment_id: &str) -> Box<Future<Item = ::models::GetTransportDetailsResponse, Error = Error<serde_json::Value>>>;
    fn put_transport_details(&self, shipment_id: &str, body: ::models::PutTransportDetailsRequest) -> Box<Future<Item = ::models::PutTransportDetailsResponse, Error = Error<serde_json::Value>>>;
    fn update_inbound_shipment(&self, body: ::models::InboundShipmentRequest, shipment_id: &str) -> Box<Future<Item = ::models::InboundShipmentResponse, Error = Error<serde_json::Value>>>;
    fn void_transport(&self, shipment_id: &str) -> Box<Future<Item = ::models::VoidTransportResponse, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>FbaInboundApi for FbaInboundApiClient<C> {
    fn confirm_preorder(&self, shipment_id: &str, need_by_date: String, marketplace_id: &str) -> Box<Future<Item = ::models::ConfirmPreorderResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("NeedByDate", &need_by_date.to_string());
            query.append_pair("MarketplaceId", &marketplace_id.to_string());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/preorder/confirm?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::ConfirmPreorderResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn confirm_transport(&self, shipment_id: &str) -> Box<Future<Item = ::models::ConfirmTransportResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport/confirm?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::ConfirmTransportResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_inbound_shipment(&self, body: ::models::InboundShipmentRequest, shipment_id: &str) -> Box<Future<Item = ::models::InboundShipmentResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InboundShipmentResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_inbound_shipment_plan(&self, body: ::models::CreateInboundShipmentPlanRequest) -> Box<Future<Item = ::models::CreateInboundShipmentPlanResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/plans?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateInboundShipmentPlanResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn estimate_transport(&self, shipment_id: &str) -> Box<Future<Item = ::models::EstimateTransportResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport/estimate?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::EstimateTransportResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_bill_of_lading(&self, shipment_id: &str) -> Box<Future<Item = ::models::GetBillOfLadingResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/billOfLading?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetBillOfLadingResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_inbound_guidance(&self, marketplace_id: &str, seller_sku_list: Vec<String>, asin_list: Vec<String>) -> Box<Future<Item = ::models::GetInboundGuidanceResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("MarketplaceId", &marketplace_id.to_string());
            query.append_pair("SellerSKUList", &seller_sku_list.join(",").to_string());
            query.append_pair("ASINList", &asin_list.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/itemsGuidance?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetInboundGuidanceResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_labels(&self, shipment_id: &str, page_type: &str, label_type: &str, number_of_packages: i32, package_labels_to_print: Vec<String>, number_of_pallets: i32, page_size: i32, page_start_index: i32) -> Box<Future<Item = ::models::GetLabelsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("PageType", &page_type.to_string());
            query.append_pair("LabelType", &label_type.to_string());
            query.append_pair("NumberOfPackages", &number_of_packages.to_string());
            query.append_pair("PackageLabelsToPrint", &package_labels_to_print.join(",").to_string());
            query.append_pair("NumberOfPallets", &number_of_pallets.to_string());
            query.append_pair("PageSize", &page_size.to_string());
            query.append_pair("PageStartIndex", &page_start_index.to_string());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/labels?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetLabelsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_preorder_info(&self, shipment_id: &str, marketplace_id: &str) -> Box<Future<Item = ::models::GetPreorderInfoResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("MarketplaceId", &marketplace_id.to_string());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/preorder?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetPreorderInfoResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_prep_instructions(&self, ship_to_country_code: &str, seller_sku_list: Vec<String>, asin_list: Vec<String>) -> Box<Future<Item = ::models::GetPrepInstructionsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("ShipToCountryCode", &ship_to_country_code.to_string());
            query.append_pair("SellerSKUList", &seller_sku_list.join(",").to_string());
            query.append_pair("ASINList", &asin_list.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/prepInstructions?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetPrepInstructionsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_shipment_items(&self, query_type: &str, marketplace_id: &str, last_updated_after: String, last_updated_before: String, next_token: &str) -> Box<Future<Item = ::models::GetShipmentItemsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("LastUpdatedAfter", &last_updated_after.to_string());
            query.append_pair("LastUpdatedBefore", &last_updated_before.to_string());
            query.append_pair("QueryType", &query_type.to_string());
            query.append_pair("NextToken", &next_token.to_string());
            query.append_pair("MarketplaceId", &marketplace_id.to_string());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipmentItems?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetShipmentItemsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_shipment_items_by_shipment_id(&self, shipment_id: &str, marketplace_id: &str) -> Box<Future<Item = ::models::GetShipmentItemsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("MarketplaceId", &marketplace_id.to_string());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/items?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetShipmentItemsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_shipments(&self, query_type: &str, marketplace_id: &str, shipment_status_list: Vec<String>, shipment_id_list: Vec<String>, last_updated_after: String, last_updated_before: String, next_token: &str) -> Box<Future<Item = ::models::GetShipmentsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("ShipmentStatusList", &shipment_status_list.join(",").to_string());
            query.append_pair("ShipmentIdList", &shipment_id_list.join(",").to_string());
            query.append_pair("LastUpdatedAfter", &last_updated_after.to_string());
            query.append_pair("LastUpdatedBefore", &last_updated_before.to_string());
            query.append_pair("QueryType", &query_type.to_string());
            query.append_pair("NextToken", &next_token.to_string());
            query.append_pair("MarketplaceId", &marketplace_id.to_string());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetShipmentsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_transport_details(&self, shipment_id: &str) -> Box<Future<Item = ::models::GetTransportDetailsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetTransportDetailsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn put_transport_details(&self, shipment_id: &str, body: ::models::PutTransportDetailsRequest) -> Box<Future<Item = ::models::PutTransportDetailsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::PutTransportDetailsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn update_inbound_shipment(&self, body: ::models::InboundShipmentRequest, shipment_id: &str) -> Box<Future<Item = ::models::InboundShipmentResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Put;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::InboundShipmentResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn void_transport(&self, shipment_id: &str) -> Box<Future<Item = ::models::VoidTransportResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.finish()
        };
        let uri_str = format!("{}/fba/inbound/v0/shipments/{shipmentId}/transport/void?{}", configuration.base_path, query_string, shipmentId=shipment_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::VoidTransportResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
