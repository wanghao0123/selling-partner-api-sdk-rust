/* 
 * Selling Partner API for FBA Inbound Eligibilty
 *
 * With the FBA Inbound Eligibility API, you can build applications that let sellers get eligibility previews for items before shipping them to Amazon's fulfillment centers. With this API you can find out if an item is eligible for inbound shipment to Amazon's fulfillment centers in a specific marketplace. You can also find out if an item is eligible for using the manufacturer barcode for FBA inventory tracking. Sellers can use this information to inform their decisions about which items to ship Amazon's fulfillment centers.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ItemEligibilityPreview : The response object which contains the ASIN, marketplaceId if required, eligibility program, the eligibility status (boolean), and a list of ineligibility reason codes.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ItemEligibilityPreview {
  /// The ASIN for which eligibility was determined.
  #[serde(rename = "asin")]
  asin: String,
  /// The marketplace for which eligibility was determined.
  #[serde(rename = "marketplaceId")]
  marketplace_id: Option<String>,
  /// The program for which eligibility was determined.
  #[serde(rename = "program")]
  program: String,
  /// Indicates if the item is eligible for the program.
  #[serde(rename = "isEligibleForProgram")]
  is_eligible_for_program: bool,
  /// Potential Ineligibility Reason Codes.
  #[serde(rename = "ineligibilityReasonList")]
  ineligibility_reason_list: Option<Vec<String>>
}

impl ItemEligibilityPreview {
  /// The response object which contains the ASIN, marketplaceId if required, eligibility program, the eligibility status (boolean), and a list of ineligibility reason codes.
  pub fn new(asin: String, program: String, is_eligible_for_program: bool) -> ItemEligibilityPreview {
    ItemEligibilityPreview {
      asin: asin,
      marketplace_id: None,
      program: program,
      is_eligible_for_program: is_eligible_for_program,
      ineligibility_reason_list: None
    }
  }

  pub fn set_asin(&mut self, asin: String) {
    self.asin = asin;
  }

  pub fn with_asin(mut self, asin: String) -> ItemEligibilityPreview {
    self.asin = asin;
    self
  }

  pub fn asin(&self) -> &String {
    &self.asin
  }


  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = Some(marketplace_id);
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> ItemEligibilityPreview {
    self.marketplace_id = Some(marketplace_id);
    self
  }

  pub fn marketplace_id(&self) -> Option<&String> {
    self.marketplace_id.as_ref()
  }

  pub fn reset_marketplace_id(&mut self) {
    self.marketplace_id = None;
  }

  pub fn set_program(&mut self, program: String) {
    self.program = program;
  }

  pub fn with_program(mut self, program: String) -> ItemEligibilityPreview {
    self.program = program;
    self
  }

  pub fn program(&self) -> &String {
    &self.program
  }


  pub fn set_is_eligible_for_program(&mut self, is_eligible_for_program: bool) {
    self.is_eligible_for_program = is_eligible_for_program;
  }

  pub fn with_is_eligible_for_program(mut self, is_eligible_for_program: bool) -> ItemEligibilityPreview {
    self.is_eligible_for_program = is_eligible_for_program;
    self
  }

  pub fn is_eligible_for_program(&self) -> &bool {
    &self.is_eligible_for_program
  }


  pub fn set_ineligibility_reason_list(&mut self, ineligibility_reason_list: Vec<String>) {
    self.ineligibility_reason_list = Some(ineligibility_reason_list);
  }

  pub fn with_ineligibility_reason_list(mut self, ineligibility_reason_list: Vec<String>) -> ItemEligibilityPreview {
    self.ineligibility_reason_list = Some(ineligibility_reason_list);
    self
  }

  pub fn ineligibility_reason_list(&self) -> Option<&Vec<String>> {
    self.ineligibility_reason_list.as_ref()
  }

  pub fn reset_ineligibility_reason_list(&mut self) {
    self.ineligibility_reason_list = None;
  }

}



