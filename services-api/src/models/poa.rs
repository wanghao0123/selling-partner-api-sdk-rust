/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Poa : Proof of Appointment (POA) details.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Poa {
  /// The time of the appointment window.
  #[serde(rename = "appointmentTime")]
  appointment_time: Option<::models::AppointmentTime>,
  /// A list of technicians.
  #[serde(rename = "technicians")]
  technicians: Option<Vec<::models::Technician>>,
  /// The identifier of the technician who uploaded the POA.
  #[serde(rename = "uploadingTechnician")]
  uploading_technician: Option<String>,
  /// The date and time when the POA was uploaded, in ISO 8601 format.
  #[serde(rename = "uploadTime")]
  upload_time: Option<String>,
  /// The type of POA uploaded.
  #[serde(rename = "poaType")]
  poa_type: Option<String>
}

impl Poa {
  /// Proof of Appointment (POA) details.
  pub fn new() -> Poa {
    Poa {
      appointment_time: None,
      technicians: None,
      uploading_technician: None,
      upload_time: None,
      poa_type: None
    }
  }

  pub fn set_appointment_time(&mut self, appointment_time: ::models::AppointmentTime) {
    self.appointment_time = Some(appointment_time);
  }

  pub fn with_appointment_time(mut self, appointment_time: ::models::AppointmentTime) -> Poa {
    self.appointment_time = Some(appointment_time);
    self
  }

  pub fn appointment_time(&self) -> Option<&::models::AppointmentTime> {
    self.appointment_time.as_ref()
  }

  pub fn reset_appointment_time(&mut self) {
    self.appointment_time = None;
  }

  pub fn set_technicians(&mut self, technicians: Vec<::models::Technician>) {
    self.technicians = Some(technicians);
  }

  pub fn with_technicians(mut self, technicians: Vec<::models::Technician>) -> Poa {
    self.technicians = Some(technicians);
    self
  }

  pub fn technicians(&self) -> Option<&Vec<::models::Technician>> {
    self.technicians.as_ref()
  }

  pub fn reset_technicians(&mut self) {
    self.technicians = None;
  }

  pub fn set_uploading_technician(&mut self, uploading_technician: String) {
    self.uploading_technician = Some(uploading_technician);
  }

  pub fn with_uploading_technician(mut self, uploading_technician: String) -> Poa {
    self.uploading_technician = Some(uploading_technician);
    self
  }

  pub fn uploading_technician(&self) -> Option<&String> {
    self.uploading_technician.as_ref()
  }

  pub fn reset_uploading_technician(&mut self) {
    self.uploading_technician = None;
  }

  pub fn set_upload_time(&mut self, upload_time: String) {
    self.upload_time = Some(upload_time);
  }

  pub fn with_upload_time(mut self, upload_time: String) -> Poa {
    self.upload_time = Some(upload_time);
    self
  }

  pub fn upload_time(&self) -> Option<&String> {
    self.upload_time.as_ref()
  }

  pub fn reset_upload_time(&mut self) {
    self.upload_time = None;
  }

  pub fn set_poa_type(&mut self, poa_type: String) {
    self.poa_type = Some(poa_type);
  }

  pub fn with_poa_type(mut self, poa_type: String) -> Poa {
    self.poa_type = Some(poa_type);
    self
  }

  pub fn poa_type(&self) -> Option<&String> {
    self.poa_type.as_ref()
  }

  pub fn reset_poa_type(&mut self) {
    self.poa_type = None;
  }

}



