/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Appointment : The details of an appointment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Appointment {
  /// The appointment identifier.
  #[serde(rename = "appointmentId")]
  appointment_id: Option<::models::AppointmentId>,
  /// The status of the appointment.
  #[serde(rename = "appointmentStatus")]
  appointment_status: Option<String>,
  /// The time of the appointment window.
  #[serde(rename = "appointmentTime")]
  appointment_time: Option<::models::AppointmentTime>,
  /// A list of technicians assigned to the service job.
  #[serde(rename = "assignedTechnicians")]
  assigned_technicians: Option<Vec<::models::Technician>>,
  /// The identifier of a rescheduled appointment.
  #[serde(rename = "rescheduledAppointmentId")]
  rescheduled_appointment_id: Option<::models::AppointmentId>,
  /// Proof of Appointment (POA) details.
  #[serde(rename = "poa")]
  poa: Option<::models::Poa>
}

impl Appointment {
  /// The details of an appointment.
  pub fn new() -> Appointment {
    Appointment {
      appointment_id: None,
      appointment_status: None,
      appointment_time: None,
      assigned_technicians: None,
      rescheduled_appointment_id: None,
      poa: None
    }
  }

  pub fn set_appointment_id(&mut self, appointment_id: ::models::AppointmentId) {
    self.appointment_id = Some(appointment_id);
  }

  pub fn with_appointment_id(mut self, appointment_id: ::models::AppointmentId) -> Appointment {
    self.appointment_id = Some(appointment_id);
    self
  }

  pub fn appointment_id(&self) -> Option<&::models::AppointmentId> {
    self.appointment_id.as_ref()
  }

  pub fn reset_appointment_id(&mut self) {
    self.appointment_id = None;
  }

  pub fn set_appointment_status(&mut self, appointment_status: String) {
    self.appointment_status = Some(appointment_status);
  }

  pub fn with_appointment_status(mut self, appointment_status: String) -> Appointment {
    self.appointment_status = Some(appointment_status);
    self
  }

  pub fn appointment_status(&self) -> Option<&String> {
    self.appointment_status.as_ref()
  }

  pub fn reset_appointment_status(&mut self) {
    self.appointment_status = None;
  }

  pub fn set_appointment_time(&mut self, appointment_time: ::models::AppointmentTime) {
    self.appointment_time = Some(appointment_time);
  }

  pub fn with_appointment_time(mut self, appointment_time: ::models::AppointmentTime) -> Appointment {
    self.appointment_time = Some(appointment_time);
    self
  }

  pub fn appointment_time(&self) -> Option<&::models::AppointmentTime> {
    self.appointment_time.as_ref()
  }

  pub fn reset_appointment_time(&mut self) {
    self.appointment_time = None;
  }

  pub fn set_assigned_technicians(&mut self, assigned_technicians: Vec<::models::Technician>) {
    self.assigned_technicians = Some(assigned_technicians);
  }

  pub fn with_assigned_technicians(mut self, assigned_technicians: Vec<::models::Technician>) -> Appointment {
    self.assigned_technicians = Some(assigned_technicians);
    self
  }

  pub fn assigned_technicians(&self) -> Option<&Vec<::models::Technician>> {
    self.assigned_technicians.as_ref()
  }

  pub fn reset_assigned_technicians(&mut self) {
    self.assigned_technicians = None;
  }

  pub fn set_rescheduled_appointment_id(&mut self, rescheduled_appointment_id: ::models::AppointmentId) {
    self.rescheduled_appointment_id = Some(rescheduled_appointment_id);
  }

  pub fn with_rescheduled_appointment_id(mut self, rescheduled_appointment_id: ::models::AppointmentId) -> Appointment {
    self.rescheduled_appointment_id = Some(rescheduled_appointment_id);
    self
  }

  pub fn rescheduled_appointment_id(&self) -> Option<&::models::AppointmentId> {
    self.rescheduled_appointment_id.as_ref()
  }

  pub fn reset_rescheduled_appointment_id(&mut self) {
    self.rescheduled_appointment_id = None;
  }

  pub fn set_poa(&mut self, poa: ::models::Poa) {
    self.poa = Some(poa);
  }

  pub fn with_poa(mut self, poa: ::models::Poa) -> Appointment {
    self.poa = Some(poa);
    self
  }

  pub fn poa(&self) -> Option<&::models::Poa> {
    self.poa.as_ref()
  }

  pub fn reset_poa(&mut self) {
    self.poa = None;
  }

}



