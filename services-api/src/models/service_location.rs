/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ServiceLocation : Information about the location of the service job.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServiceLocation {
  /// The location of the service job.
  #[serde(rename = "serviceLocationType")]
  service_location_type: Option<String>,
  /// The shipping address for the service job.
  #[serde(rename = "address")]
  address: Option<::models::Address>
}

impl ServiceLocation {
  /// Information about the location of the service job.
  pub fn new() -> ServiceLocation {
    ServiceLocation {
      service_location_type: None,
      address: None
    }
  }

  pub fn set_service_location_type(&mut self, service_location_type: String) {
    self.service_location_type = Some(service_location_type);
  }

  pub fn with_service_location_type(mut self, service_location_type: String) -> ServiceLocation {
    self.service_location_type = Some(service_location_type);
    self
  }

  pub fn service_location_type(&self) -> Option<&String> {
    self.service_location_type.as_ref()
  }

  pub fn reset_service_location_type(&mut self) {
    self.service_location_type = None;
  }

  pub fn set_address(&mut self, address: ::models::Address) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: ::models::Address) -> ServiceLocation {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&::models::Address> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

}



