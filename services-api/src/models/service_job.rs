/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ServiceJob : The job details of a service.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ServiceJob {
  /// The date and time of the creation of the job, in ISO 8601 format.
  #[serde(rename = "createTime")]
  create_time: Option<String>,
  /// The service job identifier.
  #[serde(rename = "serviceJobId")]
  service_job_id: Option<::models::ServiceJobId>,
  /// The status of the service job.
  #[serde(rename = "serviceJobStatus")]
  service_job_status: Option<String>,
  /// The scope of work for the order.
  #[serde(rename = "scopeOfWork")]
  scope_of_work: Option<::models::ScopeOfWork>,
  /// Information about the seller of the service job.
  #[serde(rename = "seller")]
  seller: Option<::models::Seller>,
  /// Information about the service job provider.
  #[serde(rename = "serviceJobProvider")]
  service_job_provider: Option<::models::ServiceJobProvider>,
  /// A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order.
  #[serde(rename = "preferredAppointmentTimes")]
  preferred_appointment_times: Option<Vec<::models::AppointmentTime>>,
  /// A list of appointments.
  #[serde(rename = "appointments")]
  appointments: Option<Vec<::models::Appointment>>,
  /// The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
  #[serde(rename = "serviceOrderId")]
  service_order_id: Option<::models::OrderId>,
  /// The marketplace identifier.
  #[serde(rename = "marketplaceId")]
  marketplace_id: Option<String>,
  /// Information about the buyer.
  #[serde(rename = "buyer")]
  buyer: Option<::models::Buyer>,
  /// A list of items associated with the service job.
  #[serde(rename = "associatedItems")]
  associated_items: Option<Vec<::models::AssociatedItem>>,
  /// Information about the location of the service job.
  #[serde(rename = "serviceLocation")]
  service_location: Option<::models::ServiceLocation>
}

impl ServiceJob {
  /// The job details of a service.
  pub fn new() -> ServiceJob {
    ServiceJob {
      create_time: None,
      service_job_id: None,
      service_job_status: None,
      scope_of_work: None,
      seller: None,
      service_job_provider: None,
      preferred_appointment_times: None,
      appointments: None,
      service_order_id: None,
      marketplace_id: None,
      buyer: None,
      associated_items: None,
      service_location: None
    }
  }

  pub fn set_create_time(&mut self, create_time: String) {
    self.create_time = Some(create_time);
  }

  pub fn with_create_time(mut self, create_time: String) -> ServiceJob {
    self.create_time = Some(create_time);
    self
  }

  pub fn create_time(&self) -> Option<&String> {
    self.create_time.as_ref()
  }

  pub fn reset_create_time(&mut self) {
    self.create_time = None;
  }

  pub fn set_service_job_id(&mut self, service_job_id: ::models::ServiceJobId) {
    self.service_job_id = Some(service_job_id);
  }

  pub fn with_service_job_id(mut self, service_job_id: ::models::ServiceJobId) -> ServiceJob {
    self.service_job_id = Some(service_job_id);
    self
  }

  pub fn service_job_id(&self) -> Option<&::models::ServiceJobId> {
    self.service_job_id.as_ref()
  }

  pub fn reset_service_job_id(&mut self) {
    self.service_job_id = None;
  }

  pub fn set_service_job_status(&mut self, service_job_status: String) {
    self.service_job_status = Some(service_job_status);
  }

  pub fn with_service_job_status(mut self, service_job_status: String) -> ServiceJob {
    self.service_job_status = Some(service_job_status);
    self
  }

  pub fn service_job_status(&self) -> Option<&String> {
    self.service_job_status.as_ref()
  }

  pub fn reset_service_job_status(&mut self) {
    self.service_job_status = None;
  }

  pub fn set_scope_of_work(&mut self, scope_of_work: ::models::ScopeOfWork) {
    self.scope_of_work = Some(scope_of_work);
  }

  pub fn with_scope_of_work(mut self, scope_of_work: ::models::ScopeOfWork) -> ServiceJob {
    self.scope_of_work = Some(scope_of_work);
    self
  }

  pub fn scope_of_work(&self) -> Option<&::models::ScopeOfWork> {
    self.scope_of_work.as_ref()
  }

  pub fn reset_scope_of_work(&mut self) {
    self.scope_of_work = None;
  }

  pub fn set_seller(&mut self, seller: ::models::Seller) {
    self.seller = Some(seller);
  }

  pub fn with_seller(mut self, seller: ::models::Seller) -> ServiceJob {
    self.seller = Some(seller);
    self
  }

  pub fn seller(&self) -> Option<&::models::Seller> {
    self.seller.as_ref()
  }

  pub fn reset_seller(&mut self) {
    self.seller = None;
  }

  pub fn set_service_job_provider(&mut self, service_job_provider: ::models::ServiceJobProvider) {
    self.service_job_provider = Some(service_job_provider);
  }

  pub fn with_service_job_provider(mut self, service_job_provider: ::models::ServiceJobProvider) -> ServiceJob {
    self.service_job_provider = Some(service_job_provider);
    self
  }

  pub fn service_job_provider(&self) -> Option<&::models::ServiceJobProvider> {
    self.service_job_provider.as_ref()
  }

  pub fn reset_service_job_provider(&mut self) {
    self.service_job_provider = None;
  }

  pub fn set_preferred_appointment_times(&mut self, preferred_appointment_times: Vec<::models::AppointmentTime>) {
    self.preferred_appointment_times = Some(preferred_appointment_times);
  }

  pub fn with_preferred_appointment_times(mut self, preferred_appointment_times: Vec<::models::AppointmentTime>) -> ServiceJob {
    self.preferred_appointment_times = Some(preferred_appointment_times);
    self
  }

  pub fn preferred_appointment_times(&self) -> Option<&Vec<::models::AppointmentTime>> {
    self.preferred_appointment_times.as_ref()
  }

  pub fn reset_preferred_appointment_times(&mut self) {
    self.preferred_appointment_times = None;
  }

  pub fn set_appointments(&mut self, appointments: Vec<::models::Appointment>) {
    self.appointments = Some(appointments);
  }

  pub fn with_appointments(mut self, appointments: Vec<::models::Appointment>) -> ServiceJob {
    self.appointments = Some(appointments);
    self
  }

  pub fn appointments(&self) -> Option<&Vec<::models::Appointment>> {
    self.appointments.as_ref()
  }

  pub fn reset_appointments(&mut self) {
    self.appointments = None;
  }

  pub fn set_service_order_id(&mut self, service_order_id: ::models::OrderId) {
    self.service_order_id = Some(service_order_id);
  }

  pub fn with_service_order_id(mut self, service_order_id: ::models::OrderId) -> ServiceJob {
    self.service_order_id = Some(service_order_id);
    self
  }

  pub fn service_order_id(&self) -> Option<&::models::OrderId> {
    self.service_order_id.as_ref()
  }

  pub fn reset_service_order_id(&mut self) {
    self.service_order_id = None;
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = Some(marketplace_id);
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> ServiceJob {
    self.marketplace_id = Some(marketplace_id);
    self
  }

  pub fn marketplace_id(&self) -> Option<&String> {
    self.marketplace_id.as_ref()
  }

  pub fn reset_marketplace_id(&mut self) {
    self.marketplace_id = None;
  }

  pub fn set_buyer(&mut self, buyer: ::models::Buyer) {
    self.buyer = Some(buyer);
  }

  pub fn with_buyer(mut self, buyer: ::models::Buyer) -> ServiceJob {
    self.buyer = Some(buyer);
    self
  }

  pub fn buyer(&self) -> Option<&::models::Buyer> {
    self.buyer.as_ref()
  }

  pub fn reset_buyer(&mut self) {
    self.buyer = None;
  }

  pub fn set_associated_items(&mut self, associated_items: Vec<::models::AssociatedItem>) {
    self.associated_items = Some(associated_items);
  }

  pub fn with_associated_items(mut self, associated_items: Vec<::models::AssociatedItem>) -> ServiceJob {
    self.associated_items = Some(associated_items);
    self
  }

  pub fn associated_items(&self) -> Option<&Vec<::models::AssociatedItem>> {
    self.associated_items.as_ref()
  }

  pub fn reset_associated_items(&mut self) {
    self.associated_items = None;
  }

  pub fn set_service_location(&mut self, service_location: ::models::ServiceLocation) {
    self.service_location = Some(service_location);
  }

  pub fn with_service_location(mut self, service_location: ::models::ServiceLocation) -> ServiceJob {
    self.service_location = Some(service_location);
    self
  }

  pub fn service_location(&self) -> Option<&::models::ServiceLocation> {
    self.service_location.as_ref()
  }

  pub fn reset_service_location(&mut self) {
    self.service_location = None;
  }

}



