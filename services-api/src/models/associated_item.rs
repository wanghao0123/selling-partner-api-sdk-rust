/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AssociatedItem : Information about an item associated with the service job.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AssociatedItem {
  /// The Amazon Standard Identification Number (ASIN) of the item.
  #[serde(rename = "asin")]
  asin: Option<String>,
  /// The title of the item.
  #[serde(rename = "title")]
  title: Option<String>,
  /// The total number of items included in the order.
  #[serde(rename = "quantity")]
  quantity: Option<i32>,
  /// The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format.
  #[serde(rename = "orderId")]
  order_id: Option<::models::OrderId>,
  /// The status of the item.
  #[serde(rename = "itemStatus")]
  item_status: Option<String>,
  /// The brand name of the item.
  #[serde(rename = "brandName")]
  brand_name: Option<String>,
  /// Delivery information for the item.
  #[serde(rename = "itemDelivery")]
  item_delivery: Option<::models::ItemDelivery>
}

impl AssociatedItem {
  /// Information about an item associated with the service job.
  pub fn new() -> AssociatedItem {
    AssociatedItem {
      asin: None,
      title: None,
      quantity: None,
      order_id: None,
      item_status: None,
      brand_name: None,
      item_delivery: None
    }
  }

  pub fn set_asin(&mut self, asin: String) {
    self.asin = Some(asin);
  }

  pub fn with_asin(mut self, asin: String) -> AssociatedItem {
    self.asin = Some(asin);
    self
  }

  pub fn asin(&self) -> Option<&String> {
    self.asin.as_ref()
  }

  pub fn reset_asin(&mut self) {
    self.asin = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> AssociatedItem {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_quantity(&mut self, quantity: i32) {
    self.quantity = Some(quantity);
  }

  pub fn with_quantity(mut self, quantity: i32) -> AssociatedItem {
    self.quantity = Some(quantity);
    self
  }

  pub fn quantity(&self) -> Option<&i32> {
    self.quantity.as_ref()
  }

  pub fn reset_quantity(&mut self) {
    self.quantity = None;
  }

  pub fn set_order_id(&mut self, order_id: ::models::OrderId) {
    self.order_id = Some(order_id);
  }

  pub fn with_order_id(mut self, order_id: ::models::OrderId) -> AssociatedItem {
    self.order_id = Some(order_id);
    self
  }

  pub fn order_id(&self) -> Option<&::models::OrderId> {
    self.order_id.as_ref()
  }

  pub fn reset_order_id(&mut self) {
    self.order_id = None;
  }

  pub fn set_item_status(&mut self, item_status: String) {
    self.item_status = Some(item_status);
  }

  pub fn with_item_status(mut self, item_status: String) -> AssociatedItem {
    self.item_status = Some(item_status);
    self
  }

  pub fn item_status(&self) -> Option<&String> {
    self.item_status.as_ref()
  }

  pub fn reset_item_status(&mut self) {
    self.item_status = None;
  }

  pub fn set_brand_name(&mut self, brand_name: String) {
    self.brand_name = Some(brand_name);
  }

  pub fn with_brand_name(mut self, brand_name: String) -> AssociatedItem {
    self.brand_name = Some(brand_name);
    self
  }

  pub fn brand_name(&self) -> Option<&String> {
    self.brand_name.as_ref()
  }

  pub fn reset_brand_name(&mut self) {
    self.brand_name = None;
  }

  pub fn set_item_delivery(&mut self, item_delivery: ::models::ItemDelivery) {
    self.item_delivery = Some(item_delivery);
  }

  pub fn with_item_delivery(mut self, item_delivery: ::models::ItemDelivery) -> AssociatedItem {
    self.item_delivery = Some(item_delivery);
    self
  }

  pub fn item_delivery(&self) -> Option<&::models::ItemDelivery> {
    self.item_delivery.as_ref()
  }

  pub fn reset_item_delivery(&mut self) {
    self.item_delivery = None;
  }

}



