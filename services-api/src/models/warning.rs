/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Warning : Warning returned when the request is successful but execution have some important callouts on basis of which API clients should take defined actions.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Warning {
  /// An warning code that identifies the type of warning that occurred.
  #[serde(rename = "code")]
  code: String,
  /// A message that describes the warning condition in a human-readable form.
  #[serde(rename = "message")]
  message: String,
  /// Additional details that can help the caller understand or address the warning.
  #[serde(rename = "details")]
  details: Option<String>
}

impl Warning {
  /// Warning returned when the request is successful but execution have some important callouts on basis of which API clients should take defined actions.
  pub fn new(code: String, message: String) -> Warning {
    Warning {
      code: code,
      message: message,
      details: None
    }
  }

  pub fn set_code(&mut self, code: String) {
    self.code = code;
  }

  pub fn with_code(mut self, code: String) -> Warning {
    self.code = code;
    self
  }

  pub fn code(&self) -> &String {
    &self.code
  }


  pub fn set_message(&mut self, message: String) {
    self.message = message;
  }

  pub fn with_message(mut self, message: String) -> Warning {
    self.message = message;
    self
  }

  pub fn message(&self) -> &String {
    &self.message
  }


  pub fn set_details(&mut self, details: String) {
    self.details = Some(details);
  }

  pub fn with_details(mut self, details: String) -> Warning {
    self.details = Some(details);
    self
  }

  pub fn details(&self) -> Option<&String> {
    self.details.as_ref()
  }

  pub fn reset_details(&mut self) {
    self.details = None;
  }

}



