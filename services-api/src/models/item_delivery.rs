/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ItemDelivery : Delivery information for the item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ItemDelivery {
  /// The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.
  #[serde(rename = "estimatedDeliveryDate")]
  estimated_delivery_date: Option<String>,
  /// Promised delivery information for the item.
  #[serde(rename = "itemDeliveryPromise")]
  item_delivery_promise: Option<::models::ItemDeliveryPromise>
}

impl ItemDelivery {
  /// Delivery information for the item.
  pub fn new() -> ItemDelivery {
    ItemDelivery {
      estimated_delivery_date: None,
      item_delivery_promise: None
    }
  }

  pub fn set_estimated_delivery_date(&mut self, estimated_delivery_date: String) {
    self.estimated_delivery_date = Some(estimated_delivery_date);
  }

  pub fn with_estimated_delivery_date(mut self, estimated_delivery_date: String) -> ItemDelivery {
    self.estimated_delivery_date = Some(estimated_delivery_date);
    self
  }

  pub fn estimated_delivery_date(&self) -> Option<&String> {
    self.estimated_delivery_date.as_ref()
  }

  pub fn reset_estimated_delivery_date(&mut self) {
    self.estimated_delivery_date = None;
  }

  pub fn set_item_delivery_promise(&mut self, item_delivery_promise: ::models::ItemDeliveryPromise) {
    self.item_delivery_promise = Some(item_delivery_promise);
  }

  pub fn with_item_delivery_promise(mut self, item_delivery_promise: ::models::ItemDeliveryPromise) -> ItemDelivery {
    self.item_delivery_promise = Some(item_delivery_promise);
    self
  }

  pub fn item_delivery_promise(&self) -> Option<&::models::ItemDeliveryPromise> {
    self.item_delivery_promise.as_ref()
  }

  pub fn reset_item_delivery_promise(&mut self) {
    self.item_delivery_promise = None;
  }

}



