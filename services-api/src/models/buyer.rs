/* 
 * Selling Partner API for Services
 *
 * With the Services API, you can build applications that help service providers get and modify their service orders.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Buyer : Information about the buyer.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Buyer {
  /// The identifier of the buyer.
  #[serde(rename = "buyerId")]
  buyer_id: Option<String>,
  /// The name of the buyer.
  #[serde(rename = "name")]
  name: Option<String>,
  /// The phone number of the buyer.
  #[serde(rename = "phone")]
  phone: Option<String>,
  /// When true, the service is for an Amazon Prime buyer.
  #[serde(rename = "isPrimeMember")]
  is_prime_member: Option<bool>
}

impl Buyer {
  /// Information about the buyer.
  pub fn new() -> Buyer {
    Buyer {
      buyer_id: None,
      name: None,
      phone: None,
      is_prime_member: None
    }
  }

  pub fn set_buyer_id(&mut self, buyer_id: String) {
    self.buyer_id = Some(buyer_id);
  }

  pub fn with_buyer_id(mut self, buyer_id: String) -> Buyer {
    self.buyer_id = Some(buyer_id);
    self
  }

  pub fn buyer_id(&self) -> Option<&String> {
    self.buyer_id.as_ref()
  }

  pub fn reset_buyer_id(&mut self) {
    self.buyer_id = None;
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Buyer {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_phone(&mut self, phone: String) {
    self.phone = Some(phone);
  }

  pub fn with_phone(mut self, phone: String) -> Buyer {
    self.phone = Some(phone);
    self
  }

  pub fn phone(&self) -> Option<&String> {
    self.phone.as_ref()
  }

  pub fn reset_phone(&mut self) {
    self.phone = None;
  }

  pub fn set_is_prime_member(&mut self, is_prime_member: bool) {
    self.is_prime_member = Some(is_prime_member);
  }

  pub fn with_is_prime_member(mut self, is_prime_member: bool) -> Buyer {
    self.is_prime_member = Some(is_prime_member);
    self
  }

  pub fn is_prime_member(&self) -> Option<&bool> {
    self.is_prime_member.as_ref()
  }

  pub fn reset_is_prime_member(&mut self) {
    self.is_prime_member = None;
  }

}



