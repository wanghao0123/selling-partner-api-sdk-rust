/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ContentModule : An A+ Content module. An A+ Content document is composed of content modules. The contentModuleType property selects which content module types to use.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContentModule {
  #[serde(rename = "contentModuleType")]
  content_module_type: ::models::ContentModuleType,
  #[serde(rename = "standardCompanyLogo")]
  standard_company_logo: Option<::models::StandardCompanyLogoModule>,
  #[serde(rename = "standardComparisonTable")]
  standard_comparison_table: Option<::models::StandardComparisonTableModule>,
  #[serde(rename = "standardFourImageText")]
  standard_four_image_text: Option<::models::StandardFourImageTextModule>,
  #[serde(rename = "standardFourImageTextQuadrant")]
  standard_four_image_text_quadrant: Option<::models::StandardFourImageTextQuadrantModule>,
  #[serde(rename = "standardHeaderImageText")]
  standard_header_image_text: Option<::models::StandardHeaderImageTextModule>,
  #[serde(rename = "standardImageSidebar")]
  standard_image_sidebar: Option<::models::StandardImageSidebarModule>,
  #[serde(rename = "standardImageTextOverlay")]
  standard_image_text_overlay: Option<::models::StandardImageTextOverlayModule>,
  #[serde(rename = "standardMultipleImageText")]
  standard_multiple_image_text: Option<::models::StandardMultipleImageTextModule>,
  #[serde(rename = "standardProductDescription")]
  standard_product_description: Option<::models::StandardProductDescriptionModule>,
  #[serde(rename = "standardSingleImageHighlights")]
  standard_single_image_highlights: Option<::models::StandardSingleImageHighlightsModule>,
  #[serde(rename = "standardSingleImageSpecsDetail")]
  standard_single_image_specs_detail: Option<::models::StandardSingleImageSpecsDetailModule>,
  #[serde(rename = "standardSingleSideImage")]
  standard_single_side_image: Option<::models::StandardSingleSideImageModule>,
  #[serde(rename = "standardTechSpecs")]
  standard_tech_specs: Option<::models::StandardTechSpecsModule>,
  #[serde(rename = "standardText")]
  standard_text: Option<::models::StandardTextModule>,
  #[serde(rename = "standardThreeImageText")]
  standard_three_image_text: Option<::models::StandardThreeImageTextModule>
}

impl ContentModule {
  /// An A+ Content module. An A+ Content document is composed of content modules. The contentModuleType property selects which content module types to use.
  pub fn new(content_module_type: ::models::ContentModuleType) -> ContentModule {
    ContentModule {
      content_module_type: content_module_type,
      standard_company_logo: None,
      standard_comparison_table: None,
      standard_four_image_text: None,
      standard_four_image_text_quadrant: None,
      standard_header_image_text: None,
      standard_image_sidebar: None,
      standard_image_text_overlay: None,
      standard_multiple_image_text: None,
      standard_product_description: None,
      standard_single_image_highlights: None,
      standard_single_image_specs_detail: None,
      standard_single_side_image: None,
      standard_tech_specs: None,
      standard_text: None,
      standard_three_image_text: None
    }
  }

  pub fn set_content_module_type(&mut self, content_module_type: ::models::ContentModuleType) {
    self.content_module_type = content_module_type;
  }

  pub fn with_content_module_type(mut self, content_module_type: ::models::ContentModuleType) -> ContentModule {
    self.content_module_type = content_module_type;
    self
  }

  pub fn content_module_type(&self) -> &::models::ContentModuleType {
    &self.content_module_type
  }


  pub fn set_standard_company_logo(&mut self, standard_company_logo: ::models::StandardCompanyLogoModule) {
    self.standard_company_logo = Some(standard_company_logo);
  }

  pub fn with_standard_company_logo(mut self, standard_company_logo: ::models::StandardCompanyLogoModule) -> ContentModule {
    self.standard_company_logo = Some(standard_company_logo);
    self
  }

  pub fn standard_company_logo(&self) -> Option<&::models::StandardCompanyLogoModule> {
    self.standard_company_logo.as_ref()
  }

  pub fn reset_standard_company_logo(&mut self) {
    self.standard_company_logo = None;
  }

  pub fn set_standard_comparison_table(&mut self, standard_comparison_table: ::models::StandardComparisonTableModule) {
    self.standard_comparison_table = Some(standard_comparison_table);
  }

  pub fn with_standard_comparison_table(mut self, standard_comparison_table: ::models::StandardComparisonTableModule) -> ContentModule {
    self.standard_comparison_table = Some(standard_comparison_table);
    self
  }

  pub fn standard_comparison_table(&self) -> Option<&::models::StandardComparisonTableModule> {
    self.standard_comparison_table.as_ref()
  }

  pub fn reset_standard_comparison_table(&mut self) {
    self.standard_comparison_table = None;
  }

  pub fn set_standard_four_image_text(&mut self, standard_four_image_text: ::models::StandardFourImageTextModule) {
    self.standard_four_image_text = Some(standard_four_image_text);
  }

  pub fn with_standard_four_image_text(mut self, standard_four_image_text: ::models::StandardFourImageTextModule) -> ContentModule {
    self.standard_four_image_text = Some(standard_four_image_text);
    self
  }

  pub fn standard_four_image_text(&self) -> Option<&::models::StandardFourImageTextModule> {
    self.standard_four_image_text.as_ref()
  }

  pub fn reset_standard_four_image_text(&mut self) {
    self.standard_four_image_text = None;
  }

  pub fn set_standard_four_image_text_quadrant(&mut self, standard_four_image_text_quadrant: ::models::StandardFourImageTextQuadrantModule) {
    self.standard_four_image_text_quadrant = Some(standard_four_image_text_quadrant);
  }

  pub fn with_standard_four_image_text_quadrant(mut self, standard_four_image_text_quadrant: ::models::StandardFourImageTextQuadrantModule) -> ContentModule {
    self.standard_four_image_text_quadrant = Some(standard_four_image_text_quadrant);
    self
  }

  pub fn standard_four_image_text_quadrant(&self) -> Option<&::models::StandardFourImageTextQuadrantModule> {
    self.standard_four_image_text_quadrant.as_ref()
  }

  pub fn reset_standard_four_image_text_quadrant(&mut self) {
    self.standard_four_image_text_quadrant = None;
  }

  pub fn set_standard_header_image_text(&mut self, standard_header_image_text: ::models::StandardHeaderImageTextModule) {
    self.standard_header_image_text = Some(standard_header_image_text);
  }

  pub fn with_standard_header_image_text(mut self, standard_header_image_text: ::models::StandardHeaderImageTextModule) -> ContentModule {
    self.standard_header_image_text = Some(standard_header_image_text);
    self
  }

  pub fn standard_header_image_text(&self) -> Option<&::models::StandardHeaderImageTextModule> {
    self.standard_header_image_text.as_ref()
  }

  pub fn reset_standard_header_image_text(&mut self) {
    self.standard_header_image_text = None;
  }

  pub fn set_standard_image_sidebar(&mut self, standard_image_sidebar: ::models::StandardImageSidebarModule) {
    self.standard_image_sidebar = Some(standard_image_sidebar);
  }

  pub fn with_standard_image_sidebar(mut self, standard_image_sidebar: ::models::StandardImageSidebarModule) -> ContentModule {
    self.standard_image_sidebar = Some(standard_image_sidebar);
    self
  }

  pub fn standard_image_sidebar(&self) -> Option<&::models::StandardImageSidebarModule> {
    self.standard_image_sidebar.as_ref()
  }

  pub fn reset_standard_image_sidebar(&mut self) {
    self.standard_image_sidebar = None;
  }

  pub fn set_standard_image_text_overlay(&mut self, standard_image_text_overlay: ::models::StandardImageTextOverlayModule) {
    self.standard_image_text_overlay = Some(standard_image_text_overlay);
  }

  pub fn with_standard_image_text_overlay(mut self, standard_image_text_overlay: ::models::StandardImageTextOverlayModule) -> ContentModule {
    self.standard_image_text_overlay = Some(standard_image_text_overlay);
    self
  }

  pub fn standard_image_text_overlay(&self) -> Option<&::models::StandardImageTextOverlayModule> {
    self.standard_image_text_overlay.as_ref()
  }

  pub fn reset_standard_image_text_overlay(&mut self) {
    self.standard_image_text_overlay = None;
  }

  pub fn set_standard_multiple_image_text(&mut self, standard_multiple_image_text: ::models::StandardMultipleImageTextModule) {
    self.standard_multiple_image_text = Some(standard_multiple_image_text);
  }

  pub fn with_standard_multiple_image_text(mut self, standard_multiple_image_text: ::models::StandardMultipleImageTextModule) -> ContentModule {
    self.standard_multiple_image_text = Some(standard_multiple_image_text);
    self
  }

  pub fn standard_multiple_image_text(&self) -> Option<&::models::StandardMultipleImageTextModule> {
    self.standard_multiple_image_text.as_ref()
  }

  pub fn reset_standard_multiple_image_text(&mut self) {
    self.standard_multiple_image_text = None;
  }

  pub fn set_standard_product_description(&mut self, standard_product_description: ::models::StandardProductDescriptionModule) {
    self.standard_product_description = Some(standard_product_description);
  }

  pub fn with_standard_product_description(mut self, standard_product_description: ::models::StandardProductDescriptionModule) -> ContentModule {
    self.standard_product_description = Some(standard_product_description);
    self
  }

  pub fn standard_product_description(&self) -> Option<&::models::StandardProductDescriptionModule> {
    self.standard_product_description.as_ref()
  }

  pub fn reset_standard_product_description(&mut self) {
    self.standard_product_description = None;
  }

  pub fn set_standard_single_image_highlights(&mut self, standard_single_image_highlights: ::models::StandardSingleImageHighlightsModule) {
    self.standard_single_image_highlights = Some(standard_single_image_highlights);
  }

  pub fn with_standard_single_image_highlights(mut self, standard_single_image_highlights: ::models::StandardSingleImageHighlightsModule) -> ContentModule {
    self.standard_single_image_highlights = Some(standard_single_image_highlights);
    self
  }

  pub fn standard_single_image_highlights(&self) -> Option<&::models::StandardSingleImageHighlightsModule> {
    self.standard_single_image_highlights.as_ref()
  }

  pub fn reset_standard_single_image_highlights(&mut self) {
    self.standard_single_image_highlights = None;
  }

  pub fn set_standard_single_image_specs_detail(&mut self, standard_single_image_specs_detail: ::models::StandardSingleImageSpecsDetailModule) {
    self.standard_single_image_specs_detail = Some(standard_single_image_specs_detail);
  }

  pub fn with_standard_single_image_specs_detail(mut self, standard_single_image_specs_detail: ::models::StandardSingleImageSpecsDetailModule) -> ContentModule {
    self.standard_single_image_specs_detail = Some(standard_single_image_specs_detail);
    self
  }

  pub fn standard_single_image_specs_detail(&self) -> Option<&::models::StandardSingleImageSpecsDetailModule> {
    self.standard_single_image_specs_detail.as_ref()
  }

  pub fn reset_standard_single_image_specs_detail(&mut self) {
    self.standard_single_image_specs_detail = None;
  }

  pub fn set_standard_single_side_image(&mut self, standard_single_side_image: ::models::StandardSingleSideImageModule) {
    self.standard_single_side_image = Some(standard_single_side_image);
  }

  pub fn with_standard_single_side_image(mut self, standard_single_side_image: ::models::StandardSingleSideImageModule) -> ContentModule {
    self.standard_single_side_image = Some(standard_single_side_image);
    self
  }

  pub fn standard_single_side_image(&self) -> Option<&::models::StandardSingleSideImageModule> {
    self.standard_single_side_image.as_ref()
  }

  pub fn reset_standard_single_side_image(&mut self) {
    self.standard_single_side_image = None;
  }

  pub fn set_standard_tech_specs(&mut self, standard_tech_specs: ::models::StandardTechSpecsModule) {
    self.standard_tech_specs = Some(standard_tech_specs);
  }

  pub fn with_standard_tech_specs(mut self, standard_tech_specs: ::models::StandardTechSpecsModule) -> ContentModule {
    self.standard_tech_specs = Some(standard_tech_specs);
    self
  }

  pub fn standard_tech_specs(&self) -> Option<&::models::StandardTechSpecsModule> {
    self.standard_tech_specs.as_ref()
  }

  pub fn reset_standard_tech_specs(&mut self) {
    self.standard_tech_specs = None;
  }

  pub fn set_standard_text(&mut self, standard_text: ::models::StandardTextModule) {
    self.standard_text = Some(standard_text);
  }

  pub fn with_standard_text(mut self, standard_text: ::models::StandardTextModule) -> ContentModule {
    self.standard_text = Some(standard_text);
    self
  }

  pub fn standard_text(&self) -> Option<&::models::StandardTextModule> {
    self.standard_text.as_ref()
  }

  pub fn reset_standard_text(&mut self) {
    self.standard_text = None;
  }

  pub fn set_standard_three_image_text(&mut self, standard_three_image_text: ::models::StandardThreeImageTextModule) {
    self.standard_three_image_text = Some(standard_three_image_text);
  }

  pub fn with_standard_three_image_text(mut self, standard_three_image_text: ::models::StandardThreeImageTextModule) -> ContentModule {
    self.standard_three_image_text = Some(standard_three_image_text);
    self
  }

  pub fn standard_three_image_text(&self) -> Option<&::models::StandardThreeImageTextModule> {
    self.standard_three_image_text.as_ref()
  }

  pub fn reset_standard_three_image_text(&mut self) {
    self.standard_three_image_text = None;
  }

}



