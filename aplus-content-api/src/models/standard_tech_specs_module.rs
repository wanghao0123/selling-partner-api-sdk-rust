/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// StandardTechSpecsModule : The standard table of technical feature names and definitions.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StandardTechSpecsModule {
  #[serde(rename = "headline")]
  headline: Option<::models::TextComponent>,
  /// The specification list.
  #[serde(rename = "specificationList")]
  specification_list: Vec<::models::StandardTextPairBlock>,
  /// The number of tables to present. Features are evenly divided between the tables.
  #[serde(rename = "tableCount")]
  table_count: Option<i32>
}

impl StandardTechSpecsModule {
  /// The standard table of technical feature names and definitions.
  pub fn new(specification_list: Vec<::models::StandardTextPairBlock>) -> StandardTechSpecsModule {
    StandardTechSpecsModule {
      headline: None,
      specification_list: specification_list,
      table_count: None
    }
  }

  pub fn set_headline(&mut self, headline: ::models::TextComponent) {
    self.headline = Some(headline);
  }

  pub fn with_headline(mut self, headline: ::models::TextComponent) -> StandardTechSpecsModule {
    self.headline = Some(headline);
    self
  }

  pub fn headline(&self) -> Option<&::models::TextComponent> {
    self.headline.as_ref()
  }

  pub fn reset_headline(&mut self) {
    self.headline = None;
  }

  pub fn set_specification_list(&mut self, specification_list: Vec<::models::StandardTextPairBlock>) {
    self.specification_list = specification_list;
  }

  pub fn with_specification_list(mut self, specification_list: Vec<::models::StandardTextPairBlock>) -> StandardTechSpecsModule {
    self.specification_list = specification_list;
    self
  }

  pub fn specification_list(&self) -> &Vec<::models::StandardTextPairBlock> {
    &self.specification_list
  }


  pub fn set_table_count(&mut self, table_count: i32) {
    self.table_count = Some(table_count);
  }

  pub fn with_table_count(mut self, table_count: i32) -> StandardTechSpecsModule {
    self.table_count = Some(table_count);
    self
  }

  pub fn table_count(&self) -> Option<&i32> {
    self.table_count.as_ref()
  }

  pub fn reset_table_count(&mut self) {
    self.table_count = None;
  }

}



