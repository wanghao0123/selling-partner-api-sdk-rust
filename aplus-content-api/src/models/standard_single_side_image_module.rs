/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// StandardSingleSideImageModule : A standard headline and body text with an image on the side.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StandardSingleSideImageModule {
  #[serde(rename = "imagePositionType")]
  image_position_type: ::models::PositionType,
  #[serde(rename = "block")]
  block: Option<::models::StandardImageTextBlock>
}

impl StandardSingleSideImageModule {
  /// A standard headline and body text with an image on the side.
  pub fn new(image_position_type: ::models::PositionType) -> StandardSingleSideImageModule {
    StandardSingleSideImageModule {
      image_position_type: image_position_type,
      block: None
    }
  }

  pub fn set_image_position_type(&mut self, image_position_type: ::models::PositionType) {
    self.image_position_type = image_position_type;
  }

  pub fn with_image_position_type(mut self, image_position_type: ::models::PositionType) -> StandardSingleSideImageModule {
    self.image_position_type = image_position_type;
    self
  }

  pub fn image_position_type(&self) -> &::models::PositionType {
    &self.image_position_type
  }


  pub fn set_block(&mut self, block: ::models::StandardImageTextBlock) {
    self.block = Some(block);
  }

  pub fn with_block(mut self, block: ::models::StandardImageTextBlock) -> StandardSingleSideImageModule {
    self.block = Some(block);
    self
  }

  pub fn block(&self) -> Option<&::models::StandardImageTextBlock> {
    self.block.as_ref()
  }

  pub fn reset_block(&mut self) {
    self.block = None;
  }

}



