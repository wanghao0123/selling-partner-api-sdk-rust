/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// StandardComparisonProductBlock : The A+ Content standard comparison product block.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StandardComparisonProductBlock {
  /// The rank or index of this comparison product block within the module. Different blocks cannot occupy the same position within a single module.
  #[serde(rename = "position")]
  position: i32,
  #[serde(rename = "image")]
  image: Option<::models::ImageComponent>,
  /// The comparison product title.
  #[serde(rename = "title")]
  title: Option<String>,
  #[serde(rename = "asin")]
  asin: Option<::models::Asin>,
  /// Determines whether this block of content is visually highlighted.
  #[serde(rename = "highlight")]
  highlight: Option<bool>,
  /// Comparison metrics for the product.
  #[serde(rename = "metrics")]
  metrics: Option<Vec<::models::PlainTextItem>>
}

impl StandardComparisonProductBlock {
  /// The A+ Content standard comparison product block.
  pub fn new(position: i32) -> StandardComparisonProductBlock {
    StandardComparisonProductBlock {
      position: position,
      image: None,
      title: None,
      asin: None,
      highlight: None,
      metrics: None
    }
  }

  pub fn set_position(&mut self, position: i32) {
    self.position = position;
  }

  pub fn with_position(mut self, position: i32) -> StandardComparisonProductBlock {
    self.position = position;
    self
  }

  pub fn position(&self) -> &i32 {
    &self.position
  }


  pub fn set_image(&mut self, image: ::models::ImageComponent) {
    self.image = Some(image);
  }

  pub fn with_image(mut self, image: ::models::ImageComponent) -> StandardComparisonProductBlock {
    self.image = Some(image);
    self
  }

  pub fn image(&self) -> Option<&::models::ImageComponent> {
    self.image.as_ref()
  }

  pub fn reset_image(&mut self) {
    self.image = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> StandardComparisonProductBlock {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_asin(&mut self, asin: ::models::Asin) {
    self.asin = Some(asin);
  }

  pub fn with_asin(mut self, asin: ::models::Asin) -> StandardComparisonProductBlock {
    self.asin = Some(asin);
    self
  }

  pub fn asin(&self) -> Option<&::models::Asin> {
    self.asin.as_ref()
  }

  pub fn reset_asin(&mut self) {
    self.asin = None;
  }

  pub fn set_highlight(&mut self, highlight: bool) {
    self.highlight = Some(highlight);
  }

  pub fn with_highlight(mut self, highlight: bool) -> StandardComparisonProductBlock {
    self.highlight = Some(highlight);
    self
  }

  pub fn highlight(&self) -> Option<&bool> {
    self.highlight.as_ref()
  }

  pub fn reset_highlight(&mut self) {
    self.highlight = None;
  }

  pub fn set_metrics(&mut self, metrics: Vec<::models::PlainTextItem>) {
    self.metrics = Some(metrics);
  }

  pub fn with_metrics(mut self, metrics: Vec<::models::PlainTextItem>) -> StandardComparisonProductBlock {
    self.metrics = Some(metrics);
    self
  }

  pub fn metrics(&self) -> Option<&Vec<::models::PlainTextItem>> {
    self.metrics.as_ref()
  }

  pub fn reset_metrics(&mut self) {
    self.metrics = None;
  }

}



