/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// StandardComparisonTableModule : The standard product comparison table.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StandardComparisonTableModule {
  #[serde(rename = "productColumns")]
  product_columns: Option<Vec<::models::StandardComparisonProductBlock>>,
  #[serde(rename = "metricRowLabels")]
  metric_row_labels: Option<Vec<::models::PlainTextItem>>
}

impl StandardComparisonTableModule {
  /// The standard product comparison table.
  pub fn new() -> StandardComparisonTableModule {
    StandardComparisonTableModule {
      product_columns: None,
      metric_row_labels: None
    }
  }

  pub fn set_product_columns(&mut self, product_columns: Vec<::models::StandardComparisonProductBlock>) {
    self.product_columns = Some(product_columns);
  }

  pub fn with_product_columns(mut self, product_columns: Vec<::models::StandardComparisonProductBlock>) -> StandardComparisonTableModule {
    self.product_columns = Some(product_columns);
    self
  }

  pub fn product_columns(&self) -> Option<&Vec<::models::StandardComparisonProductBlock>> {
    self.product_columns.as_ref()
  }

  pub fn reset_product_columns(&mut self) {
    self.product_columns = None;
  }

  pub fn set_metric_row_labels(&mut self, metric_row_labels: Vec<::models::PlainTextItem>) {
    self.metric_row_labels = Some(metric_row_labels);
  }

  pub fn with_metric_row_labels(mut self, metric_row_labels: Vec<::models::PlainTextItem>) -> StandardComparisonTableModule {
    self.metric_row_labels = Some(metric_row_labels);
    self
  }

  pub fn metric_row_labels(&self) -> Option<&Vec<::models::PlainTextItem>> {
    self.metric_row_labels.as_ref()
  }

  pub fn reset_metric_row_labels(&mut self) {
    self.metric_row_labels = None;
  }

}



