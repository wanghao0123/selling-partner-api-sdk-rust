/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ContentMetadata : The metadata of an A+ Content document.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContentMetadata {
  /// The A+ Content document name.
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "marketplaceId")]
  marketplace_id: ::models::MarketplaceId,
  #[serde(rename = "status")]
  status: ::models::ContentStatus,
  #[serde(rename = "badgeSet")]
  badge_set: ::models::ContentBadgeSet,
  /// The approximate age of the A+ Content document and metadata.
  #[serde(rename = "updateTime")]
  update_time: String
}

impl ContentMetadata {
  /// The metadata of an A+ Content document.
  pub fn new(name: String, marketplace_id: ::models::MarketplaceId, status: ::models::ContentStatus, badge_set: ::models::ContentBadgeSet, update_time: String) -> ContentMetadata {
    ContentMetadata {
      name: name,
      marketplace_id: marketplace_id,
      status: status,
      badge_set: badge_set,
      update_time: update_time
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ContentMetadata {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_marketplace_id(&mut self, marketplace_id: ::models::MarketplaceId) {
    self.marketplace_id = marketplace_id;
  }

  pub fn with_marketplace_id(mut self, marketplace_id: ::models::MarketplaceId) -> ContentMetadata {
    self.marketplace_id = marketplace_id;
    self
  }

  pub fn marketplace_id(&self) -> &::models::MarketplaceId {
    &self.marketplace_id
  }


  pub fn set_status(&mut self, status: ::models::ContentStatus) {
    self.status = status;
  }

  pub fn with_status(mut self, status: ::models::ContentStatus) -> ContentMetadata {
    self.status = status;
    self
  }

  pub fn status(&self) -> &::models::ContentStatus {
    &self.status
  }


  pub fn set_badge_set(&mut self, badge_set: ::models::ContentBadgeSet) {
    self.badge_set = badge_set;
  }

  pub fn with_badge_set(mut self, badge_set: ::models::ContentBadgeSet) -> ContentMetadata {
    self.badge_set = badge_set;
    self
  }

  pub fn badge_set(&self) -> &::models::ContentBadgeSet {
    &self.badge_set
  }


  pub fn set_update_time(&mut self, update_time: String) {
    self.update_time = update_time;
  }

  pub fn with_update_time(mut self, update_time: String) -> ContentMetadata {
    self.update_time = update_time;
    self
  }

  pub fn update_time(&self) -> &String {
    &self.update_time
  }


}



