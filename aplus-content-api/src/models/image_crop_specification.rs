/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ImageCropSpecification : The instructions for optionally cropping an image. If no cropping is desired, set the dimensions to the original image size. If the image is cropped and no offset values are provided, then the coordinates of the top left corner of the cropped image, relative to the original image, are defaulted to (0,0).

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ImageCropSpecification {
  #[serde(rename = "size")]
  size: ::models::ImageDimensions,
  #[serde(rename = "offset")]
  offset: Option<::models::ImageOffsets>
}

impl ImageCropSpecification {
  /// The instructions for optionally cropping an image. If no cropping is desired, set the dimensions to the original image size. If the image is cropped and no offset values are provided, then the coordinates of the top left corner of the cropped image, relative to the original image, are defaulted to (0,0).
  pub fn new(size: ::models::ImageDimensions) -> ImageCropSpecification {
    ImageCropSpecification {
      size: size,
      offset: None
    }
  }

  pub fn set_size(&mut self, size: ::models::ImageDimensions) {
    self.size = size;
  }

  pub fn with_size(mut self, size: ::models::ImageDimensions) -> ImageCropSpecification {
    self.size = size;
    self
  }

  pub fn size(&self) -> &::models::ImageDimensions {
    &self.size
  }


  pub fn set_offset(&mut self, offset: ::models::ImageOffsets) {
    self.offset = Some(offset);
  }

  pub fn with_offset(mut self, offset: ::models::ImageOffsets) -> ImageCropSpecification {
    self.offset = Some(offset);
    self
  }

  pub fn offset(&self) -> Option<&::models::ImageOffsets> {
    self.offset.as_ref()
  }

  pub fn reset_offset(&mut self) {
    self.offset = None;
  }

}



