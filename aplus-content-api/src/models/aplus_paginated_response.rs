/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AplusPaginatedResponse : The base response data for paginated A+ Content operations. Individual operations may extend this with additional data. If nextPageToken is not returned, there are no more pages to return.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AplusPaginatedResponse {
  #[serde(rename = "warnings")]
  warnings: Option<::models::MessageSet>,
  #[serde(rename = "nextPageToken")]
  next_page_token: Option<::models::PageToken>
}

impl AplusPaginatedResponse {
  /// The base response data for paginated A+ Content operations. Individual operations may extend this with additional data. If nextPageToken is not returned, there are no more pages to return.
  pub fn new() -> AplusPaginatedResponse {
    AplusPaginatedResponse {
      warnings: None,
      next_page_token: None
    }
  }

  pub fn set_warnings(&mut self, warnings: ::models::MessageSet) {
    self.warnings = Some(warnings);
  }

  pub fn with_warnings(mut self, warnings: ::models::MessageSet) -> AplusPaginatedResponse {
    self.warnings = Some(warnings);
    self
  }

  pub fn warnings(&self) -> Option<&::models::MessageSet> {
    self.warnings.as_ref()
  }

  pub fn reset_warnings(&mut self) {
    self.warnings = None;
  }

  pub fn set_next_page_token(&mut self, next_page_token: ::models::PageToken) {
    self.next_page_token = Some(next_page_token);
  }

  pub fn with_next_page_token(mut self, next_page_token: ::models::PageToken) -> AplusPaginatedResponse {
    self.next_page_token = Some(next_page_token);
    self
  }

  pub fn next_page_token(&self) -> Option<&::models::PageToken> {
    self.next_page_token.as_ref()
  }

  pub fn reset_next_page_token(&mut self) {
    self.next_page_token = None;
  }

}



