/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ImageComponent : A reference to an image, hosted in the A+ Content media library.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ImageComponent {
  /// This identifier is provided by the Selling Partner API for Uploads.
  #[serde(rename = "uploadDestinationId")]
  upload_destination_id: String,
  #[serde(rename = "imageCropSpecification")]
  image_crop_specification: ::models::ImageCropSpecification,
  /// The alternative text for the image.
  #[serde(rename = "altText")]
  alt_text: String
}

impl ImageComponent {
  /// A reference to an image, hosted in the A+ Content media library.
  pub fn new(upload_destination_id: String, image_crop_specification: ::models::ImageCropSpecification, alt_text: String) -> ImageComponent {
    ImageComponent {
      upload_destination_id: upload_destination_id,
      image_crop_specification: image_crop_specification,
      alt_text: alt_text
    }
  }

  pub fn set_upload_destination_id(&mut self, upload_destination_id: String) {
    self.upload_destination_id = upload_destination_id;
  }

  pub fn with_upload_destination_id(mut self, upload_destination_id: String) -> ImageComponent {
    self.upload_destination_id = upload_destination_id;
    self
  }

  pub fn upload_destination_id(&self) -> &String {
    &self.upload_destination_id
  }


  pub fn set_image_crop_specification(&mut self, image_crop_specification: ::models::ImageCropSpecification) {
    self.image_crop_specification = image_crop_specification;
  }

  pub fn with_image_crop_specification(mut self, image_crop_specification: ::models::ImageCropSpecification) -> ImageComponent {
    self.image_crop_specification = image_crop_specification;
    self
  }

  pub fn image_crop_specification(&self) -> &::models::ImageCropSpecification {
    &self.image_crop_specification
  }


  pub fn set_alt_text(&mut self, alt_text: String) {
    self.alt_text = alt_text;
  }

  pub fn with_alt_text(mut self, alt_text: String) -> ImageComponent {
    self.alt_text = alt_text;
    self
  }

  pub fn alt_text(&self) -> &String {
    &self.alt_text
  }


}



