/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ContentDocument : The A+ Content document. This is the enhanced content that is published to product detail pages.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContentDocument {
  /// The A+ Content document name.
  #[serde(rename = "name")]
  name: String,
  #[serde(rename = "contentType")]
  content_type: ::models::ContentType,
  #[serde(rename = "contentSubType")]
  content_sub_type: Option<::models::ContentSubType>,
  #[serde(rename = "locale")]
  locale: ::models::LanguageTag,
  #[serde(rename = "contentModuleList")]
  content_module_list: ::models::ContentModuleList
}

impl ContentDocument {
  /// The A+ Content document. This is the enhanced content that is published to product detail pages.
  pub fn new(name: String, content_type: ::models::ContentType, locale: ::models::LanguageTag, content_module_list: ::models::ContentModuleList) -> ContentDocument {
    ContentDocument {
      name: name,
      content_type: content_type,
      content_sub_type: None,
      locale: locale,
      content_module_list: content_module_list
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> ContentDocument {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_content_type(&mut self, content_type: ::models::ContentType) {
    self.content_type = content_type;
  }

  pub fn with_content_type(mut self, content_type: ::models::ContentType) -> ContentDocument {
    self.content_type = content_type;
    self
  }

  pub fn content_type(&self) -> &::models::ContentType {
    &self.content_type
  }


  pub fn set_content_sub_type(&mut self, content_sub_type: ::models::ContentSubType) {
    self.content_sub_type = Some(content_sub_type);
  }

  pub fn with_content_sub_type(mut self, content_sub_type: ::models::ContentSubType) -> ContentDocument {
    self.content_sub_type = Some(content_sub_type);
    self
  }

  pub fn content_sub_type(&self) -> Option<&::models::ContentSubType> {
    self.content_sub_type.as_ref()
  }

  pub fn reset_content_sub_type(&mut self) {
    self.content_sub_type = None;
  }

  pub fn set_locale(&mut self, locale: ::models::LanguageTag) {
    self.locale = locale;
  }

  pub fn with_locale(mut self, locale: ::models::LanguageTag) -> ContentDocument {
    self.locale = locale;
    self
  }

  pub fn locale(&self) -> &::models::LanguageTag {
    &self.locale
  }


  pub fn set_content_module_list(&mut self, content_module_list: ::models::ContentModuleList) {
    self.content_module_list = content_module_list;
  }

  pub fn with_content_module_list(mut self, content_module_list: ::models::ContentModuleList) -> ContentDocument {
    self.content_module_list = content_module_list;
    self
  }

  pub fn content_module_list(&self) -> &::models::ContentModuleList {
    &self.content_module_list
  }


}



