/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// StandardImageTextBlock : The A+ Content standard image and text box block.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StandardImageTextBlock {
  #[serde(rename = "image")]
  image: Option<::models::ImageComponent>,
  #[serde(rename = "headline")]
  headline: Option<::models::TextComponent>,
  #[serde(rename = "body")]
  body: Option<::models::ParagraphComponent>
}

impl StandardImageTextBlock {
  /// The A+ Content standard image and text box block.
  pub fn new() -> StandardImageTextBlock {
    StandardImageTextBlock {
      image: None,
      headline: None,
      body: None
    }
  }

  pub fn set_image(&mut self, image: ::models::ImageComponent) {
    self.image = Some(image);
  }

  pub fn with_image(mut self, image: ::models::ImageComponent) -> StandardImageTextBlock {
    self.image = Some(image);
    self
  }

  pub fn image(&self) -> Option<&::models::ImageComponent> {
    self.image.as_ref()
  }

  pub fn reset_image(&mut self) {
    self.image = None;
  }

  pub fn set_headline(&mut self, headline: ::models::TextComponent) {
    self.headline = Some(headline);
  }

  pub fn with_headline(mut self, headline: ::models::TextComponent) -> StandardImageTextBlock {
    self.headline = Some(headline);
    self
  }

  pub fn headline(&self) -> Option<&::models::TextComponent> {
    self.headline.as_ref()
  }

  pub fn reset_headline(&mut self) {
    self.headline = None;
  }

  pub fn set_body(&mut self, body: ::models::ParagraphComponent) {
    self.body = Some(body);
  }

  pub fn with_body(mut self, body: ::models::ParagraphComponent) -> StandardImageTextBlock {
    self.body = Some(body);
    self
  }

  pub fn body(&self) -> Option<&::models::ParagraphComponent> {
    self.body.as_ref()
  }

  pub fn reset_body(&mut self) {
    self.body = None;
  }

}



