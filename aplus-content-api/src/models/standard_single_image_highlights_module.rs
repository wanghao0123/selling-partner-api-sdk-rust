/* 
 * Selling Partner API for A+ Content Management
 *
 * With the A+ Content API, you can build applications that help selling partners add rich marketing content to their Amazon product detail pages. A+ content helps selling partners share their brand and product story, which helps buyers make informed purchasing decisions. Selling partners assemble content by choosing from content modules and adding images and text.
 *
 * OpenAPI spec version: 2020-11-01
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// StandardSingleImageHighlightsModule : A standard image with several paragraphs and a bulleted list.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct StandardSingleImageHighlightsModule {
  #[serde(rename = "image")]
  image: Option<::models::ImageComponent>,
  #[serde(rename = "headline")]
  headline: Option<::models::TextComponent>,
  #[serde(rename = "textBlock1")]
  text_block1: Option<::models::StandardTextBlock>,
  #[serde(rename = "textBlock2")]
  text_block2: Option<::models::StandardTextBlock>,
  #[serde(rename = "textBlock3")]
  text_block3: Option<::models::StandardTextBlock>,
  #[serde(rename = "bulletedListBlock")]
  bulleted_list_block: Option<::models::StandardHeaderTextListBlock>
}

impl StandardSingleImageHighlightsModule {
  /// A standard image with several paragraphs and a bulleted list.
  pub fn new() -> StandardSingleImageHighlightsModule {
    StandardSingleImageHighlightsModule {
      image: None,
      headline: None,
      text_block1: None,
      text_block2: None,
      text_block3: None,
      bulleted_list_block: None
    }
  }

  pub fn set_image(&mut self, image: ::models::ImageComponent) {
    self.image = Some(image);
  }

  pub fn with_image(mut self, image: ::models::ImageComponent) -> StandardSingleImageHighlightsModule {
    self.image = Some(image);
    self
  }

  pub fn image(&self) -> Option<&::models::ImageComponent> {
    self.image.as_ref()
  }

  pub fn reset_image(&mut self) {
    self.image = None;
  }

  pub fn set_headline(&mut self, headline: ::models::TextComponent) {
    self.headline = Some(headline);
  }

  pub fn with_headline(mut self, headline: ::models::TextComponent) -> StandardSingleImageHighlightsModule {
    self.headline = Some(headline);
    self
  }

  pub fn headline(&self) -> Option<&::models::TextComponent> {
    self.headline.as_ref()
  }

  pub fn reset_headline(&mut self) {
    self.headline = None;
  }

  pub fn set_text_block1(&mut self, text_block1: ::models::StandardTextBlock) {
    self.text_block1 = Some(text_block1);
  }

  pub fn with_text_block1(mut self, text_block1: ::models::StandardTextBlock) -> StandardSingleImageHighlightsModule {
    self.text_block1 = Some(text_block1);
    self
  }

  pub fn text_block1(&self) -> Option<&::models::StandardTextBlock> {
    self.text_block1.as_ref()
  }

  pub fn reset_text_block1(&mut self) {
    self.text_block1 = None;
  }

  pub fn set_text_block2(&mut self, text_block2: ::models::StandardTextBlock) {
    self.text_block2 = Some(text_block2);
  }

  pub fn with_text_block2(mut self, text_block2: ::models::StandardTextBlock) -> StandardSingleImageHighlightsModule {
    self.text_block2 = Some(text_block2);
    self
  }

  pub fn text_block2(&self) -> Option<&::models::StandardTextBlock> {
    self.text_block2.as_ref()
  }

  pub fn reset_text_block2(&mut self) {
    self.text_block2 = None;
  }

  pub fn set_text_block3(&mut self, text_block3: ::models::StandardTextBlock) {
    self.text_block3 = Some(text_block3);
  }

  pub fn with_text_block3(mut self, text_block3: ::models::StandardTextBlock) -> StandardSingleImageHighlightsModule {
    self.text_block3 = Some(text_block3);
    self
  }

  pub fn text_block3(&self) -> Option<&::models::StandardTextBlock> {
    self.text_block3.as_ref()
  }

  pub fn reset_text_block3(&mut self) {
    self.text_block3 = None;
  }

  pub fn set_bulleted_list_block(&mut self, bulleted_list_block: ::models::StandardHeaderTextListBlock) {
    self.bulleted_list_block = Some(bulleted_list_block);
  }

  pub fn with_bulleted_list_block(mut self, bulleted_list_block: ::models::StandardHeaderTextListBlock) -> StandardSingleImageHighlightsModule {
    self.bulleted_list_block = Some(bulleted_list_block);
    self
  }

  pub fn bulleted_list_block(&self) -> Option<&::models::StandardHeaderTextListBlock> {
    self.bulleted_list_block.as_ref()
  }

  pub fn reset_bulleted_list_block(&mut self) {
    self.bulleted_list_block = None;
  }

}



