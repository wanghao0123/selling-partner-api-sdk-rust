/* 
 * Selling Partner API for Messaging
 *
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct MessagingApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> MessagingApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> MessagingApiClient<C> {
        MessagingApiClient {
            configuration: configuration,
        }
    }
}

pub trait MessagingApi {
    fn confirm_customization_details(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateConfirmCustomizationDetailsRequest) -> Box<Future<Item = ::models::CreateConfirmCustomizationDetailsResponse, Error = Error<serde_json::Value>>>;
    fn create_amazon_motors(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateAmazonMotorsRequest) -> Box<Future<Item = ::models::CreateAmazonMotorsResponse, Error = Error<serde_json::Value>>>;
    fn create_confirm_delivery_details(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateConfirmDeliveryDetailsRequest) -> Box<Future<Item = ::models::CreateConfirmDeliveryDetailsResponse, Error = Error<serde_json::Value>>>;
    fn create_confirm_order_details(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateConfirmOrderDetailsRequest) -> Box<Future<Item = ::models::CreateConfirmOrderDetailsResponse, Error = Error<serde_json::Value>>>;
    fn create_confirm_service_details(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateConfirmServiceDetailsRequest) -> Box<Future<Item = ::models::CreateConfirmServiceDetailsResponse, Error = Error<serde_json::Value>>>;
    fn create_digital_access_key(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateDigitalAccessKeyRequest) -> Box<Future<Item = ::models::CreateDigitalAccessKeyResponse, Error = Error<serde_json::Value>>>;
    fn create_legal_disclosure(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateLegalDisclosureRequest) -> Box<Future<Item = ::models::CreateLegalDisclosureResponse, Error = Error<serde_json::Value>>>;
    fn create_negative_feedback_removal(&self, amazon_order_id: &str, marketplace_ids: Vec<String>) -> Box<Future<Item = ::models::CreateNegativeFeedbackRemovalResponse, Error = Error<serde_json::Value>>>;
    fn create_unexpected_problem(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateUnexpectedProblemRequest) -> Box<Future<Item = ::models::CreateUnexpectedProblemResponse, Error = Error<serde_json::Value>>>;
    fn create_warranty(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateWarrantyRequest) -> Box<Future<Item = ::models::CreateWarrantyResponse, Error = Error<serde_json::Value>>>;
    fn get_attributes(&self, amazon_order_id: &str, marketplace_ids: Vec<String>) -> Box<Future<Item = ::models::GetAttributesResponse, Error = Error<serde_json::Value>>>;
    fn get_messaging_actions_for_order(&self, amazon_order_id: &str, marketplace_ids: Vec<String>) -> Box<Future<Item = ::models::GetMessagingActionsForOrderResponse, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>MessagingApi for MessagingApiClient<C> {
    fn confirm_customization_details(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateConfirmCustomizationDetailsRequest) -> Box<Future<Item = ::models::CreateConfirmCustomizationDetailsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/confirmCustomizationDetails?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateConfirmCustomizationDetailsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_amazon_motors(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateAmazonMotorsRequest) -> Box<Future<Item = ::models::CreateAmazonMotorsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/amazonMotors?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateAmazonMotorsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_confirm_delivery_details(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateConfirmDeliveryDetailsRequest) -> Box<Future<Item = ::models::CreateConfirmDeliveryDetailsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/confirmDeliveryDetails?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateConfirmDeliveryDetailsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_confirm_order_details(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateConfirmOrderDetailsRequest) -> Box<Future<Item = ::models::CreateConfirmOrderDetailsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/confirmOrderDetails?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateConfirmOrderDetailsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_confirm_service_details(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateConfirmServiceDetailsRequest) -> Box<Future<Item = ::models::CreateConfirmServiceDetailsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/confirmServiceDetails?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateConfirmServiceDetailsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_digital_access_key(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateDigitalAccessKeyRequest) -> Box<Future<Item = ::models::CreateDigitalAccessKeyResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/digitalAccessKey?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateDigitalAccessKeyResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_legal_disclosure(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateLegalDisclosureRequest) -> Box<Future<Item = ::models::CreateLegalDisclosureResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/legalDisclosure?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateLegalDisclosureResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_negative_feedback_removal(&self, amazon_order_id: &str, marketplace_ids: Vec<String>) -> Box<Future<Item = ::models::CreateNegativeFeedbackRemovalResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/negativeFeedbackRemoval?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateNegativeFeedbackRemovalResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_unexpected_problem(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateUnexpectedProblemRequest) -> Box<Future<Item = ::models::CreateUnexpectedProblemResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/unexpectedProblem?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateUnexpectedProblemResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn create_warranty(&self, amazon_order_id: &str, marketplace_ids: Vec<String>, body: ::models::CreateWarrantyRequest) -> Box<Future<Item = ::models::CreateWarrantyResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Post;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/messages/warranty?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }



        let serialized = serde_json::to_string(&body).unwrap();
        req.headers_mut().set(hyper::header::ContentType::json());
        req.headers_mut().set(hyper::header::ContentLength(serialized.len() as u64));
        req.set_body(serialized);

        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::CreateWarrantyResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_attributes(&self, amazon_order_id: &str, marketplace_ids: Vec<String>) -> Box<Future<Item = ::models::GetAttributesResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}/attributes?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetAttributesResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn get_messaging_actions_for_order(&self, amazon_order_id: &str, marketplace_ids: Vec<String>) -> Box<Future<Item = ::models::GetMessagingActionsForOrderResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("marketplaceIds", &marketplace_ids.join(",").to_string());
            query.finish()
        };
        let uri_str = format!("{}/messaging/v1/orders/{amazonOrderId}?{}", configuration.base_path, query_string, amazonOrderId=amazon_order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::GetMessagingActionsForOrderResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
