/* 
 * Selling Partner API for Messaging
 *
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// LinkObject : A Link object.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct LinkObject {
  /// A URI for this object.
  #[serde(rename = "href")]
  href: String,
  /// An identifier for this object.
  #[serde(rename = "name")]
  name: Option<String>
}

impl LinkObject {
  /// A Link object.
  pub fn new(href: String) -> LinkObject {
    LinkObject {
      href: href,
      name: None
    }
  }

  pub fn set_href(&mut self, href: String) {
    self.href = href;
  }

  pub fn with_href(mut self, href: String) -> LinkObject {
    self.href = href;
    self
  }

  pub fn href(&self) -> &String {
    &self.href
  }


  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> LinkObject {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

}



