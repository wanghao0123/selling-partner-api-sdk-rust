/* 
 * Selling Partner API for Messaging
 *
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Attachment : Represents a file uploaded to a destination that was created by the createUploadDestination operation of the Uploads API.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Attachment {
  /// The identifier of the upload destination. Get this value by calling the createUploadDestination operation of the Uploads API.
  #[serde(rename = "uploadDestinationId")]
  upload_destination_id: String,
  /// The name of the file, including the extension. This is the file name that will appear in the message. This does not need to match the file name of the file that you uploaded.
  #[serde(rename = "fileName")]
  file_name: String
}

impl Attachment {
  /// Represents a file uploaded to a destination that was created by the createUploadDestination operation of the Uploads API.
  pub fn new(upload_destination_id: String, file_name: String) -> Attachment {
    Attachment {
      upload_destination_id: upload_destination_id,
      file_name: file_name
    }
  }

  pub fn set_upload_destination_id(&mut self, upload_destination_id: String) {
    self.upload_destination_id = upload_destination_id;
  }

  pub fn with_upload_destination_id(mut self, upload_destination_id: String) -> Attachment {
    self.upload_destination_id = upload_destination_id;
    self
  }

  pub fn upload_destination_id(&self) -> &String {
    &self.upload_destination_id
  }


  pub fn set_file_name(&mut self, file_name: String) {
    self.file_name = file_name;
  }

  pub fn with_file_name(mut self, file_name: String) -> Attachment {
    self.file_name = file_name;
    self
  }

  pub fn file_name(&self) -> &String {
    &self.file_name
  }


}



