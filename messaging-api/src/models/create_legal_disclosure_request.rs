/* 
 * Selling Partner API for Messaging
 *
 * With the Messaging API you can build applications that send messages to buyers. You can get a list of message types that are available for an order that you specify, then call an operation that sends a message to the buyer for that order. The Messaging API returns responses that are formed according to the <a href=https://tools.ietf.org/html/draft-kelly-json-hal-08>JSON Hypertext Application Language</a> (HAL) standard.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreateLegalDisclosureRequest : The request schema for the createLegalDisclosure operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreateLegalDisclosureRequest {
  /// Attachments to include in the message to the buyer. If any text is included in the attachment, the text must be written in the buyer's language of preference, which can be retrieved from the GetAttributes operation.
  #[serde(rename = "attachments")]
  attachments: Option<Vec<::models::Attachment>>
}

impl CreateLegalDisclosureRequest {
  /// The request schema for the createLegalDisclosure operation.
  pub fn new() -> CreateLegalDisclosureRequest {
    CreateLegalDisclosureRequest {
      attachments: None
    }
  }

  pub fn set_attachments(&mut self, attachments: Vec<::models::Attachment>) {
    self.attachments = Some(attachments);
  }

  pub fn with_attachments(mut self, attachments: Vec<::models::Attachment>) -> CreateLegalDisclosureRequest {
    self.attachments = Some(attachments);
    self
  }

  pub fn attachments(&self) -> Option<&Vec<::models::Attachment>> {
    self.attachments.as_ref()
  }

  pub fn reset_attachments(&mut self) {
    self.attachments = None;
  }

}



