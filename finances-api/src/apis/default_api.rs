/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;
use std::borrow::Cow;
use std::collections::HashMap;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use hyper::header::UserAgent;

use super::{Error, configuration};

pub struct DefaultApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> DefaultApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> DefaultApiClient<C> {
        DefaultApiClient {
            configuration: configuration,
        }
    }
}

pub trait DefaultApi {
    fn list_financial_event_groups(&self, max_results_per_page: i32, financial_event_group_started_before: String, financial_event_group_started_after: String, next_token: &str) -> Box<Future<Item = ::models::ListFinancialEventGroupsResponse, Error = Error<serde_json::Value>>>;
    fn list_financial_events(&self, max_results_per_page: i32, posted_after: String, posted_before: String, next_token: &str) -> Box<Future<Item = ::models::ListFinancialEventsResponse, Error = Error<serde_json::Value>>>;
    fn list_financial_events_by_group_id(&self, event_group_id: &str, max_results_per_page: i32, next_token: &str) -> Box<Future<Item = ::models::ListFinancialEventsResponse, Error = Error<serde_json::Value>>>;
    fn list_financial_events_by_order_id(&self, order_id: &str, max_results_per_page: i32, next_token: &str) -> Box<Future<Item = ::models::ListFinancialEventsResponse, Error = Error<serde_json::Value>>>;
}


impl<C: hyper::client::Connect>DefaultApi for DefaultApiClient<C> {
    fn list_financial_event_groups(&self, max_results_per_page: i32, financial_event_group_started_before: String, financial_event_group_started_after: String, next_token: &str) -> Box<Future<Item = ::models::ListFinancialEventGroupsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("MaxResultsPerPage", &max_results_per_page.to_string());
            query.append_pair("FinancialEventGroupStartedBefore", &financial_event_group_started_before.to_string());
            query.append_pair("FinancialEventGroupStartedAfter", &financial_event_group_started_after.to_string());
            query.append_pair("NextToken", &next_token.to_string());
            query.finish()
        };
        let uri_str = format!("{}/finances/v0/financialEventGroups?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::ListFinancialEventGroupsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn list_financial_events(&self, max_results_per_page: i32, posted_after: String, posted_before: String, next_token: &str) -> Box<Future<Item = ::models::ListFinancialEventsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("MaxResultsPerPage", &max_results_per_page.to_string());
            query.append_pair("PostedAfter", &posted_after.to_string());
            query.append_pair("PostedBefore", &posted_before.to_string());
            query.append_pair("NextToken", &next_token.to_string());
            query.finish()
        };
        let uri_str = format!("{}/finances/v0/financialEvents?{}", configuration.base_path, query_string);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::ListFinancialEventsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn list_financial_events_by_group_id(&self, event_group_id: &str, max_results_per_page: i32, next_token: &str) -> Box<Future<Item = ::models::ListFinancialEventsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("MaxResultsPerPage", &max_results_per_page.to_string());
            query.append_pair("NextToken", &next_token.to_string());
            query.finish()
        };
        let uri_str = format!("{}/finances/v0/financialEventGroups/{eventGroupId}/financialEvents?{}", configuration.base_path, query_string, eventGroupId=event_group_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::ListFinancialEventsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

    fn list_financial_events_by_order_id(&self, order_id: &str, max_results_per_page: i32, next_token: &str) -> Box<Future<Item = ::models::ListFinancialEventsResponse, Error = Error<serde_json::Value>>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query_string = {
            let mut query = ::url::form_urlencoded::Serializer::new(String::new());
            query.append_pair("MaxResultsPerPage", &max_results_per_page.to_string());
            query.append_pair("NextToken", &next_token.to_string());
            query.finish()
        };
        let uri_str = format!("{}/finances/v0/orders/{orderId}/financialEvents?{}", configuration.base_path, query_string, orderId=order_id);

        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut uri: hyper::Uri = uri_str.parse().unwrap();

        let mut req = hyper::Request::new(method, uri);

        if let Some(ref user_agent) = configuration.user_agent {
            req.headers_mut().set(UserAgent::new(Cow::Owned(user_agent.clone())));
        }




        // send request
        Box::new(
        configuration.client.request(req)
            .map_err(|e| Error::from(e))
            .and_then(|resp| {
                let status = resp.status();
                resp.body().concat2()
                    .and_then(move |body| Ok((status, body)))
                    .map_err(|e| Error::from(e))
            })
            .and_then(|(status, body)| {
                if status.is_success() {
                    Ok(body)
                } else {
                    Err(Error::from((status, &*body)))
                }
            })
            .and_then(|body| {
                let parsed: Result<::models::ListFinancialEventsResponse, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            })
        )
    }

}
