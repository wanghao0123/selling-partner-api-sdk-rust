/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FbaLiquidationEvent : A payment event for Fulfillment by Amazon (FBA) inventory liquidation. This event is used only in the US marketplace.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FbaLiquidationEvent {
  /// The date and time when the financial event was posted.
  #[serde(rename = "PostedDate")]
  posted_date: Option<::models::Date>,
  /// The identifier for the original removal order.
  #[serde(rename = "OriginalRemovalOrderId")]
  original_removal_order_id: Option<String>,
  /// The amount paid by the liquidator for the seller's inventory. The seller receives this amount minus LiquidationFeeAmount.
  #[serde(rename = "LiquidationProceedsAmount")]
  liquidation_proceeds_amount: Option<::models::Currency>,
  /// The fee charged to the seller by Amazon for liquidating the seller's FBA inventory.
  #[serde(rename = "LiquidationFeeAmount")]
  liquidation_fee_amount: Option<::models::Currency>
}

impl FbaLiquidationEvent {
  /// A payment event for Fulfillment by Amazon (FBA) inventory liquidation. This event is used only in the US marketplace.
  pub fn new() -> FbaLiquidationEvent {
    FbaLiquidationEvent {
      posted_date: None,
      original_removal_order_id: None,
      liquidation_proceeds_amount: None,
      liquidation_fee_amount: None
    }
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> FbaLiquidationEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_original_removal_order_id(&mut self, original_removal_order_id: String) {
    self.original_removal_order_id = Some(original_removal_order_id);
  }

  pub fn with_original_removal_order_id(mut self, original_removal_order_id: String) -> FbaLiquidationEvent {
    self.original_removal_order_id = Some(original_removal_order_id);
    self
  }

  pub fn original_removal_order_id(&self) -> Option<&String> {
    self.original_removal_order_id.as_ref()
  }

  pub fn reset_original_removal_order_id(&mut self) {
    self.original_removal_order_id = None;
  }

  pub fn set_liquidation_proceeds_amount(&mut self, liquidation_proceeds_amount: ::models::Currency) {
    self.liquidation_proceeds_amount = Some(liquidation_proceeds_amount);
  }

  pub fn with_liquidation_proceeds_amount(mut self, liquidation_proceeds_amount: ::models::Currency) -> FbaLiquidationEvent {
    self.liquidation_proceeds_amount = Some(liquidation_proceeds_amount);
    self
  }

  pub fn liquidation_proceeds_amount(&self) -> Option<&::models::Currency> {
    self.liquidation_proceeds_amount.as_ref()
  }

  pub fn reset_liquidation_proceeds_amount(&mut self) {
    self.liquidation_proceeds_amount = None;
  }

  pub fn set_liquidation_fee_amount(&mut self, liquidation_fee_amount: ::models::Currency) {
    self.liquidation_fee_amount = Some(liquidation_fee_amount);
  }

  pub fn with_liquidation_fee_amount(mut self, liquidation_fee_amount: ::models::Currency) -> FbaLiquidationEvent {
    self.liquidation_fee_amount = Some(liquidation_fee_amount);
    self
  }

  pub fn liquidation_fee_amount(&self) -> Option<&::models::Currency> {
    self.liquidation_fee_amount.as_ref()
  }

  pub fn reset_liquidation_fee_amount(&mut self) {
    self.liquidation_fee_amount = None;
  }

}



