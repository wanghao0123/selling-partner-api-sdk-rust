/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SellerDealPaymentEvent : An event linked to the payment of a fee related to the specified deal.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SellerDealPaymentEvent {
  /// The date and time when the financial event was posted.
  #[serde(rename = "postedDate")]
  posted_date: Option<::models::Date>,
  /// The unique identifier of the deal.
  #[serde(rename = "dealId")]
  deal_id: Option<String>,
  /// The internal description of the deal.
  #[serde(rename = "dealDescription")]
  deal_description: Option<String>,
  /// The type of event: SellerDealComplete.
  #[serde(rename = "eventType")]
  event_type: Option<String>,
  /// The type of fee: RunLightningDealFee.
  #[serde(rename = "feeType")]
  fee_type: Option<String>,
  /// The monetary amount of the fee.
  #[serde(rename = "feeAmount")]
  fee_amount: Option<::models::Currency>,
  /// The monetary amount of the tax applied.
  #[serde(rename = "taxAmount")]
  tax_amount: Option<::models::Currency>,
  /// The total monetary amount paid.
  #[serde(rename = "totalAmount")]
  total_amount: Option<::models::Currency>
}

impl SellerDealPaymentEvent {
  /// An event linked to the payment of a fee related to the specified deal.
  pub fn new() -> SellerDealPaymentEvent {
    SellerDealPaymentEvent {
      posted_date: None,
      deal_id: None,
      deal_description: None,
      event_type: None,
      fee_type: None,
      fee_amount: None,
      tax_amount: None,
      total_amount: None
    }
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> SellerDealPaymentEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_deal_id(&mut self, deal_id: String) {
    self.deal_id = Some(deal_id);
  }

  pub fn with_deal_id(mut self, deal_id: String) -> SellerDealPaymentEvent {
    self.deal_id = Some(deal_id);
    self
  }

  pub fn deal_id(&self) -> Option<&String> {
    self.deal_id.as_ref()
  }

  pub fn reset_deal_id(&mut self) {
    self.deal_id = None;
  }

  pub fn set_deal_description(&mut self, deal_description: String) {
    self.deal_description = Some(deal_description);
  }

  pub fn with_deal_description(mut self, deal_description: String) -> SellerDealPaymentEvent {
    self.deal_description = Some(deal_description);
    self
  }

  pub fn deal_description(&self) -> Option<&String> {
    self.deal_description.as_ref()
  }

  pub fn reset_deal_description(&mut self) {
    self.deal_description = None;
  }

  pub fn set_event_type(&mut self, event_type: String) {
    self.event_type = Some(event_type);
  }

  pub fn with_event_type(mut self, event_type: String) -> SellerDealPaymentEvent {
    self.event_type = Some(event_type);
    self
  }

  pub fn event_type(&self) -> Option<&String> {
    self.event_type.as_ref()
  }

  pub fn reset_event_type(&mut self) {
    self.event_type = None;
  }

  pub fn set_fee_type(&mut self, fee_type: String) {
    self.fee_type = Some(fee_type);
  }

  pub fn with_fee_type(mut self, fee_type: String) -> SellerDealPaymentEvent {
    self.fee_type = Some(fee_type);
    self
  }

  pub fn fee_type(&self) -> Option<&String> {
    self.fee_type.as_ref()
  }

  pub fn reset_fee_type(&mut self) {
    self.fee_type = None;
  }

  pub fn set_fee_amount(&mut self, fee_amount: ::models::Currency) {
    self.fee_amount = Some(fee_amount);
  }

  pub fn with_fee_amount(mut self, fee_amount: ::models::Currency) -> SellerDealPaymentEvent {
    self.fee_amount = Some(fee_amount);
    self
  }

  pub fn fee_amount(&self) -> Option<&::models::Currency> {
    self.fee_amount.as_ref()
  }

  pub fn reset_fee_amount(&mut self) {
    self.fee_amount = None;
  }

  pub fn set_tax_amount(&mut self, tax_amount: ::models::Currency) {
    self.tax_amount = Some(tax_amount);
  }

  pub fn with_tax_amount(mut self, tax_amount: ::models::Currency) -> SellerDealPaymentEvent {
    self.tax_amount = Some(tax_amount);
    self
  }

  pub fn tax_amount(&self) -> Option<&::models::Currency> {
    self.tax_amount.as_ref()
  }

  pub fn reset_tax_amount(&mut self) {
    self.tax_amount = None;
  }

  pub fn set_total_amount(&mut self, total_amount: ::models::Currency) {
    self.total_amount = Some(total_amount);
  }

  pub fn with_total_amount(mut self, total_amount: ::models::Currency) -> SellerDealPaymentEvent {
    self.total_amount = Some(total_amount);
    self
  }

  pub fn total_amount(&self) -> Option<&::models::Currency> {
    self.total_amount.as_ref()
  }

  pub fn reset_total_amount(&mut self) {
    self.total_amount = None;
  }

}



