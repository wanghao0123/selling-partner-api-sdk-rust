/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SellerReviewEnrollmentPaymentEvent : A fee payment event for the Early Reviewer Program.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SellerReviewEnrollmentPaymentEvent {
  /// The date and time when the financial event was posted.
  #[serde(rename = "PostedDate")]
  posted_date: Option<::models::Date>,
  /// An enrollment identifier.
  #[serde(rename = "EnrollmentId")]
  enrollment_id: Option<String>,
  /// The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program.
  #[serde(rename = "ParentASIN")]
  parent_asin: Option<String>,
  #[serde(rename = "FeeComponent")]
  fee_component: Option<::models::FeeComponent>,
  #[serde(rename = "ChargeComponent")]
  charge_component: Option<::models::ChargeComponent>,
  /// The FeeComponent value plus the ChargeComponent value.
  #[serde(rename = "TotalAmount")]
  total_amount: Option<::models::Currency>
}

impl SellerReviewEnrollmentPaymentEvent {
  /// A fee payment event for the Early Reviewer Program.
  pub fn new() -> SellerReviewEnrollmentPaymentEvent {
    SellerReviewEnrollmentPaymentEvent {
      posted_date: None,
      enrollment_id: None,
      parent_asin: None,
      fee_component: None,
      charge_component: None,
      total_amount: None
    }
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> SellerReviewEnrollmentPaymentEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_enrollment_id(&mut self, enrollment_id: String) {
    self.enrollment_id = Some(enrollment_id);
  }

  pub fn with_enrollment_id(mut self, enrollment_id: String) -> SellerReviewEnrollmentPaymentEvent {
    self.enrollment_id = Some(enrollment_id);
    self
  }

  pub fn enrollment_id(&self) -> Option<&String> {
    self.enrollment_id.as_ref()
  }

  pub fn reset_enrollment_id(&mut self) {
    self.enrollment_id = None;
  }

  pub fn set_parent_asin(&mut self, parent_asin: String) {
    self.parent_asin = Some(parent_asin);
  }

  pub fn with_parent_asin(mut self, parent_asin: String) -> SellerReviewEnrollmentPaymentEvent {
    self.parent_asin = Some(parent_asin);
    self
  }

  pub fn parent_asin(&self) -> Option<&String> {
    self.parent_asin.as_ref()
  }

  pub fn reset_parent_asin(&mut self) {
    self.parent_asin = None;
  }

  pub fn set_fee_component(&mut self, fee_component: ::models::FeeComponent) {
    self.fee_component = Some(fee_component);
  }

  pub fn with_fee_component(mut self, fee_component: ::models::FeeComponent) -> SellerReviewEnrollmentPaymentEvent {
    self.fee_component = Some(fee_component);
    self
  }

  pub fn fee_component(&self) -> Option<&::models::FeeComponent> {
    self.fee_component.as_ref()
  }

  pub fn reset_fee_component(&mut self) {
    self.fee_component = None;
  }

  pub fn set_charge_component(&mut self, charge_component: ::models::ChargeComponent) {
    self.charge_component = Some(charge_component);
  }

  pub fn with_charge_component(mut self, charge_component: ::models::ChargeComponent) -> SellerReviewEnrollmentPaymentEvent {
    self.charge_component = Some(charge_component);
    self
  }

  pub fn charge_component(&self) -> Option<&::models::ChargeComponent> {
    self.charge_component.as_ref()
  }

  pub fn reset_charge_component(&mut self) {
    self.charge_component = None;
  }

  pub fn set_total_amount(&mut self, total_amount: ::models::Currency) {
    self.total_amount = Some(total_amount);
  }

  pub fn with_total_amount(mut self, total_amount: ::models::Currency) -> SellerReviewEnrollmentPaymentEvent {
    self.total_amount = Some(total_amount);
    self
  }

  pub fn total_amount(&self) -> Option<&::models::Currency> {
    self.total_amount.as_ref()
  }

  pub fn reset_total_amount(&mut self) {
    self.total_amount = None;
  }

}



