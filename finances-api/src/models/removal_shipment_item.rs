/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RemovalShipmentItem : Item-level information for a removal shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RemovalShipmentItem {
  /// An identifier for an item in a removal shipment.
  #[serde(rename = "RemovalShipmentItemId")]
  removal_shipment_item_id: Option<String>,
  /// The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
  #[serde(rename = "TaxCollectionModel")]
  tax_collection_model: Option<String>,
  /// The Amazon fulfillment network SKU for the item.
  #[serde(rename = "FulfillmentNetworkSKU")]
  fulfillment_network_sku: Option<String>,
  /// The quantity of the item.
  #[serde(rename = "Quantity")]
  quantity: Option<i32>,
  /// The total amount paid to the seller for the removed item.
  #[serde(rename = "Revenue")]
  revenue: Option<::models::Currency>,
  /// The fee that Amazon charged to the seller for the removal of the item. The amount is a negative number.
  #[serde(rename = "FeeAmount")]
  fee_amount: Option<::models::Currency>,
  /// Tax collected on the revenue.
  #[serde(rename = "TaxAmount")]
  tax_amount: Option<::models::Currency>,
  /// The tax withheld and remitted to the taxing authority by Amazon on behalf of the seller. If TaxCollectionModel=MarketplaceFacilitator, then TaxWithheld=TaxAmount (except the TaxWithheld amount is a negative number). Otherwise TaxWithheld=0.
  #[serde(rename = "TaxWithheld")]
  tax_withheld: Option<::models::Currency>
}

impl RemovalShipmentItem {
  /// Item-level information for a removal shipment.
  pub fn new() -> RemovalShipmentItem {
    RemovalShipmentItem {
      removal_shipment_item_id: None,
      tax_collection_model: None,
      fulfillment_network_sku: None,
      quantity: None,
      revenue: None,
      fee_amount: None,
      tax_amount: None,
      tax_withheld: None
    }
  }

  pub fn set_removal_shipment_item_id(&mut self, removal_shipment_item_id: String) {
    self.removal_shipment_item_id = Some(removal_shipment_item_id);
  }

  pub fn with_removal_shipment_item_id(mut self, removal_shipment_item_id: String) -> RemovalShipmentItem {
    self.removal_shipment_item_id = Some(removal_shipment_item_id);
    self
  }

  pub fn removal_shipment_item_id(&self) -> Option<&String> {
    self.removal_shipment_item_id.as_ref()
  }

  pub fn reset_removal_shipment_item_id(&mut self) {
    self.removal_shipment_item_id = None;
  }

  pub fn set_tax_collection_model(&mut self, tax_collection_model: String) {
    self.tax_collection_model = Some(tax_collection_model);
  }

  pub fn with_tax_collection_model(mut self, tax_collection_model: String) -> RemovalShipmentItem {
    self.tax_collection_model = Some(tax_collection_model);
    self
  }

  pub fn tax_collection_model(&self) -> Option<&String> {
    self.tax_collection_model.as_ref()
  }

  pub fn reset_tax_collection_model(&mut self) {
    self.tax_collection_model = None;
  }

  pub fn set_fulfillment_network_sku(&mut self, fulfillment_network_sku: String) {
    self.fulfillment_network_sku = Some(fulfillment_network_sku);
  }

  pub fn with_fulfillment_network_sku(mut self, fulfillment_network_sku: String) -> RemovalShipmentItem {
    self.fulfillment_network_sku = Some(fulfillment_network_sku);
    self
  }

  pub fn fulfillment_network_sku(&self) -> Option<&String> {
    self.fulfillment_network_sku.as_ref()
  }

  pub fn reset_fulfillment_network_sku(&mut self) {
    self.fulfillment_network_sku = None;
  }

  pub fn set_quantity(&mut self, quantity: i32) {
    self.quantity = Some(quantity);
  }

  pub fn with_quantity(mut self, quantity: i32) -> RemovalShipmentItem {
    self.quantity = Some(quantity);
    self
  }

  pub fn quantity(&self) -> Option<&i32> {
    self.quantity.as_ref()
  }

  pub fn reset_quantity(&mut self) {
    self.quantity = None;
  }

  pub fn set_revenue(&mut self, revenue: ::models::Currency) {
    self.revenue = Some(revenue);
  }

  pub fn with_revenue(mut self, revenue: ::models::Currency) -> RemovalShipmentItem {
    self.revenue = Some(revenue);
    self
  }

  pub fn revenue(&self) -> Option<&::models::Currency> {
    self.revenue.as_ref()
  }

  pub fn reset_revenue(&mut self) {
    self.revenue = None;
  }

  pub fn set_fee_amount(&mut self, fee_amount: ::models::Currency) {
    self.fee_amount = Some(fee_amount);
  }

  pub fn with_fee_amount(mut self, fee_amount: ::models::Currency) -> RemovalShipmentItem {
    self.fee_amount = Some(fee_amount);
    self
  }

  pub fn fee_amount(&self) -> Option<&::models::Currency> {
    self.fee_amount.as_ref()
  }

  pub fn reset_fee_amount(&mut self) {
    self.fee_amount = None;
  }

  pub fn set_tax_amount(&mut self, tax_amount: ::models::Currency) {
    self.tax_amount = Some(tax_amount);
  }

  pub fn with_tax_amount(mut self, tax_amount: ::models::Currency) -> RemovalShipmentItem {
    self.tax_amount = Some(tax_amount);
    self
  }

  pub fn tax_amount(&self) -> Option<&::models::Currency> {
    self.tax_amount.as_ref()
  }

  pub fn reset_tax_amount(&mut self) {
    self.tax_amount = None;
  }

  pub fn set_tax_withheld(&mut self, tax_withheld: ::models::Currency) {
    self.tax_withheld = Some(tax_withheld);
  }

  pub fn with_tax_withheld(mut self, tax_withheld: ::models::Currency) -> RemovalShipmentItem {
    self.tax_withheld = Some(tax_withheld);
    self
  }

  pub fn tax_withheld(&self) -> Option<&::models::Currency> {
    self.tax_withheld.as_ref()
  }

  pub fn reset_tax_withheld(&mut self) {
    self.tax_withheld = None;
  }

}



