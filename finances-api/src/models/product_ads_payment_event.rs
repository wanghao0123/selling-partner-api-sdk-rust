/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ProductAdsPaymentEvent : A Sponsored Products payment event.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ProductAdsPaymentEvent {
  /// The date and time when the financial event was posted.
  #[serde(rename = "postedDate")]
  posted_date: Option<::models::Date>,
  /// Indicates if the transaction is for a charge or a refund.  Possible values:  * charge - Charge  * refund - Refund
  #[serde(rename = "transactionType")]
  transaction_type: Option<String>,
  /// Identifier for the invoice that the transaction appears in.
  #[serde(rename = "invoiceId")]
  invoice_id: Option<String>,
  /// Base amount of the transaction, before tax.
  #[serde(rename = "baseValue")]
  base_value: Option<::models::Currency>,
  /// Tax amount of the transaction.
  #[serde(rename = "taxValue")]
  tax_value: Option<::models::Currency>,
  /// The total amount of the transaction. Equal to baseValue + taxValue.
  #[serde(rename = "transactionValue")]
  transaction_value: Option<::models::Currency>
}

impl ProductAdsPaymentEvent {
  /// A Sponsored Products payment event.
  pub fn new() -> ProductAdsPaymentEvent {
    ProductAdsPaymentEvent {
      posted_date: None,
      transaction_type: None,
      invoice_id: None,
      base_value: None,
      tax_value: None,
      transaction_value: None
    }
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> ProductAdsPaymentEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_transaction_type(&mut self, transaction_type: String) {
    self.transaction_type = Some(transaction_type);
  }

  pub fn with_transaction_type(mut self, transaction_type: String) -> ProductAdsPaymentEvent {
    self.transaction_type = Some(transaction_type);
    self
  }

  pub fn transaction_type(&self) -> Option<&String> {
    self.transaction_type.as_ref()
  }

  pub fn reset_transaction_type(&mut self) {
    self.transaction_type = None;
  }

  pub fn set_invoice_id(&mut self, invoice_id: String) {
    self.invoice_id = Some(invoice_id);
  }

  pub fn with_invoice_id(mut self, invoice_id: String) -> ProductAdsPaymentEvent {
    self.invoice_id = Some(invoice_id);
    self
  }

  pub fn invoice_id(&self) -> Option<&String> {
    self.invoice_id.as_ref()
  }

  pub fn reset_invoice_id(&mut self) {
    self.invoice_id = None;
  }

  pub fn set_base_value(&mut self, base_value: ::models::Currency) {
    self.base_value = Some(base_value);
  }

  pub fn with_base_value(mut self, base_value: ::models::Currency) -> ProductAdsPaymentEvent {
    self.base_value = Some(base_value);
    self
  }

  pub fn base_value(&self) -> Option<&::models::Currency> {
    self.base_value.as_ref()
  }

  pub fn reset_base_value(&mut self) {
    self.base_value = None;
  }

  pub fn set_tax_value(&mut self, tax_value: ::models::Currency) {
    self.tax_value = Some(tax_value);
  }

  pub fn with_tax_value(mut self, tax_value: ::models::Currency) -> ProductAdsPaymentEvent {
    self.tax_value = Some(tax_value);
    self
  }

  pub fn tax_value(&self) -> Option<&::models::Currency> {
    self.tax_value.as_ref()
  }

  pub fn reset_tax_value(&mut self) {
    self.tax_value = None;
  }

  pub fn set_transaction_value(&mut self, transaction_value: ::models::Currency) {
    self.transaction_value = Some(transaction_value);
  }

  pub fn with_transaction_value(mut self, transaction_value: ::models::Currency) -> ProductAdsPaymentEvent {
    self.transaction_value = Some(transaction_value);
    self
  }

  pub fn transaction_value(&self) -> Option<&::models::Currency> {
    self.transaction_value.as_ref()
  }

  pub fn reset_transaction_value(&mut self) {
    self.transaction_value = None;
  }

}



