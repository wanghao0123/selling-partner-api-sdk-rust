/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TaxWithheldComponent : Information about the taxes withheld.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TaxWithheldComponent {
  /// The tax collection model applied to the item.  Possible values:  * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.  * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon.
  #[serde(rename = "TaxCollectionModel")]
  tax_collection_model: Option<String>,
  /// A list of charges that represent the types and amounts of taxes withheld.
  #[serde(rename = "TaxesWithheld")]
  taxes_withheld: Option<::models::ChargeComponentList>
}

impl TaxWithheldComponent {
  /// Information about the taxes withheld.
  pub fn new() -> TaxWithheldComponent {
    TaxWithheldComponent {
      tax_collection_model: None,
      taxes_withheld: None
    }
  }

  pub fn set_tax_collection_model(&mut self, tax_collection_model: String) {
    self.tax_collection_model = Some(tax_collection_model);
  }

  pub fn with_tax_collection_model(mut self, tax_collection_model: String) -> TaxWithheldComponent {
    self.tax_collection_model = Some(tax_collection_model);
    self
  }

  pub fn tax_collection_model(&self) -> Option<&String> {
    self.tax_collection_model.as_ref()
  }

  pub fn reset_tax_collection_model(&mut self) {
    self.tax_collection_model = None;
  }

  pub fn set_taxes_withheld(&mut self, taxes_withheld: ::models::ChargeComponentList) {
    self.taxes_withheld = Some(taxes_withheld);
  }

  pub fn with_taxes_withheld(mut self, taxes_withheld: ::models::ChargeComponentList) -> TaxWithheldComponent {
    self.taxes_withheld = Some(taxes_withheld);
    self
  }

  pub fn taxes_withheld(&self) -> Option<&::models::ChargeComponentList> {
    self.taxes_withheld.as_ref()
  }

  pub fn reset_taxes_withheld(&mut self) {
    self.taxes_withheld = None;
  }

}



