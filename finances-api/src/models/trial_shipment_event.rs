/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// TrialShipmentEvent : An event related to a trial shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TrialShipmentEvent {
  /// An Amazon-defined identifier for an order.
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: Option<String>,
  /// The identifier of the financial event group.
  #[serde(rename = "FinancialEventGroupId")]
  financial_event_group_id: Option<String>,
  /// The date and time when the financial event was posted.
  #[serde(rename = "PostedDate")]
  posted_date: Option<::models::Date>,
  /// The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
  #[serde(rename = "SKU")]
  SKU: Option<String>,
  /// A list of fees charged by Amazon for trial shipments.
  #[serde(rename = "FeeList")]
  fee_list: Option<::models::FeeComponentList>
}

impl TrialShipmentEvent {
  /// An event related to a trial shipment.
  pub fn new() -> TrialShipmentEvent {
    TrialShipmentEvent {
      amazon_order_id: None,
      financial_event_group_id: None,
      posted_date: None,
      SKU: None,
      fee_list: None
    }
  }

  pub fn set_amazon_order_id(&mut self, amazon_order_id: String) {
    self.amazon_order_id = Some(amazon_order_id);
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: String) -> TrialShipmentEvent {
    self.amazon_order_id = Some(amazon_order_id);
    self
  }

  pub fn amazon_order_id(&self) -> Option<&String> {
    self.amazon_order_id.as_ref()
  }

  pub fn reset_amazon_order_id(&mut self) {
    self.amazon_order_id = None;
  }

  pub fn set_financial_event_group_id(&mut self, financial_event_group_id: String) {
    self.financial_event_group_id = Some(financial_event_group_id);
  }

  pub fn with_financial_event_group_id(mut self, financial_event_group_id: String) -> TrialShipmentEvent {
    self.financial_event_group_id = Some(financial_event_group_id);
    self
  }

  pub fn financial_event_group_id(&self) -> Option<&String> {
    self.financial_event_group_id.as_ref()
  }

  pub fn reset_financial_event_group_id(&mut self) {
    self.financial_event_group_id = None;
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> TrialShipmentEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_SKU(&mut self, SKU: String) {
    self.SKU = Some(SKU);
  }

  pub fn with_SKU(mut self, SKU: String) -> TrialShipmentEvent {
    self.SKU = Some(SKU);
    self
  }

  pub fn SKU(&self) -> Option<&String> {
    self.SKU.as_ref()
  }

  pub fn reset_SKU(&mut self) {
    self.SKU = None;
  }

  pub fn set_fee_list(&mut self, fee_list: ::models::FeeComponentList) {
    self.fee_list = Some(fee_list);
  }

  pub fn with_fee_list(mut self, fee_list: ::models::FeeComponentList) -> TrialShipmentEvent {
    self.fee_list = Some(fee_list);
    self
  }

  pub fn fee_list(&self) -> Option<&::models::FeeComponentList> {
    self.fee_list.as_ref()
  }

  pub fn reset_fee_list(&mut self) {
    self.fee_list = None;
  }

}



