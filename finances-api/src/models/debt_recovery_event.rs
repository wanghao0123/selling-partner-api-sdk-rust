/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DebtRecoveryEvent : A debt payment or debt adjustment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DebtRecoveryEvent {
  /// The debt recovery type.  Possible values:  * DebtPayment  * DebtPaymentFailure  *DebtAdjustment
  #[serde(rename = "DebtRecoveryType")]
  debt_recovery_type: Option<String>,
  /// The amount applied for recovery.
  #[serde(rename = "RecoveryAmount")]
  recovery_amount: Option<::models::Currency>,
  /// The amount returned for overpayment.
  #[serde(rename = "OverPaymentCredit")]
  over_payment_credit: Option<::models::Currency>,
  #[serde(rename = "DebtRecoveryItemList")]
  debt_recovery_item_list: Option<::models::DebtRecoveryItemList>,
  #[serde(rename = "ChargeInstrumentList")]
  charge_instrument_list: Option<::models::ChargeInstrumentList>
}

impl DebtRecoveryEvent {
  /// A debt payment or debt adjustment.
  pub fn new() -> DebtRecoveryEvent {
    DebtRecoveryEvent {
      debt_recovery_type: None,
      recovery_amount: None,
      over_payment_credit: None,
      debt_recovery_item_list: None,
      charge_instrument_list: None
    }
  }

  pub fn set_debt_recovery_type(&mut self, debt_recovery_type: String) {
    self.debt_recovery_type = Some(debt_recovery_type);
  }

  pub fn with_debt_recovery_type(mut self, debt_recovery_type: String) -> DebtRecoveryEvent {
    self.debt_recovery_type = Some(debt_recovery_type);
    self
  }

  pub fn debt_recovery_type(&self) -> Option<&String> {
    self.debt_recovery_type.as_ref()
  }

  pub fn reset_debt_recovery_type(&mut self) {
    self.debt_recovery_type = None;
  }

  pub fn set_recovery_amount(&mut self, recovery_amount: ::models::Currency) {
    self.recovery_amount = Some(recovery_amount);
  }

  pub fn with_recovery_amount(mut self, recovery_amount: ::models::Currency) -> DebtRecoveryEvent {
    self.recovery_amount = Some(recovery_amount);
    self
  }

  pub fn recovery_amount(&self) -> Option<&::models::Currency> {
    self.recovery_amount.as_ref()
  }

  pub fn reset_recovery_amount(&mut self) {
    self.recovery_amount = None;
  }

  pub fn set_over_payment_credit(&mut self, over_payment_credit: ::models::Currency) {
    self.over_payment_credit = Some(over_payment_credit);
  }

  pub fn with_over_payment_credit(mut self, over_payment_credit: ::models::Currency) -> DebtRecoveryEvent {
    self.over_payment_credit = Some(over_payment_credit);
    self
  }

  pub fn over_payment_credit(&self) -> Option<&::models::Currency> {
    self.over_payment_credit.as_ref()
  }

  pub fn reset_over_payment_credit(&mut self) {
    self.over_payment_credit = None;
  }

  pub fn set_debt_recovery_item_list(&mut self, debt_recovery_item_list: ::models::DebtRecoveryItemList) {
    self.debt_recovery_item_list = Some(debt_recovery_item_list);
  }

  pub fn with_debt_recovery_item_list(mut self, debt_recovery_item_list: ::models::DebtRecoveryItemList) -> DebtRecoveryEvent {
    self.debt_recovery_item_list = Some(debt_recovery_item_list);
    self
  }

  pub fn debt_recovery_item_list(&self) -> Option<&::models::DebtRecoveryItemList> {
    self.debt_recovery_item_list.as_ref()
  }

  pub fn reset_debt_recovery_item_list(&mut self) {
    self.debt_recovery_item_list = None;
  }

  pub fn set_charge_instrument_list(&mut self, charge_instrument_list: ::models::ChargeInstrumentList) {
    self.charge_instrument_list = Some(charge_instrument_list);
  }

  pub fn with_charge_instrument_list(mut self, charge_instrument_list: ::models::ChargeInstrumentList) -> DebtRecoveryEvent {
    self.charge_instrument_list = Some(charge_instrument_list);
    self
  }

  pub fn charge_instrument_list(&self) -> Option<&::models::ChargeInstrumentList> {
    self.charge_instrument_list.as_ref()
  }

  pub fn reset_charge_instrument_list(&mut self) {
    self.charge_instrument_list = None;
  }

}



