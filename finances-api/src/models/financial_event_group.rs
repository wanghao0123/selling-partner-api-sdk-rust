/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FinancialEventGroup : Information related to a financial event group.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FinancialEventGroup {
  /// A unique identifier for the financial event group.
  #[serde(rename = "FinancialEventGroupId")]
  financial_event_group_id: Option<String>,
  /// The processing status of the financial event group indicates whether the balance of the financial event group is settled.  Possible values:  * Open  * Closed
  #[serde(rename = "ProcessingStatus")]
  processing_status: Option<String>,
  /// The status of the fund transfer.
  #[serde(rename = "FundTransferStatus")]
  fund_transfer_status: Option<String>,
  /// The total amount in the currency of the marketplace in which the transactions occurred.
  #[serde(rename = "OriginalTotal")]
  original_total: Option<::models::Currency>,
  /// The total amount in the currency of the marketplace in which the funds were disbursed.
  #[serde(rename = "ConvertedTotal")]
  converted_total: Option<::models::Currency>,
  /// The date and time when the disbursement or charge was initiated. Only present for closed settlements. In ISO 8601 date time format.
  #[serde(rename = "FundTransferDate")]
  fund_transfer_date: Option<::models::Date>,
  /// The trace identifier used by sellers to look up transactions externally.
  #[serde(rename = "TraceId")]
  trace_id: Option<String>,
  /// The account tail of the payment instrument.
  #[serde(rename = "AccountTail")]
  account_tail: Option<String>,
  /// The balance at the beginning of the settlement period.
  #[serde(rename = "BeginningBalance")]
  beginning_balance: Option<::models::Currency>,
  /// The date and time at which the financial event group is opened. In ISO 8601 date time format.
  #[serde(rename = "FinancialEventGroupStart")]
  financial_event_group_start: Option<::models::Date>,
  /// The date and time at which the financial event group is closed. In ISO 8601 date time format.
  #[serde(rename = "FinancialEventGroupEnd")]
  financial_event_group_end: Option<::models::Date>
}

impl FinancialEventGroup {
  /// Information related to a financial event group.
  pub fn new() -> FinancialEventGroup {
    FinancialEventGroup {
      financial_event_group_id: None,
      processing_status: None,
      fund_transfer_status: None,
      original_total: None,
      converted_total: None,
      fund_transfer_date: None,
      trace_id: None,
      account_tail: None,
      beginning_balance: None,
      financial_event_group_start: None,
      financial_event_group_end: None
    }
  }

  pub fn set_financial_event_group_id(&mut self, financial_event_group_id: String) {
    self.financial_event_group_id = Some(financial_event_group_id);
  }

  pub fn with_financial_event_group_id(mut self, financial_event_group_id: String) -> FinancialEventGroup {
    self.financial_event_group_id = Some(financial_event_group_id);
    self
  }

  pub fn financial_event_group_id(&self) -> Option<&String> {
    self.financial_event_group_id.as_ref()
  }

  pub fn reset_financial_event_group_id(&mut self) {
    self.financial_event_group_id = None;
  }

  pub fn set_processing_status(&mut self, processing_status: String) {
    self.processing_status = Some(processing_status);
  }

  pub fn with_processing_status(mut self, processing_status: String) -> FinancialEventGroup {
    self.processing_status = Some(processing_status);
    self
  }

  pub fn processing_status(&self) -> Option<&String> {
    self.processing_status.as_ref()
  }

  pub fn reset_processing_status(&mut self) {
    self.processing_status = None;
  }

  pub fn set_fund_transfer_status(&mut self, fund_transfer_status: String) {
    self.fund_transfer_status = Some(fund_transfer_status);
  }

  pub fn with_fund_transfer_status(mut self, fund_transfer_status: String) -> FinancialEventGroup {
    self.fund_transfer_status = Some(fund_transfer_status);
    self
  }

  pub fn fund_transfer_status(&self) -> Option<&String> {
    self.fund_transfer_status.as_ref()
  }

  pub fn reset_fund_transfer_status(&mut self) {
    self.fund_transfer_status = None;
  }

  pub fn set_original_total(&mut self, original_total: ::models::Currency) {
    self.original_total = Some(original_total);
  }

  pub fn with_original_total(mut self, original_total: ::models::Currency) -> FinancialEventGroup {
    self.original_total = Some(original_total);
    self
  }

  pub fn original_total(&self) -> Option<&::models::Currency> {
    self.original_total.as_ref()
  }

  pub fn reset_original_total(&mut self) {
    self.original_total = None;
  }

  pub fn set_converted_total(&mut self, converted_total: ::models::Currency) {
    self.converted_total = Some(converted_total);
  }

  pub fn with_converted_total(mut self, converted_total: ::models::Currency) -> FinancialEventGroup {
    self.converted_total = Some(converted_total);
    self
  }

  pub fn converted_total(&self) -> Option<&::models::Currency> {
    self.converted_total.as_ref()
  }

  pub fn reset_converted_total(&mut self) {
    self.converted_total = None;
  }

  pub fn set_fund_transfer_date(&mut self, fund_transfer_date: ::models::Date) {
    self.fund_transfer_date = Some(fund_transfer_date);
  }

  pub fn with_fund_transfer_date(mut self, fund_transfer_date: ::models::Date) -> FinancialEventGroup {
    self.fund_transfer_date = Some(fund_transfer_date);
    self
  }

  pub fn fund_transfer_date(&self) -> Option<&::models::Date> {
    self.fund_transfer_date.as_ref()
  }

  pub fn reset_fund_transfer_date(&mut self) {
    self.fund_transfer_date = None;
  }

  pub fn set_trace_id(&mut self, trace_id: String) {
    self.trace_id = Some(trace_id);
  }

  pub fn with_trace_id(mut self, trace_id: String) -> FinancialEventGroup {
    self.trace_id = Some(trace_id);
    self
  }

  pub fn trace_id(&self) -> Option<&String> {
    self.trace_id.as_ref()
  }

  pub fn reset_trace_id(&mut self) {
    self.trace_id = None;
  }

  pub fn set_account_tail(&mut self, account_tail: String) {
    self.account_tail = Some(account_tail);
  }

  pub fn with_account_tail(mut self, account_tail: String) -> FinancialEventGroup {
    self.account_tail = Some(account_tail);
    self
  }

  pub fn account_tail(&self) -> Option<&String> {
    self.account_tail.as_ref()
  }

  pub fn reset_account_tail(&mut self) {
    self.account_tail = None;
  }

  pub fn set_beginning_balance(&mut self, beginning_balance: ::models::Currency) {
    self.beginning_balance = Some(beginning_balance);
  }

  pub fn with_beginning_balance(mut self, beginning_balance: ::models::Currency) -> FinancialEventGroup {
    self.beginning_balance = Some(beginning_balance);
    self
  }

  pub fn beginning_balance(&self) -> Option<&::models::Currency> {
    self.beginning_balance.as_ref()
  }

  pub fn reset_beginning_balance(&mut self) {
    self.beginning_balance = None;
  }

  pub fn set_financial_event_group_start(&mut self, financial_event_group_start: ::models::Date) {
    self.financial_event_group_start = Some(financial_event_group_start);
  }

  pub fn with_financial_event_group_start(mut self, financial_event_group_start: ::models::Date) -> FinancialEventGroup {
    self.financial_event_group_start = Some(financial_event_group_start);
    self
  }

  pub fn financial_event_group_start(&self) -> Option<&::models::Date> {
    self.financial_event_group_start.as_ref()
  }

  pub fn reset_financial_event_group_start(&mut self) {
    self.financial_event_group_start = None;
  }

  pub fn set_financial_event_group_end(&mut self, financial_event_group_end: ::models::Date) {
    self.financial_event_group_end = Some(financial_event_group_end);
  }

  pub fn with_financial_event_group_end(mut self, financial_event_group_end: ::models::Date) -> FinancialEventGroup {
    self.financial_event_group_end = Some(financial_event_group_end);
    self
  }

  pub fn financial_event_group_end(&self) -> Option<&::models::Date> {
    self.financial_event_group_end.as_ref()
  }

  pub fn reset_financial_event_group_end(&mut self) {
    self.financial_event_group_end = None;
  }

}



