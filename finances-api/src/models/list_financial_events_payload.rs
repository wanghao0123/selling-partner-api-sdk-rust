/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ListFinancialEventsPayload : The payload for the listFinancialEvents operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ListFinancialEventsPayload {
  /// When present and not empty, pass this string token in the next request to return the next response page.
  #[serde(rename = "NextToken")]
  next_token: Option<String>,
  #[serde(rename = "FinancialEvents")]
  financial_events: Option<::models::FinancialEvents>
}

impl ListFinancialEventsPayload {
  /// The payload for the listFinancialEvents operation.
  pub fn new() -> ListFinancialEventsPayload {
    ListFinancialEventsPayload {
      next_token: None,
      financial_events: None
    }
  }

  pub fn set_next_token(&mut self, next_token: String) {
    self.next_token = Some(next_token);
  }

  pub fn with_next_token(mut self, next_token: String) -> ListFinancialEventsPayload {
    self.next_token = Some(next_token);
    self
  }

  pub fn next_token(&self) -> Option<&String> {
    self.next_token.as_ref()
  }

  pub fn reset_next_token(&mut self) {
    self.next_token = None;
  }

  pub fn set_financial_events(&mut self, financial_events: ::models::FinancialEvents) {
    self.financial_events = Some(financial_events);
  }

  pub fn with_financial_events(mut self, financial_events: ::models::FinancialEvents) -> ListFinancialEventsPayload {
    self.financial_events = Some(financial_events);
    self
  }

  pub fn financial_events(&self) -> Option<&::models::FinancialEvents> {
    self.financial_events.as_ref()
  }

  pub fn reset_financial_events(&mut self) {
    self.financial_events = None;
  }

}



