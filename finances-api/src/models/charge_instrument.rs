/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ChargeInstrument : A payment instrument.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChargeInstrument {
  /// A short description of the charge instrument.
  #[serde(rename = "Description")]
  description: Option<String>,
  /// The account tail (trailing digits) of the charge instrument.
  #[serde(rename = "Tail")]
  tail: Option<String>,
  /// The amount charged to this charge instrument.
  #[serde(rename = "Amount")]
  amount: Option<::models::Currency>
}

impl ChargeInstrument {
  /// A payment instrument.
  pub fn new() -> ChargeInstrument {
    ChargeInstrument {
      description: None,
      tail: None,
      amount: None
    }
  }

  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> ChargeInstrument {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_tail(&mut self, tail: String) {
    self.tail = Some(tail);
  }

  pub fn with_tail(mut self, tail: String) -> ChargeInstrument {
    self.tail = Some(tail);
    self
  }

  pub fn tail(&self) -> Option<&String> {
    self.tail.as_ref()
  }

  pub fn reset_tail(&mut self) {
    self.tail = None;
  }

  pub fn set_amount(&mut self, amount: ::models::Currency) {
    self.amount = Some(amount);
  }

  pub fn with_amount(mut self, amount: ::models::Currency) -> ChargeInstrument {
    self.amount = Some(amount);
    self
  }

  pub fn amount(&self) -> Option<&::models::Currency> {
    self.amount.as_ref()
  }

  pub fn reset_amount(&mut self) {
    self.amount = None;
  }

}



