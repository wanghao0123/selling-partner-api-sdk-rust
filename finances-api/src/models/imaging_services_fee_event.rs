/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ImagingServicesFeeEvent : A fee event related to Amazon Imaging services.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ImagingServicesFeeEvent {
  /// The identifier for the imaging services request.
  #[serde(rename = "ImagingRequestBillingItemID")]
  imaging_request_billing_item_id: Option<String>,
  /// The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested.
  #[serde(rename = "ASIN")]
  ASIN: Option<String>,
  /// The date and time when the financial event was posted.
  #[serde(rename = "PostedDate")]
  posted_date: Option<::models::Date>,
  /// A list of fees associated with the event.
  #[serde(rename = "FeeList")]
  fee_list: Option<::models::FeeComponentList>
}

impl ImagingServicesFeeEvent {
  /// A fee event related to Amazon Imaging services.
  pub fn new() -> ImagingServicesFeeEvent {
    ImagingServicesFeeEvent {
      imaging_request_billing_item_id: None,
      ASIN: None,
      posted_date: None,
      fee_list: None
    }
  }

  pub fn set_imaging_request_billing_item_id(&mut self, imaging_request_billing_item_id: String) {
    self.imaging_request_billing_item_id = Some(imaging_request_billing_item_id);
  }

  pub fn with_imaging_request_billing_item_id(mut self, imaging_request_billing_item_id: String) -> ImagingServicesFeeEvent {
    self.imaging_request_billing_item_id = Some(imaging_request_billing_item_id);
    self
  }

  pub fn imaging_request_billing_item_id(&self) -> Option<&String> {
    self.imaging_request_billing_item_id.as_ref()
  }

  pub fn reset_imaging_request_billing_item_id(&mut self) {
    self.imaging_request_billing_item_id = None;
  }

  pub fn set_ASIN(&mut self, ASIN: String) {
    self.ASIN = Some(ASIN);
  }

  pub fn with_ASIN(mut self, ASIN: String) -> ImagingServicesFeeEvent {
    self.ASIN = Some(ASIN);
    self
  }

  pub fn ASIN(&self) -> Option<&String> {
    self.ASIN.as_ref()
  }

  pub fn reset_ASIN(&mut self) {
    self.ASIN = None;
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> ImagingServicesFeeEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_fee_list(&mut self, fee_list: ::models::FeeComponentList) {
    self.fee_list = Some(fee_list);
  }

  pub fn with_fee_list(mut self, fee_list: ::models::FeeComponentList) -> ImagingServicesFeeEvent {
    self.fee_list = Some(fee_list);
    self
  }

  pub fn fee_list(&self) -> Option<&::models::FeeComponentList> {
    self.fee_list.as_ref()
  }

  pub fn reset_fee_list(&mut self) {
    self.fee_list = None;
  }

}



