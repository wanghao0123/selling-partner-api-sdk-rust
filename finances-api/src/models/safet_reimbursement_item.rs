/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SafetReimbursementItem : An item from a SAFE-T claim reimbursement.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SafetReimbursementItem {
  /// A list of charges associated with the item.
  #[serde(rename = "itemChargeList")]
  item_charge_list: Option<::models::ChargeComponentList>,
  /// The description of the item as shown on the product detail page on the retail website.
  #[serde(rename = "productDescription")]
  product_description: Option<String>,
  /// The number of units of the item being reimbursed.
  #[serde(rename = "quantity")]
  quantity: Option<String>
}

impl SafetReimbursementItem {
  /// An item from a SAFE-T claim reimbursement.
  pub fn new() -> SafetReimbursementItem {
    SafetReimbursementItem {
      item_charge_list: None,
      product_description: None,
      quantity: None
    }
  }

  pub fn set_item_charge_list(&mut self, item_charge_list: ::models::ChargeComponentList) {
    self.item_charge_list = Some(item_charge_list);
  }

  pub fn with_item_charge_list(mut self, item_charge_list: ::models::ChargeComponentList) -> SafetReimbursementItem {
    self.item_charge_list = Some(item_charge_list);
    self
  }

  pub fn item_charge_list(&self) -> Option<&::models::ChargeComponentList> {
    self.item_charge_list.as_ref()
  }

  pub fn reset_item_charge_list(&mut self) {
    self.item_charge_list = None;
  }

  pub fn set_product_description(&mut self, product_description: String) {
    self.product_description = Some(product_description);
  }

  pub fn with_product_description(mut self, product_description: String) -> SafetReimbursementItem {
    self.product_description = Some(product_description);
    self
  }

  pub fn product_description(&self) -> Option<&String> {
    self.product_description.as_ref()
  }

  pub fn reset_product_description(&mut self) {
    self.product_description = None;
  }

  pub fn set_quantity(&mut self, quantity: String) {
    self.quantity = Some(quantity);
  }

  pub fn with_quantity(mut self, quantity: String) -> SafetReimbursementItem {
    self.quantity = Some(quantity);
    self
  }

  pub fn quantity(&self) -> Option<&String> {
    self.quantity.as_ref()
  }

  pub fn reset_quantity(&mut self) {
    self.quantity = None;
  }

}



