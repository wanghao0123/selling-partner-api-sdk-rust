/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AdjustmentEvent : An adjustment to the seller's account.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AdjustmentEvent {
  /// The type of adjustment.  Possible values:  * FBAInventoryReimbursement - An FBA inventory reimbursement to a seller's account. This occurs if a seller's inventory is damaged.  * ReserveEvent - A reserve event that is generated at the time of a settlement period closing. This occurs when some money from a seller's account is held back.  * PostageBilling - The amount paid by a seller for shipping labels.  * PostageRefund - The reimbursement of shipping labels purchased for orders that were canceled or refunded.  * LostOrDamagedReimbursement - An Amazon Easy Ship reimbursement to a seller's account for a package that we lost or damaged.  * CanceledButPickedUpReimbursement - An Amazon Easy Ship reimbursement to a seller's account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace.  * ReimbursementClawback - An Amazon Easy Ship reimbursement clawback from a seller's account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace.  * SellerRewards - An award credited to a seller's account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace.
  #[serde(rename = "AdjustmentType")]
  adjustment_type: Option<String>,
  /// The date and time when the financial event was posted.
  #[serde(rename = "PostedDate")]
  posted_date: Option<::models::Date>,
  /// The amount adjusted as part of this event.
  #[serde(rename = "AdjustmentAmount")]
  adjustment_amount: Option<::models::Currency>,
  /// A list of information about adjustments to an account.
  #[serde(rename = "AdjustmentItemList")]
  adjustment_item_list: Option<::models::AdjustmentItemList>
}

impl AdjustmentEvent {
  /// An adjustment to the seller's account.
  pub fn new() -> AdjustmentEvent {
    AdjustmentEvent {
      adjustment_type: None,
      posted_date: None,
      adjustment_amount: None,
      adjustment_item_list: None
    }
  }

  pub fn set_adjustment_type(&mut self, adjustment_type: String) {
    self.adjustment_type = Some(adjustment_type);
  }

  pub fn with_adjustment_type(mut self, adjustment_type: String) -> AdjustmentEvent {
    self.adjustment_type = Some(adjustment_type);
    self
  }

  pub fn adjustment_type(&self) -> Option<&String> {
    self.adjustment_type.as_ref()
  }

  pub fn reset_adjustment_type(&mut self) {
    self.adjustment_type = None;
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> AdjustmentEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_adjustment_amount(&mut self, adjustment_amount: ::models::Currency) {
    self.adjustment_amount = Some(adjustment_amount);
  }

  pub fn with_adjustment_amount(mut self, adjustment_amount: ::models::Currency) -> AdjustmentEvent {
    self.adjustment_amount = Some(adjustment_amount);
    self
  }

  pub fn adjustment_amount(&self) -> Option<&::models::Currency> {
    self.adjustment_amount.as_ref()
  }

  pub fn reset_adjustment_amount(&mut self) {
    self.adjustment_amount = None;
  }

  pub fn set_adjustment_item_list(&mut self, adjustment_item_list: ::models::AdjustmentItemList) {
    self.adjustment_item_list = Some(adjustment_item_list);
  }

  pub fn with_adjustment_item_list(mut self, adjustment_item_list: ::models::AdjustmentItemList) -> AdjustmentEvent {
    self.adjustment_item_list = Some(adjustment_item_list);
    self
  }

  pub fn adjustment_item_list(&self) -> Option<&::models::AdjustmentItemList> {
    self.adjustment_item_list.as_ref()
  }

  pub fn reset_adjustment_item_list(&mut self) {
    self.adjustment_item_list = None;
  }

}



