/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FeeComponent : A fee associated with the event.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FeeComponent {
  /// The type of fee. For more information about Selling on Amazon fees, see [Selling on Amazon Fee Schedule](https://sellercentral.amazon.com/gp/help/200336920) on Seller Central. For more information about Fulfillment by Amazon fees, see [FBA features, services and fees](https://sellercentral.amazon.com/gp/help/201074400) on Seller Central.
  #[serde(rename = "FeeType")]
  fee_type: Option<String>,
  /// The amount of the fee.
  #[serde(rename = "FeeAmount")]
  fee_amount: Option<::models::Currency>
}

impl FeeComponent {
  /// A fee associated with the event.
  pub fn new() -> FeeComponent {
    FeeComponent {
      fee_type: None,
      fee_amount: None
    }
  }

  pub fn set_fee_type(&mut self, fee_type: String) {
    self.fee_type = Some(fee_type);
  }

  pub fn with_fee_type(mut self, fee_type: String) -> FeeComponent {
    self.fee_type = Some(fee_type);
    self
  }

  pub fn fee_type(&self) -> Option<&String> {
    self.fee_type.as_ref()
  }

  pub fn reset_fee_type(&mut self) {
    self.fee_type = None;
  }

  pub fn set_fee_amount(&mut self, fee_amount: ::models::Currency) {
    self.fee_amount = Some(fee_amount);
  }

  pub fn with_fee_amount(mut self, fee_amount: ::models::Currency) -> FeeComponent {
    self.fee_amount = Some(fee_amount);
    self
  }

  pub fn fee_amount(&self) -> Option<&::models::Currency> {
    self.fee_amount.as_ref()
  }

  pub fn reset_fee_amount(&mut self) {
    self.fee_amount = None;
  }

}



