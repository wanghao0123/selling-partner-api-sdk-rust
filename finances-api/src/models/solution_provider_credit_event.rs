/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SolutionProviderCreditEvent : A credit given to a solution provider.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SolutionProviderCreditEvent {
  /// The transaction type.
  #[serde(rename = "ProviderTransactionType")]
  provider_transaction_type: Option<String>,
  /// A seller-defined identifier for an order.
  #[serde(rename = "SellerOrderId")]
  seller_order_id: Option<String>,
  /// The identifier of the marketplace where the order was placed.
  #[serde(rename = "MarketplaceId")]
  marketplace_id: Option<String>,
  /// The two-letter country code of the country associated with the marketplace where the order was placed.
  #[serde(rename = "MarketplaceCountryCode")]
  marketplace_country_code: Option<String>,
  /// The Amazon-defined identifier of the seller.
  #[serde(rename = "SellerId")]
  seller_id: Option<String>,
  /// The store name where the payment event occurred.
  #[serde(rename = "SellerStoreName")]
  seller_store_name: Option<String>,
  /// The Amazon-defined identifier of the solution provider.
  #[serde(rename = "ProviderId")]
  provider_id: Option<String>,
  /// The store name where the payment event occurred.
  #[serde(rename = "ProviderStoreName")]
  provider_store_name: Option<String>,
  /// The amount of the credit.
  #[serde(rename = "TransactionAmount")]
  transaction_amount: Option<::models::Currency>,
  /// The date and time that the credit transaction was created, in ISO 8601 date time format.
  #[serde(rename = "TransactionCreationDate")]
  transaction_creation_date: Option<::models::Date>
}

impl SolutionProviderCreditEvent {
  /// A credit given to a solution provider.
  pub fn new() -> SolutionProviderCreditEvent {
    SolutionProviderCreditEvent {
      provider_transaction_type: None,
      seller_order_id: None,
      marketplace_id: None,
      marketplace_country_code: None,
      seller_id: None,
      seller_store_name: None,
      provider_id: None,
      provider_store_name: None,
      transaction_amount: None,
      transaction_creation_date: None
    }
  }

  pub fn set_provider_transaction_type(&mut self, provider_transaction_type: String) {
    self.provider_transaction_type = Some(provider_transaction_type);
  }

  pub fn with_provider_transaction_type(mut self, provider_transaction_type: String) -> SolutionProviderCreditEvent {
    self.provider_transaction_type = Some(provider_transaction_type);
    self
  }

  pub fn provider_transaction_type(&self) -> Option<&String> {
    self.provider_transaction_type.as_ref()
  }

  pub fn reset_provider_transaction_type(&mut self) {
    self.provider_transaction_type = None;
  }

  pub fn set_seller_order_id(&mut self, seller_order_id: String) {
    self.seller_order_id = Some(seller_order_id);
  }

  pub fn with_seller_order_id(mut self, seller_order_id: String) -> SolutionProviderCreditEvent {
    self.seller_order_id = Some(seller_order_id);
    self
  }

  pub fn seller_order_id(&self) -> Option<&String> {
    self.seller_order_id.as_ref()
  }

  pub fn reset_seller_order_id(&mut self) {
    self.seller_order_id = None;
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = Some(marketplace_id);
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> SolutionProviderCreditEvent {
    self.marketplace_id = Some(marketplace_id);
    self
  }

  pub fn marketplace_id(&self) -> Option<&String> {
    self.marketplace_id.as_ref()
  }

  pub fn reset_marketplace_id(&mut self) {
    self.marketplace_id = None;
  }

  pub fn set_marketplace_country_code(&mut self, marketplace_country_code: String) {
    self.marketplace_country_code = Some(marketplace_country_code);
  }

  pub fn with_marketplace_country_code(mut self, marketplace_country_code: String) -> SolutionProviderCreditEvent {
    self.marketplace_country_code = Some(marketplace_country_code);
    self
  }

  pub fn marketplace_country_code(&self) -> Option<&String> {
    self.marketplace_country_code.as_ref()
  }

  pub fn reset_marketplace_country_code(&mut self) {
    self.marketplace_country_code = None;
  }

  pub fn set_seller_id(&mut self, seller_id: String) {
    self.seller_id = Some(seller_id);
  }

  pub fn with_seller_id(mut self, seller_id: String) -> SolutionProviderCreditEvent {
    self.seller_id = Some(seller_id);
    self
  }

  pub fn seller_id(&self) -> Option<&String> {
    self.seller_id.as_ref()
  }

  pub fn reset_seller_id(&mut self) {
    self.seller_id = None;
  }

  pub fn set_seller_store_name(&mut self, seller_store_name: String) {
    self.seller_store_name = Some(seller_store_name);
  }

  pub fn with_seller_store_name(mut self, seller_store_name: String) -> SolutionProviderCreditEvent {
    self.seller_store_name = Some(seller_store_name);
    self
  }

  pub fn seller_store_name(&self) -> Option<&String> {
    self.seller_store_name.as_ref()
  }

  pub fn reset_seller_store_name(&mut self) {
    self.seller_store_name = None;
  }

  pub fn set_provider_id(&mut self, provider_id: String) {
    self.provider_id = Some(provider_id);
  }

  pub fn with_provider_id(mut self, provider_id: String) -> SolutionProviderCreditEvent {
    self.provider_id = Some(provider_id);
    self
  }

  pub fn provider_id(&self) -> Option<&String> {
    self.provider_id.as_ref()
  }

  pub fn reset_provider_id(&mut self) {
    self.provider_id = None;
  }

  pub fn set_provider_store_name(&mut self, provider_store_name: String) {
    self.provider_store_name = Some(provider_store_name);
  }

  pub fn with_provider_store_name(mut self, provider_store_name: String) -> SolutionProviderCreditEvent {
    self.provider_store_name = Some(provider_store_name);
    self
  }

  pub fn provider_store_name(&self) -> Option<&String> {
    self.provider_store_name.as_ref()
  }

  pub fn reset_provider_store_name(&mut self) {
    self.provider_store_name = None;
  }

  pub fn set_transaction_amount(&mut self, transaction_amount: ::models::Currency) {
    self.transaction_amount = Some(transaction_amount);
  }

  pub fn with_transaction_amount(mut self, transaction_amount: ::models::Currency) -> SolutionProviderCreditEvent {
    self.transaction_amount = Some(transaction_amount);
    self
  }

  pub fn transaction_amount(&self) -> Option<&::models::Currency> {
    self.transaction_amount.as_ref()
  }

  pub fn reset_transaction_amount(&mut self) {
    self.transaction_amount = None;
  }

  pub fn set_transaction_creation_date(&mut self, transaction_creation_date: ::models::Date) {
    self.transaction_creation_date = Some(transaction_creation_date);
  }

  pub fn with_transaction_creation_date(mut self, transaction_creation_date: ::models::Date) -> SolutionProviderCreditEvent {
    self.transaction_creation_date = Some(transaction_creation_date);
    self
  }

  pub fn transaction_creation_date(&self) -> Option<&::models::Date> {
    self.transaction_creation_date.as_ref()
  }

  pub fn reset_transaction_creation_date(&mut self) {
    self.transaction_creation_date = None;
  }

}



