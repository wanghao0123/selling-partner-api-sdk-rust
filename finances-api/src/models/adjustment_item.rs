/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AdjustmentItem : An item in an adjustment to the seller's account.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AdjustmentItem {
  /// Represents the number of units in the seller's inventory when the AdustmentType is FBAInventoryReimbursement.
  #[serde(rename = "Quantity")]
  quantity: Option<String>,
  /// The per unit value of the item.
  #[serde(rename = "PerUnitAmount")]
  per_unit_amount: Option<::models::Currency>,
  /// The total value of the item.
  #[serde(rename = "TotalAmount")]
  total_amount: Option<::models::Currency>,
  /// The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
  #[serde(rename = "SellerSKU")]
  seller_sku: Option<String>,
  /// A unique identifier assigned to products stored in and fulfilled from a fulfillment center.
  #[serde(rename = "FnSKU")]
  fn_sku: Option<String>,
  /// A short description of the item.
  #[serde(rename = "ProductDescription")]
  product_description: Option<String>,
  /// The Amazon Standard Identification Number (ASIN) of the item.
  #[serde(rename = "ASIN")]
  ASIN: Option<String>
}

impl AdjustmentItem {
  /// An item in an adjustment to the seller's account.
  pub fn new() -> AdjustmentItem {
    AdjustmentItem {
      quantity: None,
      per_unit_amount: None,
      total_amount: None,
      seller_sku: None,
      fn_sku: None,
      product_description: None,
      ASIN: None
    }
  }

  pub fn set_quantity(&mut self, quantity: String) {
    self.quantity = Some(quantity);
  }

  pub fn with_quantity(mut self, quantity: String) -> AdjustmentItem {
    self.quantity = Some(quantity);
    self
  }

  pub fn quantity(&self) -> Option<&String> {
    self.quantity.as_ref()
  }

  pub fn reset_quantity(&mut self) {
    self.quantity = None;
  }

  pub fn set_per_unit_amount(&mut self, per_unit_amount: ::models::Currency) {
    self.per_unit_amount = Some(per_unit_amount);
  }

  pub fn with_per_unit_amount(mut self, per_unit_amount: ::models::Currency) -> AdjustmentItem {
    self.per_unit_amount = Some(per_unit_amount);
    self
  }

  pub fn per_unit_amount(&self) -> Option<&::models::Currency> {
    self.per_unit_amount.as_ref()
  }

  pub fn reset_per_unit_amount(&mut self) {
    self.per_unit_amount = None;
  }

  pub fn set_total_amount(&mut self, total_amount: ::models::Currency) {
    self.total_amount = Some(total_amount);
  }

  pub fn with_total_amount(mut self, total_amount: ::models::Currency) -> AdjustmentItem {
    self.total_amount = Some(total_amount);
    self
  }

  pub fn total_amount(&self) -> Option<&::models::Currency> {
    self.total_amount.as_ref()
  }

  pub fn reset_total_amount(&mut self) {
    self.total_amount = None;
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = Some(seller_sku);
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> AdjustmentItem {
    self.seller_sku = Some(seller_sku);
    self
  }

  pub fn seller_sku(&self) -> Option<&String> {
    self.seller_sku.as_ref()
  }

  pub fn reset_seller_sku(&mut self) {
    self.seller_sku = None;
  }

  pub fn set_fn_sku(&mut self, fn_sku: String) {
    self.fn_sku = Some(fn_sku);
  }

  pub fn with_fn_sku(mut self, fn_sku: String) -> AdjustmentItem {
    self.fn_sku = Some(fn_sku);
    self
  }

  pub fn fn_sku(&self) -> Option<&String> {
    self.fn_sku.as_ref()
  }

  pub fn reset_fn_sku(&mut self) {
    self.fn_sku = None;
  }

  pub fn set_product_description(&mut self, product_description: String) {
    self.product_description = Some(product_description);
  }

  pub fn with_product_description(mut self, product_description: String) -> AdjustmentItem {
    self.product_description = Some(product_description);
    self
  }

  pub fn product_description(&self) -> Option<&String> {
    self.product_description.as_ref()
  }

  pub fn reset_product_description(&mut self) {
    self.product_description = None;
  }

  pub fn set_ASIN(&mut self, ASIN: String) {
    self.ASIN = Some(ASIN);
  }

  pub fn with_ASIN(mut self, ASIN: String) -> AdjustmentItem {
    self.ASIN = Some(ASIN);
    self
  }

  pub fn ASIN(&self) -> Option<&String> {
    self.ASIN.as_ref()
  }

  pub fn reset_ASIN(&mut self) {
    self.ASIN = None;
  }

}



