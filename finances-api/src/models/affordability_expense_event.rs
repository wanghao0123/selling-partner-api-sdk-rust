/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AffordabilityExpenseEvent : An expense related to an affordability promotion.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AffordabilityExpenseEvent {
  /// An Amazon-defined identifier for an order.
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: Option<String>,
  /// The date and time when the financial event was created.
  #[serde(rename = "PostedDate")]
  posted_date: Option<::models::Date>,
  /// An encrypted, Amazon-defined marketplace identifier.
  #[serde(rename = "MarketplaceId")]
  marketplace_id: Option<String>,
  /// Indicates the type of transaction.   Possible values:  * Charge - For an affordability promotion expense.  * Refund - For an affordability promotion expense reversal.
  #[serde(rename = "TransactionType")]
  transaction_type: Option<String>,
  /// The amount charged for clicks incurred under the Sponsored Products program.
  #[serde(rename = "BaseExpense")]
  base_expense: Option<::models::Currency>,
  /// Central Goods and Service Tax, charged and collected by the central government.
  #[serde(rename = "TaxTypeCGST")]
  tax_type_cgst: ::models::Currency,
  /// State Goods and Service Tax, charged and collected by the state government.
  #[serde(rename = "TaxTypeSGST")]
  tax_type_sgst: ::models::Currency,
  /// Integrated Goods and Service Tax, charged and collected by the central government.
  #[serde(rename = "TaxTypeIGST")]
  tax_type_igst: ::models::Currency,
  /// The total amount charged to the seller. TotalExpense = BaseExpense + TaxTypeIGST + TaxTypeCGST + TaxTypeSGST.
  #[serde(rename = "TotalExpense")]
  total_expense: Option<::models::Currency>
}

impl AffordabilityExpenseEvent {
  /// An expense related to an affordability promotion.
  pub fn new(tax_type_cgst: ::models::Currency, tax_type_sgst: ::models::Currency, tax_type_igst: ::models::Currency) -> AffordabilityExpenseEvent {
    AffordabilityExpenseEvent {
      amazon_order_id: None,
      posted_date: None,
      marketplace_id: None,
      transaction_type: None,
      base_expense: None,
      tax_type_cgst: tax_type_cgst,
      tax_type_sgst: tax_type_sgst,
      tax_type_igst: tax_type_igst,
      total_expense: None
    }
  }

  pub fn set_amazon_order_id(&mut self, amazon_order_id: String) {
    self.amazon_order_id = Some(amazon_order_id);
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: String) -> AffordabilityExpenseEvent {
    self.amazon_order_id = Some(amazon_order_id);
    self
  }

  pub fn amazon_order_id(&self) -> Option<&String> {
    self.amazon_order_id.as_ref()
  }

  pub fn reset_amazon_order_id(&mut self) {
    self.amazon_order_id = None;
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> AffordabilityExpenseEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = Some(marketplace_id);
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> AffordabilityExpenseEvent {
    self.marketplace_id = Some(marketplace_id);
    self
  }

  pub fn marketplace_id(&self) -> Option<&String> {
    self.marketplace_id.as_ref()
  }

  pub fn reset_marketplace_id(&mut self) {
    self.marketplace_id = None;
  }

  pub fn set_transaction_type(&mut self, transaction_type: String) {
    self.transaction_type = Some(transaction_type);
  }

  pub fn with_transaction_type(mut self, transaction_type: String) -> AffordabilityExpenseEvent {
    self.transaction_type = Some(transaction_type);
    self
  }

  pub fn transaction_type(&self) -> Option<&String> {
    self.transaction_type.as_ref()
  }

  pub fn reset_transaction_type(&mut self) {
    self.transaction_type = None;
  }

  pub fn set_base_expense(&mut self, base_expense: ::models::Currency) {
    self.base_expense = Some(base_expense);
  }

  pub fn with_base_expense(mut self, base_expense: ::models::Currency) -> AffordabilityExpenseEvent {
    self.base_expense = Some(base_expense);
    self
  }

  pub fn base_expense(&self) -> Option<&::models::Currency> {
    self.base_expense.as_ref()
  }

  pub fn reset_base_expense(&mut self) {
    self.base_expense = None;
  }

  pub fn set_tax_type_cgst(&mut self, tax_type_cgst: ::models::Currency) {
    self.tax_type_cgst = tax_type_cgst;
  }

  pub fn with_tax_type_cgst(mut self, tax_type_cgst: ::models::Currency) -> AffordabilityExpenseEvent {
    self.tax_type_cgst = tax_type_cgst;
    self
  }

  pub fn tax_type_cgst(&self) -> &::models::Currency {
    &self.tax_type_cgst
  }


  pub fn set_tax_type_sgst(&mut self, tax_type_sgst: ::models::Currency) {
    self.tax_type_sgst = tax_type_sgst;
  }

  pub fn with_tax_type_sgst(mut self, tax_type_sgst: ::models::Currency) -> AffordabilityExpenseEvent {
    self.tax_type_sgst = tax_type_sgst;
    self
  }

  pub fn tax_type_sgst(&self) -> &::models::Currency {
    &self.tax_type_sgst
  }


  pub fn set_tax_type_igst(&mut self, tax_type_igst: ::models::Currency) {
    self.tax_type_igst = tax_type_igst;
  }

  pub fn with_tax_type_igst(mut self, tax_type_igst: ::models::Currency) -> AffordabilityExpenseEvent {
    self.tax_type_igst = tax_type_igst;
    self
  }

  pub fn tax_type_igst(&self) -> &::models::Currency {
    &self.tax_type_igst
  }


  pub fn set_total_expense(&mut self, total_expense: ::models::Currency) {
    self.total_expense = Some(total_expense);
  }

  pub fn with_total_expense(mut self, total_expense: ::models::Currency) -> AffordabilityExpenseEvent {
    self.total_expense = Some(total_expense);
    self
  }

  pub fn total_expense(&self) -> Option<&::models::Currency> {
    self.total_expense.as_ref()
  }

  pub fn reset_total_expense(&mut self) {
    self.total_expense = None;
  }

}



