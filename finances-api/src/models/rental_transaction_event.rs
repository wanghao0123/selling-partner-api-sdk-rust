/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RentalTransactionEvent : An event related to a rental transaction.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RentalTransactionEvent {
  /// An Amazon-defined identifier for an order.
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: Option<String>,
  /// The type of rental event.  Possible values:  * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.  * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.  * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.  * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.  * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.  * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.  * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item.
  #[serde(rename = "RentalEventType")]
  rental_event_type: Option<String>,
  /// The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
  #[serde(rename = "ExtensionLength")]
  extension_length: Option<i32>,
  /// The date and time when the financial event was posted.
  #[serde(rename = "PostedDate")]
  posted_date: Option<::models::Date>,
  /// A list of charges associated with the rental event.
  #[serde(rename = "RentalChargeList")]
  rental_charge_list: Option<::models::ChargeComponentList>,
  /// A list of fees associated with the rental event.
  #[serde(rename = "RentalFeeList")]
  rental_fee_list: Option<::models::FeeComponentList>,
  /// The name of the marketplace.
  #[serde(rename = "MarketplaceName")]
  marketplace_name: Option<String>,
  /// The amount of money the customer originally paid to rent the item. This value is only returned for RentalChargeFailureReimbursement and RentalLostItemReimbursement events.
  #[serde(rename = "RentalInitialValue")]
  rental_initial_value: Option<::models::Currency>,
  /// The amount of money Amazon sends the seller to compensate for a lost item or a failed charge. This value is only returned for RentalChargeFailureReimbursement and RentalLostItemReimbursement events.
  #[serde(rename = "RentalReimbursement")]
  rental_reimbursement: Option<::models::Currency>,
  /// A list of taxes withheld information for a rental item.
  #[serde(rename = "RentalTaxWithheldList")]
  rental_tax_withheld_list: Option<::models::TaxWithheldComponentList>
}

impl RentalTransactionEvent {
  /// An event related to a rental transaction.
  pub fn new() -> RentalTransactionEvent {
    RentalTransactionEvent {
      amazon_order_id: None,
      rental_event_type: None,
      extension_length: None,
      posted_date: None,
      rental_charge_list: None,
      rental_fee_list: None,
      marketplace_name: None,
      rental_initial_value: None,
      rental_reimbursement: None,
      rental_tax_withheld_list: None
    }
  }

  pub fn set_amazon_order_id(&mut self, amazon_order_id: String) {
    self.amazon_order_id = Some(amazon_order_id);
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: String) -> RentalTransactionEvent {
    self.amazon_order_id = Some(amazon_order_id);
    self
  }

  pub fn amazon_order_id(&self) -> Option<&String> {
    self.amazon_order_id.as_ref()
  }

  pub fn reset_amazon_order_id(&mut self) {
    self.amazon_order_id = None;
  }

  pub fn set_rental_event_type(&mut self, rental_event_type: String) {
    self.rental_event_type = Some(rental_event_type);
  }

  pub fn with_rental_event_type(mut self, rental_event_type: String) -> RentalTransactionEvent {
    self.rental_event_type = Some(rental_event_type);
    self
  }

  pub fn rental_event_type(&self) -> Option<&String> {
    self.rental_event_type.as_ref()
  }

  pub fn reset_rental_event_type(&mut self) {
    self.rental_event_type = None;
  }

  pub fn set_extension_length(&mut self, extension_length: i32) {
    self.extension_length = Some(extension_length);
  }

  pub fn with_extension_length(mut self, extension_length: i32) -> RentalTransactionEvent {
    self.extension_length = Some(extension_length);
    self
  }

  pub fn extension_length(&self) -> Option<&i32> {
    self.extension_length.as_ref()
  }

  pub fn reset_extension_length(&mut self) {
    self.extension_length = None;
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> RentalTransactionEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_rental_charge_list(&mut self, rental_charge_list: ::models::ChargeComponentList) {
    self.rental_charge_list = Some(rental_charge_list);
  }

  pub fn with_rental_charge_list(mut self, rental_charge_list: ::models::ChargeComponentList) -> RentalTransactionEvent {
    self.rental_charge_list = Some(rental_charge_list);
    self
  }

  pub fn rental_charge_list(&self) -> Option<&::models::ChargeComponentList> {
    self.rental_charge_list.as_ref()
  }

  pub fn reset_rental_charge_list(&mut self) {
    self.rental_charge_list = None;
  }

  pub fn set_rental_fee_list(&mut self, rental_fee_list: ::models::FeeComponentList) {
    self.rental_fee_list = Some(rental_fee_list);
  }

  pub fn with_rental_fee_list(mut self, rental_fee_list: ::models::FeeComponentList) -> RentalTransactionEvent {
    self.rental_fee_list = Some(rental_fee_list);
    self
  }

  pub fn rental_fee_list(&self) -> Option<&::models::FeeComponentList> {
    self.rental_fee_list.as_ref()
  }

  pub fn reset_rental_fee_list(&mut self) {
    self.rental_fee_list = None;
  }

  pub fn set_marketplace_name(&mut self, marketplace_name: String) {
    self.marketplace_name = Some(marketplace_name);
  }

  pub fn with_marketplace_name(mut self, marketplace_name: String) -> RentalTransactionEvent {
    self.marketplace_name = Some(marketplace_name);
    self
  }

  pub fn marketplace_name(&self) -> Option<&String> {
    self.marketplace_name.as_ref()
  }

  pub fn reset_marketplace_name(&mut self) {
    self.marketplace_name = None;
  }

  pub fn set_rental_initial_value(&mut self, rental_initial_value: ::models::Currency) {
    self.rental_initial_value = Some(rental_initial_value);
  }

  pub fn with_rental_initial_value(mut self, rental_initial_value: ::models::Currency) -> RentalTransactionEvent {
    self.rental_initial_value = Some(rental_initial_value);
    self
  }

  pub fn rental_initial_value(&self) -> Option<&::models::Currency> {
    self.rental_initial_value.as_ref()
  }

  pub fn reset_rental_initial_value(&mut self) {
    self.rental_initial_value = None;
  }

  pub fn set_rental_reimbursement(&mut self, rental_reimbursement: ::models::Currency) {
    self.rental_reimbursement = Some(rental_reimbursement);
  }

  pub fn with_rental_reimbursement(mut self, rental_reimbursement: ::models::Currency) -> RentalTransactionEvent {
    self.rental_reimbursement = Some(rental_reimbursement);
    self
  }

  pub fn rental_reimbursement(&self) -> Option<&::models::Currency> {
    self.rental_reimbursement.as_ref()
  }

  pub fn reset_rental_reimbursement(&mut self) {
    self.rental_reimbursement = None;
  }

  pub fn set_rental_tax_withheld_list(&mut self, rental_tax_withheld_list: ::models::TaxWithheldComponentList) {
    self.rental_tax_withheld_list = Some(rental_tax_withheld_list);
  }

  pub fn with_rental_tax_withheld_list(mut self, rental_tax_withheld_list: ::models::TaxWithheldComponentList) -> RentalTransactionEvent {
    self.rental_tax_withheld_list = Some(rental_tax_withheld_list);
    self
  }

  pub fn rental_tax_withheld_list(&self) -> Option<&::models::TaxWithheldComponentList> {
    self.rental_tax_withheld_list.as_ref()
  }

  pub fn reset_rental_tax_withheld_list(&mut self) {
    self.rental_tax_withheld_list = None;
  }

}



