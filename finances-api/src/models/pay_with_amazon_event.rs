/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PayWithAmazonEvent : An event related to the seller's Pay with Amazon account.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PayWithAmazonEvent {
  /// An order identifier that is specified by the seller.
  #[serde(rename = "SellerOrderId")]
  seller_order_id: Option<String>,
  /// The date and time when the payment transaction is posted. In ISO 8601 date time format.
  #[serde(rename = "TransactionPostedDate")]
  transaction_posted_date: Option<::models::Date>,
  /// The type of business object.
  #[serde(rename = "BusinessObjectType")]
  business_object_type: Option<String>,
  /// The sales channel for the transaction.
  #[serde(rename = "SalesChannel")]
  sales_channel: Option<String>,
  /// The charge associated with the event.
  #[serde(rename = "Charge")]
  charge: Option<::models::ChargeComponent>,
  /// A list of fees associated with the event.
  #[serde(rename = "FeeList")]
  fee_list: Option<::models::FeeComponentList>,
  /// The type of payment.  Possible values:  * Sales
  #[serde(rename = "PaymentAmountType")]
  payment_amount_type: Option<String>,
  /// A short description of this payment event.
  #[serde(rename = "AmountDescription")]
  amount_description: Option<String>,
  /// The fulfillment channel.  Possible values:  * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)  * MFN - Merchant Fulfillment Network (self-fulfilled)
  #[serde(rename = "FulfillmentChannel")]
  fulfillment_channel: Option<String>,
  /// The store name where the event occurred.
  #[serde(rename = "StoreName")]
  store_name: Option<String>
}

impl PayWithAmazonEvent {
  /// An event related to the seller's Pay with Amazon account.
  pub fn new() -> PayWithAmazonEvent {
    PayWithAmazonEvent {
      seller_order_id: None,
      transaction_posted_date: None,
      business_object_type: None,
      sales_channel: None,
      charge: None,
      fee_list: None,
      payment_amount_type: None,
      amount_description: None,
      fulfillment_channel: None,
      store_name: None
    }
  }

  pub fn set_seller_order_id(&mut self, seller_order_id: String) {
    self.seller_order_id = Some(seller_order_id);
  }

  pub fn with_seller_order_id(mut self, seller_order_id: String) -> PayWithAmazonEvent {
    self.seller_order_id = Some(seller_order_id);
    self
  }

  pub fn seller_order_id(&self) -> Option<&String> {
    self.seller_order_id.as_ref()
  }

  pub fn reset_seller_order_id(&mut self) {
    self.seller_order_id = None;
  }

  pub fn set_transaction_posted_date(&mut self, transaction_posted_date: ::models::Date) {
    self.transaction_posted_date = Some(transaction_posted_date);
  }

  pub fn with_transaction_posted_date(mut self, transaction_posted_date: ::models::Date) -> PayWithAmazonEvent {
    self.transaction_posted_date = Some(transaction_posted_date);
    self
  }

  pub fn transaction_posted_date(&self) -> Option<&::models::Date> {
    self.transaction_posted_date.as_ref()
  }

  pub fn reset_transaction_posted_date(&mut self) {
    self.transaction_posted_date = None;
  }

  pub fn set_business_object_type(&mut self, business_object_type: String) {
    self.business_object_type = Some(business_object_type);
  }

  pub fn with_business_object_type(mut self, business_object_type: String) -> PayWithAmazonEvent {
    self.business_object_type = Some(business_object_type);
    self
  }

  pub fn business_object_type(&self) -> Option<&String> {
    self.business_object_type.as_ref()
  }

  pub fn reset_business_object_type(&mut self) {
    self.business_object_type = None;
  }

  pub fn set_sales_channel(&mut self, sales_channel: String) {
    self.sales_channel = Some(sales_channel);
  }

  pub fn with_sales_channel(mut self, sales_channel: String) -> PayWithAmazonEvent {
    self.sales_channel = Some(sales_channel);
    self
  }

  pub fn sales_channel(&self) -> Option<&String> {
    self.sales_channel.as_ref()
  }

  pub fn reset_sales_channel(&mut self) {
    self.sales_channel = None;
  }

  pub fn set_charge(&mut self, charge: ::models::ChargeComponent) {
    self.charge = Some(charge);
  }

  pub fn with_charge(mut self, charge: ::models::ChargeComponent) -> PayWithAmazonEvent {
    self.charge = Some(charge);
    self
  }

  pub fn charge(&self) -> Option<&::models::ChargeComponent> {
    self.charge.as_ref()
  }

  pub fn reset_charge(&mut self) {
    self.charge = None;
  }

  pub fn set_fee_list(&mut self, fee_list: ::models::FeeComponentList) {
    self.fee_list = Some(fee_list);
  }

  pub fn with_fee_list(mut self, fee_list: ::models::FeeComponentList) -> PayWithAmazonEvent {
    self.fee_list = Some(fee_list);
    self
  }

  pub fn fee_list(&self) -> Option<&::models::FeeComponentList> {
    self.fee_list.as_ref()
  }

  pub fn reset_fee_list(&mut self) {
    self.fee_list = None;
  }

  pub fn set_payment_amount_type(&mut self, payment_amount_type: String) {
    self.payment_amount_type = Some(payment_amount_type);
  }

  pub fn with_payment_amount_type(mut self, payment_amount_type: String) -> PayWithAmazonEvent {
    self.payment_amount_type = Some(payment_amount_type);
    self
  }

  pub fn payment_amount_type(&self) -> Option<&String> {
    self.payment_amount_type.as_ref()
  }

  pub fn reset_payment_amount_type(&mut self) {
    self.payment_amount_type = None;
  }

  pub fn set_amount_description(&mut self, amount_description: String) {
    self.amount_description = Some(amount_description);
  }

  pub fn with_amount_description(mut self, amount_description: String) -> PayWithAmazonEvent {
    self.amount_description = Some(amount_description);
    self
  }

  pub fn amount_description(&self) -> Option<&String> {
    self.amount_description.as_ref()
  }

  pub fn reset_amount_description(&mut self) {
    self.amount_description = None;
  }

  pub fn set_fulfillment_channel(&mut self, fulfillment_channel: String) {
    self.fulfillment_channel = Some(fulfillment_channel);
  }

  pub fn with_fulfillment_channel(mut self, fulfillment_channel: String) -> PayWithAmazonEvent {
    self.fulfillment_channel = Some(fulfillment_channel);
    self
  }

  pub fn fulfillment_channel(&self) -> Option<&String> {
    self.fulfillment_channel.as_ref()
  }

  pub fn reset_fulfillment_channel(&mut self) {
    self.fulfillment_channel = None;
  }

  pub fn set_store_name(&mut self, store_name: String) {
    self.store_name = Some(store_name);
  }

  pub fn with_store_name(mut self, store_name: String) -> PayWithAmazonEvent {
    self.store_name = Some(store_name);
    self
  }

  pub fn store_name(&self) -> Option<&String> {
    self.store_name.as_ref()
  }

  pub fn reset_store_name(&mut self) {
    self.store_name = None;
  }

}



