/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Currency : A currency type and amount.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Currency {
  /// The three-digit currency code in ISO 4217 format.
  #[serde(rename = "CurrencyCode")]
  currency_code: Option<String>,
  /// The monetary value.
  #[serde(rename = "CurrencyAmount")]
  currency_amount: Option<::models::BigDecimal>
}

impl Currency {
  /// A currency type and amount.
  pub fn new() -> Currency {
    Currency {
      currency_code: None,
      currency_amount: None
    }
  }

  pub fn set_currency_code(&mut self, currency_code: String) {
    self.currency_code = Some(currency_code);
  }

  pub fn with_currency_code(mut self, currency_code: String) -> Currency {
    self.currency_code = Some(currency_code);
    self
  }

  pub fn currency_code(&self) -> Option<&String> {
    self.currency_code.as_ref()
  }

  pub fn reset_currency_code(&mut self) {
    self.currency_code = None;
  }

  pub fn set_currency_amount(&mut self, currency_amount: ::models::BigDecimal) {
    self.currency_amount = Some(currency_amount);
  }

  pub fn with_currency_amount(mut self, currency_amount: ::models::BigDecimal) -> Currency {
    self.currency_amount = Some(currency_amount);
    self
  }

  pub fn currency_amount(&self) -> Option<&::models::BigDecimal> {
    self.currency_amount.as_ref()
  }

  pub fn reset_currency_amount(&mut self) {
    self.currency_amount = None;
  }

}



