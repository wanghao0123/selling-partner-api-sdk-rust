/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RetrochargeEvent : A retrocharge or retrocharge reversal.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RetrochargeEvent {
  /// The type of event.  Possible values:  * Retrocharge  * RetrochargeReversal
  #[serde(rename = "RetrochargeEventType")]
  retrocharge_event_type: Option<String>,
  /// An Amazon-defined identifier for an order.
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: Option<String>,
  /// The date and time when the financial event was posted.
  #[serde(rename = "PostedDate")]
  posted_date: Option<::models::Date>,
  /// The base tax associated with the retrocharge event.
  #[serde(rename = "BaseTax")]
  base_tax: Option<::models::Currency>,
  /// The shipping tax associated with the retrocharge event.
  #[serde(rename = "ShippingTax")]
  shipping_tax: Option<::models::Currency>,
  /// The name of the marketplace where the retrocharge event occurred.
  #[serde(rename = "MarketplaceName")]
  marketplace_name: Option<String>,
  /// A list of information about taxes withheld.
  #[serde(rename = "RetrochargeTaxWithheldList")]
  retrocharge_tax_withheld_list: Option<::models::TaxWithheldComponentList>
}

impl RetrochargeEvent {
  /// A retrocharge or retrocharge reversal.
  pub fn new() -> RetrochargeEvent {
    RetrochargeEvent {
      retrocharge_event_type: None,
      amazon_order_id: None,
      posted_date: None,
      base_tax: None,
      shipping_tax: None,
      marketplace_name: None,
      retrocharge_tax_withheld_list: None
    }
  }

  pub fn set_retrocharge_event_type(&mut self, retrocharge_event_type: String) {
    self.retrocharge_event_type = Some(retrocharge_event_type);
  }

  pub fn with_retrocharge_event_type(mut self, retrocharge_event_type: String) -> RetrochargeEvent {
    self.retrocharge_event_type = Some(retrocharge_event_type);
    self
  }

  pub fn retrocharge_event_type(&self) -> Option<&String> {
    self.retrocharge_event_type.as_ref()
  }

  pub fn reset_retrocharge_event_type(&mut self) {
    self.retrocharge_event_type = None;
  }

  pub fn set_amazon_order_id(&mut self, amazon_order_id: String) {
    self.amazon_order_id = Some(amazon_order_id);
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: String) -> RetrochargeEvent {
    self.amazon_order_id = Some(amazon_order_id);
    self
  }

  pub fn amazon_order_id(&self) -> Option<&String> {
    self.amazon_order_id.as_ref()
  }

  pub fn reset_amazon_order_id(&mut self) {
    self.amazon_order_id = None;
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> RetrochargeEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_base_tax(&mut self, base_tax: ::models::Currency) {
    self.base_tax = Some(base_tax);
  }

  pub fn with_base_tax(mut self, base_tax: ::models::Currency) -> RetrochargeEvent {
    self.base_tax = Some(base_tax);
    self
  }

  pub fn base_tax(&self) -> Option<&::models::Currency> {
    self.base_tax.as_ref()
  }

  pub fn reset_base_tax(&mut self) {
    self.base_tax = None;
  }

  pub fn set_shipping_tax(&mut self, shipping_tax: ::models::Currency) {
    self.shipping_tax = Some(shipping_tax);
  }

  pub fn with_shipping_tax(mut self, shipping_tax: ::models::Currency) -> RetrochargeEvent {
    self.shipping_tax = Some(shipping_tax);
    self
  }

  pub fn shipping_tax(&self) -> Option<&::models::Currency> {
    self.shipping_tax.as_ref()
  }

  pub fn reset_shipping_tax(&mut self) {
    self.shipping_tax = None;
  }

  pub fn set_marketplace_name(&mut self, marketplace_name: String) {
    self.marketplace_name = Some(marketplace_name);
  }

  pub fn with_marketplace_name(mut self, marketplace_name: String) -> RetrochargeEvent {
    self.marketplace_name = Some(marketplace_name);
    self
  }

  pub fn marketplace_name(&self) -> Option<&String> {
    self.marketplace_name.as_ref()
  }

  pub fn reset_marketplace_name(&mut self) {
    self.marketplace_name = None;
  }

  pub fn set_retrocharge_tax_withheld_list(&mut self, retrocharge_tax_withheld_list: ::models::TaxWithheldComponentList) {
    self.retrocharge_tax_withheld_list = Some(retrocharge_tax_withheld_list);
  }

  pub fn with_retrocharge_tax_withheld_list(mut self, retrocharge_tax_withheld_list: ::models::TaxWithheldComponentList) -> RetrochargeEvent {
    self.retrocharge_tax_withheld_list = Some(retrocharge_tax_withheld_list);
    self
  }

  pub fn retrocharge_tax_withheld_list(&self) -> Option<&::models::TaxWithheldComponentList> {
    self.retrocharge_tax_withheld_list.as_ref()
  }

  pub fn reset_retrocharge_tax_withheld_list(&mut self) {
    self.retrocharge_tax_withheld_list = None;
  }

}



