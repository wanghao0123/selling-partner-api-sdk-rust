/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Promotion : A promotion applied to an item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Promotion {
  /// The type of promotion.
  #[serde(rename = "PromotionType")]
  promotion_type: Option<String>,
  /// The seller-specified identifier for the promotion.
  #[serde(rename = "PromotionId")]
  promotion_id: Option<String>,
  /// The amount of promotional discount applied to the item.
  #[serde(rename = "PromotionAmount")]
  promotion_amount: Option<::models::Currency>
}

impl Promotion {
  /// A promotion applied to an item.
  pub fn new() -> Promotion {
    Promotion {
      promotion_type: None,
      promotion_id: None,
      promotion_amount: None
    }
  }

  pub fn set_promotion_type(&mut self, promotion_type: String) {
    self.promotion_type = Some(promotion_type);
  }

  pub fn with_promotion_type(mut self, promotion_type: String) -> Promotion {
    self.promotion_type = Some(promotion_type);
    self
  }

  pub fn promotion_type(&self) -> Option<&String> {
    self.promotion_type.as_ref()
  }

  pub fn reset_promotion_type(&mut self) {
    self.promotion_type = None;
  }

  pub fn set_promotion_id(&mut self, promotion_id: String) {
    self.promotion_id = Some(promotion_id);
  }

  pub fn with_promotion_id(mut self, promotion_id: String) -> Promotion {
    self.promotion_id = Some(promotion_id);
    self
  }

  pub fn promotion_id(&self) -> Option<&String> {
    self.promotion_id.as_ref()
  }

  pub fn reset_promotion_id(&mut self) {
    self.promotion_id = None;
  }

  pub fn set_promotion_amount(&mut self, promotion_amount: ::models::Currency) {
    self.promotion_amount = Some(promotion_amount);
  }

  pub fn with_promotion_amount(mut self, promotion_amount: ::models::Currency) -> Promotion {
    self.promotion_amount = Some(promotion_amount);
    self
  }

  pub fn promotion_amount(&self) -> Option<&::models::Currency> {
    self.promotion_amount.as_ref()
  }

  pub fn reset_promotion_amount(&mut self) {
    self.promotion_amount = None;
  }

}



