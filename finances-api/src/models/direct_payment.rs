/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DirectPayment : A payment made directly to a seller.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DirectPayment {
  /// The type of payment.  Possible values:  * StoredValueCardRevenue - The amount that is deducted from the seller's account because the seller received money through a stored value card.  * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.  * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller's account because the seller received money through a private label credit card offered by Amazon.  * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.  * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.  * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded.
  #[serde(rename = "DirectPaymentType")]
  direct_payment_type: Option<String>,
  /// The amount of the direct payment.
  #[serde(rename = "DirectPaymentAmount")]
  direct_payment_amount: Option<::models::Currency>
}

impl DirectPayment {
  /// A payment made directly to a seller.
  pub fn new() -> DirectPayment {
    DirectPayment {
      direct_payment_type: None,
      direct_payment_amount: None
    }
  }

  pub fn set_direct_payment_type(&mut self, direct_payment_type: String) {
    self.direct_payment_type = Some(direct_payment_type);
  }

  pub fn with_direct_payment_type(mut self, direct_payment_type: String) -> DirectPayment {
    self.direct_payment_type = Some(direct_payment_type);
    self
  }

  pub fn direct_payment_type(&self) -> Option<&String> {
    self.direct_payment_type.as_ref()
  }

  pub fn reset_direct_payment_type(&mut self) {
    self.direct_payment_type = None;
  }

  pub fn set_direct_payment_amount(&mut self, direct_payment_amount: ::models::Currency) {
    self.direct_payment_amount = Some(direct_payment_amount);
  }

  pub fn with_direct_payment_amount(mut self, direct_payment_amount: ::models::Currency) -> DirectPayment {
    self.direct_payment_amount = Some(direct_payment_amount);
    self
  }

  pub fn direct_payment_amount(&self) -> Option<&::models::Currency> {
    self.direct_payment_amount.as_ref()
  }

  pub fn reset_direct_payment_amount(&mut self) {
    self.direct_payment_amount = None;
  }

}



