/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ShipmentItem : An item of a shipment, refund, guarantee claim, or chargeback.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShipmentItem {
  /// The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API.
  #[serde(rename = "SellerSKU")]
  seller_sku: Option<String>,
  /// An Amazon-defined order item identifier.
  #[serde(rename = "OrderItemId")]
  order_item_id: Option<String>,
  /// An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events.
  #[serde(rename = "OrderAdjustmentItemId")]
  order_adjustment_item_id: Option<String>,
  /// The number of items shipped.
  #[serde(rename = "QuantityShipped")]
  quantity_shipped: Option<i32>,
  /// A list of charges associated with the shipment item.
  #[serde(rename = "ItemChargeList")]
  item_charge_list: Option<::models::ChargeComponentList>,
  /// A list of charge adjustments associated with the shipment item. This value is only returned for refunds, guarantee claims, and chargeback events.
  #[serde(rename = "ItemChargeAdjustmentList")]
  item_charge_adjustment_list: Option<::models::ChargeComponentList>,
  /// A list of fees associated with the shipment item.
  #[serde(rename = "ItemFeeList")]
  item_fee_list: Option<::models::FeeComponentList>,
  /// A list of fee adjustments associated with the shipment item. This value is only returned for refunds, guarantee claims, and chargeback events.
  #[serde(rename = "ItemFeeAdjustmentList")]
  item_fee_adjustment_list: Option<::models::FeeComponentList>,
  /// A list of taxes withheld information for a shipment item.
  #[serde(rename = "ItemTaxWithheldList")]
  item_tax_withheld_list: Option<::models::TaxWithheldComponentList>,
  #[serde(rename = "PromotionList")]
  promotion_list: Option<::models::PromotionList>,
  /// A list of promotion adjustments associated with the shipment item. This value is only returned for refunds, guarantee claims, and chargeback events.
  #[serde(rename = "PromotionAdjustmentList")]
  promotion_adjustment_list: Option<::models::PromotionList>,
  /// The cost of Amazon Points granted for a shipment item.
  #[serde(rename = "CostOfPointsGranted")]
  cost_of_points_granted: Option<::models::Currency>,
  /// The cost of Amazon Points returned for a shipment item. This value is only returned for refunds, guarantee claims, and chargeback events.
  #[serde(rename = "CostOfPointsReturned")]
  cost_of_points_returned: Option<::models::Currency>
}

impl ShipmentItem {
  /// An item of a shipment, refund, guarantee claim, or chargeback.
  pub fn new() -> ShipmentItem {
    ShipmentItem {
      seller_sku: None,
      order_item_id: None,
      order_adjustment_item_id: None,
      quantity_shipped: None,
      item_charge_list: None,
      item_charge_adjustment_list: None,
      item_fee_list: None,
      item_fee_adjustment_list: None,
      item_tax_withheld_list: None,
      promotion_list: None,
      promotion_adjustment_list: None,
      cost_of_points_granted: None,
      cost_of_points_returned: None
    }
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = Some(seller_sku);
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> ShipmentItem {
    self.seller_sku = Some(seller_sku);
    self
  }

  pub fn seller_sku(&self) -> Option<&String> {
    self.seller_sku.as_ref()
  }

  pub fn reset_seller_sku(&mut self) {
    self.seller_sku = None;
  }

  pub fn set_order_item_id(&mut self, order_item_id: String) {
    self.order_item_id = Some(order_item_id);
  }

  pub fn with_order_item_id(mut self, order_item_id: String) -> ShipmentItem {
    self.order_item_id = Some(order_item_id);
    self
  }

  pub fn order_item_id(&self) -> Option<&String> {
    self.order_item_id.as_ref()
  }

  pub fn reset_order_item_id(&mut self) {
    self.order_item_id = None;
  }

  pub fn set_order_adjustment_item_id(&mut self, order_adjustment_item_id: String) {
    self.order_adjustment_item_id = Some(order_adjustment_item_id);
  }

  pub fn with_order_adjustment_item_id(mut self, order_adjustment_item_id: String) -> ShipmentItem {
    self.order_adjustment_item_id = Some(order_adjustment_item_id);
    self
  }

  pub fn order_adjustment_item_id(&self) -> Option<&String> {
    self.order_adjustment_item_id.as_ref()
  }

  pub fn reset_order_adjustment_item_id(&mut self) {
    self.order_adjustment_item_id = None;
  }

  pub fn set_quantity_shipped(&mut self, quantity_shipped: i32) {
    self.quantity_shipped = Some(quantity_shipped);
  }

  pub fn with_quantity_shipped(mut self, quantity_shipped: i32) -> ShipmentItem {
    self.quantity_shipped = Some(quantity_shipped);
    self
  }

  pub fn quantity_shipped(&self) -> Option<&i32> {
    self.quantity_shipped.as_ref()
  }

  pub fn reset_quantity_shipped(&mut self) {
    self.quantity_shipped = None;
  }

  pub fn set_item_charge_list(&mut self, item_charge_list: ::models::ChargeComponentList) {
    self.item_charge_list = Some(item_charge_list);
  }

  pub fn with_item_charge_list(mut self, item_charge_list: ::models::ChargeComponentList) -> ShipmentItem {
    self.item_charge_list = Some(item_charge_list);
    self
  }

  pub fn item_charge_list(&self) -> Option<&::models::ChargeComponentList> {
    self.item_charge_list.as_ref()
  }

  pub fn reset_item_charge_list(&mut self) {
    self.item_charge_list = None;
  }

  pub fn set_item_charge_adjustment_list(&mut self, item_charge_adjustment_list: ::models::ChargeComponentList) {
    self.item_charge_adjustment_list = Some(item_charge_adjustment_list);
  }

  pub fn with_item_charge_adjustment_list(mut self, item_charge_adjustment_list: ::models::ChargeComponentList) -> ShipmentItem {
    self.item_charge_adjustment_list = Some(item_charge_adjustment_list);
    self
  }

  pub fn item_charge_adjustment_list(&self) -> Option<&::models::ChargeComponentList> {
    self.item_charge_adjustment_list.as_ref()
  }

  pub fn reset_item_charge_adjustment_list(&mut self) {
    self.item_charge_adjustment_list = None;
  }

  pub fn set_item_fee_list(&mut self, item_fee_list: ::models::FeeComponentList) {
    self.item_fee_list = Some(item_fee_list);
  }

  pub fn with_item_fee_list(mut self, item_fee_list: ::models::FeeComponentList) -> ShipmentItem {
    self.item_fee_list = Some(item_fee_list);
    self
  }

  pub fn item_fee_list(&self) -> Option<&::models::FeeComponentList> {
    self.item_fee_list.as_ref()
  }

  pub fn reset_item_fee_list(&mut self) {
    self.item_fee_list = None;
  }

  pub fn set_item_fee_adjustment_list(&mut self, item_fee_adjustment_list: ::models::FeeComponentList) {
    self.item_fee_adjustment_list = Some(item_fee_adjustment_list);
  }

  pub fn with_item_fee_adjustment_list(mut self, item_fee_adjustment_list: ::models::FeeComponentList) -> ShipmentItem {
    self.item_fee_adjustment_list = Some(item_fee_adjustment_list);
    self
  }

  pub fn item_fee_adjustment_list(&self) -> Option<&::models::FeeComponentList> {
    self.item_fee_adjustment_list.as_ref()
  }

  pub fn reset_item_fee_adjustment_list(&mut self) {
    self.item_fee_adjustment_list = None;
  }

  pub fn set_item_tax_withheld_list(&mut self, item_tax_withheld_list: ::models::TaxWithheldComponentList) {
    self.item_tax_withheld_list = Some(item_tax_withheld_list);
  }

  pub fn with_item_tax_withheld_list(mut self, item_tax_withheld_list: ::models::TaxWithheldComponentList) -> ShipmentItem {
    self.item_tax_withheld_list = Some(item_tax_withheld_list);
    self
  }

  pub fn item_tax_withheld_list(&self) -> Option<&::models::TaxWithheldComponentList> {
    self.item_tax_withheld_list.as_ref()
  }

  pub fn reset_item_tax_withheld_list(&mut self) {
    self.item_tax_withheld_list = None;
  }

  pub fn set_promotion_list(&mut self, promotion_list: ::models::PromotionList) {
    self.promotion_list = Some(promotion_list);
  }

  pub fn with_promotion_list(mut self, promotion_list: ::models::PromotionList) -> ShipmentItem {
    self.promotion_list = Some(promotion_list);
    self
  }

  pub fn promotion_list(&self) -> Option<&::models::PromotionList> {
    self.promotion_list.as_ref()
  }

  pub fn reset_promotion_list(&mut self) {
    self.promotion_list = None;
  }

  pub fn set_promotion_adjustment_list(&mut self, promotion_adjustment_list: ::models::PromotionList) {
    self.promotion_adjustment_list = Some(promotion_adjustment_list);
  }

  pub fn with_promotion_adjustment_list(mut self, promotion_adjustment_list: ::models::PromotionList) -> ShipmentItem {
    self.promotion_adjustment_list = Some(promotion_adjustment_list);
    self
  }

  pub fn promotion_adjustment_list(&self) -> Option<&::models::PromotionList> {
    self.promotion_adjustment_list.as_ref()
  }

  pub fn reset_promotion_adjustment_list(&mut self) {
    self.promotion_adjustment_list = None;
  }

  pub fn set_cost_of_points_granted(&mut self, cost_of_points_granted: ::models::Currency) {
    self.cost_of_points_granted = Some(cost_of_points_granted);
  }

  pub fn with_cost_of_points_granted(mut self, cost_of_points_granted: ::models::Currency) -> ShipmentItem {
    self.cost_of_points_granted = Some(cost_of_points_granted);
    self
  }

  pub fn cost_of_points_granted(&self) -> Option<&::models::Currency> {
    self.cost_of_points_granted.as_ref()
  }

  pub fn reset_cost_of_points_granted(&mut self) {
    self.cost_of_points_granted = None;
  }

  pub fn set_cost_of_points_returned(&mut self, cost_of_points_returned: ::models::Currency) {
    self.cost_of_points_returned = Some(cost_of_points_returned);
  }

  pub fn with_cost_of_points_returned(mut self, cost_of_points_returned: ::models::Currency) -> ShipmentItem {
    self.cost_of_points_returned = Some(cost_of_points_returned);
    self
  }

  pub fn cost_of_points_returned(&self) -> Option<&::models::Currency> {
    self.cost_of_points_returned.as_ref()
  }

  pub fn reset_cost_of_points_returned(&mut self) {
    self.cost_of_points_returned = None;
  }

}



