/* 
 * Selling Partner API for Finances
 *
 * The Selling Partner API for Finances helps you obtain financial information relevant to a seller's business. You can obtain financial events for a given order, financial event group, or date range without having to wait until a statement period closes. You can also obtain financial event groups for a given date range.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// NetworkComminglingTransactionEvent : A network commingling transaction event.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct NetworkComminglingTransactionEvent {
  /// The type of network item swap.  Possible values:  * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.  * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces.
  #[serde(rename = "TransactionType")]
  transaction_type: Option<String>,
  /// The date and time when the financial event was posted.
  #[serde(rename = "PostedDate")]
  posted_date: Option<::models::Date>,
  /// The identifier for the network item swap.
  #[serde(rename = "NetCoTransactionID")]
  net_co_transaction_id: Option<String>,
  /// The reason for the network item swap.
  #[serde(rename = "SwapReason")]
  swap_reason: Option<String>,
  /// The Amazon Standard Identification Number (ASIN) of the swapped item.
  #[serde(rename = "ASIN")]
  ASIN: Option<String>,
  /// The marketplace in which the event took place.
  #[serde(rename = "MarketplaceId")]
  marketplace_id: Option<String>,
  /// The price of the swapped item minus TaxAmount.
  #[serde(rename = "TaxExclusiveAmount")]
  tax_exclusive_amount: Option<::models::Currency>,
  /// The tax on the network item swap paid by the seller.
  #[serde(rename = "TaxAmount")]
  tax_amount: Option<::models::Currency>
}

impl NetworkComminglingTransactionEvent {
  /// A network commingling transaction event.
  pub fn new() -> NetworkComminglingTransactionEvent {
    NetworkComminglingTransactionEvent {
      transaction_type: None,
      posted_date: None,
      net_co_transaction_id: None,
      swap_reason: None,
      ASIN: None,
      marketplace_id: None,
      tax_exclusive_amount: None,
      tax_amount: None
    }
  }

  pub fn set_transaction_type(&mut self, transaction_type: String) {
    self.transaction_type = Some(transaction_type);
  }

  pub fn with_transaction_type(mut self, transaction_type: String) -> NetworkComminglingTransactionEvent {
    self.transaction_type = Some(transaction_type);
    self
  }

  pub fn transaction_type(&self) -> Option<&String> {
    self.transaction_type.as_ref()
  }

  pub fn reset_transaction_type(&mut self) {
    self.transaction_type = None;
  }

  pub fn set_posted_date(&mut self, posted_date: ::models::Date) {
    self.posted_date = Some(posted_date);
  }

  pub fn with_posted_date(mut self, posted_date: ::models::Date) -> NetworkComminglingTransactionEvent {
    self.posted_date = Some(posted_date);
    self
  }

  pub fn posted_date(&self) -> Option<&::models::Date> {
    self.posted_date.as_ref()
  }

  pub fn reset_posted_date(&mut self) {
    self.posted_date = None;
  }

  pub fn set_net_co_transaction_id(&mut self, net_co_transaction_id: String) {
    self.net_co_transaction_id = Some(net_co_transaction_id);
  }

  pub fn with_net_co_transaction_id(mut self, net_co_transaction_id: String) -> NetworkComminglingTransactionEvent {
    self.net_co_transaction_id = Some(net_co_transaction_id);
    self
  }

  pub fn net_co_transaction_id(&self) -> Option<&String> {
    self.net_co_transaction_id.as_ref()
  }

  pub fn reset_net_co_transaction_id(&mut self) {
    self.net_co_transaction_id = None;
  }

  pub fn set_swap_reason(&mut self, swap_reason: String) {
    self.swap_reason = Some(swap_reason);
  }

  pub fn with_swap_reason(mut self, swap_reason: String) -> NetworkComminglingTransactionEvent {
    self.swap_reason = Some(swap_reason);
    self
  }

  pub fn swap_reason(&self) -> Option<&String> {
    self.swap_reason.as_ref()
  }

  pub fn reset_swap_reason(&mut self) {
    self.swap_reason = None;
  }

  pub fn set_ASIN(&mut self, ASIN: String) {
    self.ASIN = Some(ASIN);
  }

  pub fn with_ASIN(mut self, ASIN: String) -> NetworkComminglingTransactionEvent {
    self.ASIN = Some(ASIN);
    self
  }

  pub fn ASIN(&self) -> Option<&String> {
    self.ASIN.as_ref()
  }

  pub fn reset_ASIN(&mut self) {
    self.ASIN = None;
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = Some(marketplace_id);
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> NetworkComminglingTransactionEvent {
    self.marketplace_id = Some(marketplace_id);
    self
  }

  pub fn marketplace_id(&self) -> Option<&String> {
    self.marketplace_id.as_ref()
  }

  pub fn reset_marketplace_id(&mut self) {
    self.marketplace_id = None;
  }

  pub fn set_tax_exclusive_amount(&mut self, tax_exclusive_amount: ::models::Currency) {
    self.tax_exclusive_amount = Some(tax_exclusive_amount);
  }

  pub fn with_tax_exclusive_amount(mut self, tax_exclusive_amount: ::models::Currency) -> NetworkComminglingTransactionEvent {
    self.tax_exclusive_amount = Some(tax_exclusive_amount);
    self
  }

  pub fn tax_exclusive_amount(&self) -> Option<&::models::Currency> {
    self.tax_exclusive_amount.as_ref()
  }

  pub fn reset_tax_exclusive_amount(&mut self) {
    self.tax_exclusive_amount = None;
  }

  pub fn set_tax_amount(&mut self, tax_amount: ::models::Currency) {
    self.tax_amount = Some(tax_amount);
  }

  pub fn with_tax_amount(mut self, tax_amount: ::models::Currency) -> NetworkComminglingTransactionEvent {
    self.tax_amount = Some(tax_amount);
    self
  }

  pub fn tax_amount(&self) -> Option<&::models::Currency> {
    self.tax_amount.as_ref()
  }

  pub fn reset_tax_amount(&mut self) {
    self.tax_amount = None;
  }

}



