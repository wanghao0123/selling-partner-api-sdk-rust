/* 
 * Selling Partner API for FBA Small And Light
 *
 * The Selling Partner API for FBA Small and Light lets you help sellers manage their listings in the Small and Light program. The program reduces the cost of fulfilling orders for small and lightweight FBA inventory. You can enroll or remove items from the program and check item eligibility and enrollment status. You can also preview the estimated program fees charged to a seller for items sold while enrolled in the program.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FeePreview : The fee estimate for a specific item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FeePreview {
  /// The Amazon Standard Identification Number (ASIN) value used to identify the item.
  #[serde(rename = "asin")]
  asin: Option<String>,
  /// The price that the seller plans to charge for the item.
  #[serde(rename = "price")]
  price: Option<::models::MoneyType>,
  /// A list of the Small and Light fees for the item.
  #[serde(rename = "feeBreakdown")]
  fee_breakdown: Option<Vec<::models::FeeLineItem>>,
  /// The total fees charged if the item participated in the Small and Light program.
  #[serde(rename = "totalFees")]
  total_fees: Option<::models::MoneyType>,
  /// One or more unexpected errors occurred during the getSmallAndLightFeePreview operation.
  #[serde(rename = "errors")]
  errors: Option<::models::ErrorList>
}

impl FeePreview {
  /// The fee estimate for a specific item.
  pub fn new() -> FeePreview {
    FeePreview {
      asin: None,
      price: None,
      fee_breakdown: None,
      total_fees: None,
      errors: None
    }
  }

  pub fn set_asin(&mut self, asin: String) {
    self.asin = Some(asin);
  }

  pub fn with_asin(mut self, asin: String) -> FeePreview {
    self.asin = Some(asin);
    self
  }

  pub fn asin(&self) -> Option<&String> {
    self.asin.as_ref()
  }

  pub fn reset_asin(&mut self) {
    self.asin = None;
  }

  pub fn set_price(&mut self, price: ::models::MoneyType) {
    self.price = Some(price);
  }

  pub fn with_price(mut self, price: ::models::MoneyType) -> FeePreview {
    self.price = Some(price);
    self
  }

  pub fn price(&self) -> Option<&::models::MoneyType> {
    self.price.as_ref()
  }

  pub fn reset_price(&mut self) {
    self.price = None;
  }

  pub fn set_fee_breakdown(&mut self, fee_breakdown: Vec<::models::FeeLineItem>) {
    self.fee_breakdown = Some(fee_breakdown);
  }

  pub fn with_fee_breakdown(mut self, fee_breakdown: Vec<::models::FeeLineItem>) -> FeePreview {
    self.fee_breakdown = Some(fee_breakdown);
    self
  }

  pub fn fee_breakdown(&self) -> Option<&Vec<::models::FeeLineItem>> {
    self.fee_breakdown.as_ref()
  }

  pub fn reset_fee_breakdown(&mut self) {
    self.fee_breakdown = None;
  }

  pub fn set_total_fees(&mut self, total_fees: ::models::MoneyType) {
    self.total_fees = Some(total_fees);
  }

  pub fn with_total_fees(mut self, total_fees: ::models::MoneyType) -> FeePreview {
    self.total_fees = Some(total_fees);
    self
  }

  pub fn total_fees(&self) -> Option<&::models::MoneyType> {
    self.total_fees.as_ref()
  }

  pub fn reset_total_fees(&mut self) {
    self.total_fees = None;
  }

  pub fn set_errors(&mut self, errors: ::models::ErrorList) {
    self.errors = Some(errors);
  }

  pub fn with_errors(mut self, errors: ::models::ErrorList) -> FeePreview {
    self.errors = Some(errors);
    self
  }

  pub fn errors(&self) -> Option<&::models::ErrorList> {
    self.errors.as_ref()
  }

  pub fn reset_errors(&mut self) {
    self.errors = None;
  }

}



