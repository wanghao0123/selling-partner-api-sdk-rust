/* 
 * Selling Partner API for FBA Small And Light
 *
 * The Selling Partner API for FBA Small and Light lets you help sellers manage their listings in the Small and Light program. The program reduces the cost of fulfilling orders for small and lightweight FBA inventory. You can enroll or remove items from the program and check item eligibility and enrollment status. You can also preview the estimated program fees charged to a seller for items sold while enrolled in the program.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// SmallAndLightFeePreviewRequest : Request schema for submitting items for which to retrieve fee estimates.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct SmallAndLightFeePreviewRequest {
  #[serde(rename = "marketplaceId")]
  marketplace_id: ::models::MarketplaceId,
  /// A list of items for which to retrieve fee estimates (limit: 25).
  #[serde(rename = "items")]
  items: Vec<::models::Item>
}

impl SmallAndLightFeePreviewRequest {
  /// Request schema for submitting items for which to retrieve fee estimates.
  pub fn new(marketplace_id: ::models::MarketplaceId, items: Vec<::models::Item>) -> SmallAndLightFeePreviewRequest {
    SmallAndLightFeePreviewRequest {
      marketplace_id: marketplace_id,
      items: items
    }
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: ::models::MarketplaceId) {
    self.marketplace_id = marketplace_id;
  }

  pub fn with_marketplace_id(mut self, marketplace_id: ::models::MarketplaceId) -> SmallAndLightFeePreviewRequest {
    self.marketplace_id = marketplace_id;
    self
  }

  pub fn marketplace_id(&self) -> &::models::MarketplaceId {
    &self.marketplace_id
  }


  pub fn set_items(&mut self, items: Vec<::models::Item>) {
    self.items = items;
  }

  pub fn with_items(mut self, items: Vec<::models::Item>) -> SmallAndLightFeePreviewRequest {
    self.items = items;
    self
  }

  pub fn items(&self) -> &Vec<::models::Item> {
    &self.items
  }


}



