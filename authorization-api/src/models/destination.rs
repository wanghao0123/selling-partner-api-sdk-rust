/* 
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Destination : Represents a destination created when you call the createDestination operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Destination {
  /// The developer-defined name for this destination.
  #[serde(rename = "name")]
  name: String,
  /// The destination identifier generated when you created the destination.
  #[serde(rename = "destinationId")]
  destination_id: String,
  /// The resource that will receive notifications associated with this destination.
  #[serde(rename = "resource")]
  resource: ::models::DestinationResource
}

impl Destination {
  /// Represents a destination created when you call the createDestination operation.
  pub fn new(name: String, destination_id: String, resource: ::models::DestinationResource) -> Destination {
    Destination {
      name: name,
      destination_id: destination_id,
      resource: resource
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Destination {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }


  pub fn set_destination_id(&mut self, destination_id: String) {
    self.destination_id = destination_id;
  }

  pub fn with_destination_id(mut self, destination_id: String) -> Destination {
    self.destination_id = destination_id;
    self
  }

  pub fn destination_id(&self) -> &String {
    &self.destination_id
  }


  pub fn set_resource(&mut self, resource: ::models::DestinationResource) {
    self.resource = resource;
  }

  pub fn with_resource(mut self, resource: ::models::DestinationResource) -> Destination {
    self.resource = resource;
    self
  }

  pub fn resource(&self) -> &::models::DestinationResource {
    &self.resource
  }


}



