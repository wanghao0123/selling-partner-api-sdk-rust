/* 
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PaymentTerms : Terms of the payment for the invoice. The basis of the payment terms is the invoice date.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PaymentTerms {
  /// The payment term type for the invoice.
  #[serde(rename = "type")]
  _type: Option<String>,
  /// The discount percent value, which is good until the discount due date.
  #[serde(rename = "discountPercent")]
  discount_percent: Option<::models::Decimal>,
  /// The number of calendar days from the Base date (Invoice date) until the discount is no longer valid.
  #[serde(rename = "discountDueDays")]
  discount_due_days: Option<f32>,
  /// The number of calendar days from the base date (invoice date) until the total amount on the invoice is due.
  #[serde(rename = "netDueDays")]
  net_due_days: Option<f32>
}

impl PaymentTerms {
  /// Terms of the payment for the invoice. The basis of the payment terms is the invoice date.
  pub fn new() -> PaymentTerms {
    PaymentTerms {
      _type: None,
      discount_percent: None,
      discount_due_days: None,
      net_due_days: None
    }
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> PaymentTerms {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> Option<&String> {
    self._type.as_ref()
  }

  pub fn reset__type(&mut self) {
    self._type = None;
  }

  pub fn set_discount_percent(&mut self, discount_percent: ::models::Decimal) {
    self.discount_percent = Some(discount_percent);
  }

  pub fn with_discount_percent(mut self, discount_percent: ::models::Decimal) -> PaymentTerms {
    self.discount_percent = Some(discount_percent);
    self
  }

  pub fn discount_percent(&self) -> Option<&::models::Decimal> {
    self.discount_percent.as_ref()
  }

  pub fn reset_discount_percent(&mut self) {
    self.discount_percent = None;
  }

  pub fn set_discount_due_days(&mut self, discount_due_days: f32) {
    self.discount_due_days = Some(discount_due_days);
  }

  pub fn with_discount_due_days(mut self, discount_due_days: f32) -> PaymentTerms {
    self.discount_due_days = Some(discount_due_days);
    self
  }

  pub fn discount_due_days(&self) -> Option<&f32> {
    self.discount_due_days.as_ref()
  }

  pub fn reset_discount_due_days(&mut self) {
    self.discount_due_days = None;
  }

  pub fn set_net_due_days(&mut self, net_due_days: f32) {
    self.net_due_days = Some(net_due_days);
  }

  pub fn with_net_due_days(mut self, net_due_days: f32) -> PaymentTerms {
    self.net_due_days = Some(net_due_days);
    self
  }

  pub fn net_due_days(&self) -> Option<&f32> {
    self.net_due_days.as_ref()
  }

  pub fn reset_net_due_days(&mut self) {
    self.net_due_days = None;
  }

}



