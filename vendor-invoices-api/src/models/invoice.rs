/* 
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Invoice {
  /// Identifies the type of invoice.
  #[serde(rename = "invoiceType")]
  invoice_type: String,
  /// Unique number relating to the charges defined in this document. This will be invoice number if the document type is Invoice or CreditNote number if the document type is Credit Note. Failure to provide this reference will result in a rejection.
  #[serde(rename = "id")]
  id: String,
  /// An additional unique reference number used for regulatory or other purposes.
  #[serde(rename = "referenceNumber")]
  reference_number: Option<String>,
  /// Date when the invoice/credit note information was generated in the origin's accounting system. The invoice date should be on or after the purchase order creation date.
  #[serde(rename = "date")]
  date: String,
  /// Name, address and tax details of the party receiving the payment of this invoice.
  #[serde(rename = "remitToParty")]
  remit_to_party: ::models::PartyIdentification,
  /// Name, address and tax details of the party receiving a shipment of products.
  #[serde(rename = "shipToParty")]
  ship_to_party: Option<::models::PartyIdentification>,
  /// Name, address and tax details of the party sending a shipment of products.
  #[serde(rename = "shipFromParty")]
  ship_from_party: Option<::models::PartyIdentification>,
  /// Name, address and tax details of the party to whom this invoice is issued.
  #[serde(rename = "billToParty")]
  bill_to_party: Option<::models::PartyIdentification>,
  /// The payment terms for the invoice.
  #[serde(rename = "paymentTerms")]
  payment_terms: Option<::models::PaymentTerms>,
  /// Total monetary amount charged in the invoice or full value of credit note to be paid including all relevant taxes. It is the total amount of invoice (including charges, less allowances) before terms discount (if discount is applicable).
  #[serde(rename = "invoiceTotal")]
  invoice_total: ::models::Money,
  /// Total tax amount details for all line items.
  #[serde(rename = "taxDetails")]
  tax_details: Option<Vec<::models::TaxDetails>>,
  /// Additional details provided by the selling party, for tax related or other purposes.
  #[serde(rename = "additionalDetails")]
  additional_details: Option<Vec<::models::AdditionalDetails>>,
  /// Total charge amount details for all line items.
  #[serde(rename = "chargeDetails")]
  charge_details: Option<Vec<::models::ChargeDetails>>,
  /// Total allowance amount details for all line items.
  #[serde(rename = "allowanceDetails")]
  allowance_details: Option<Vec<::models::AllowanceDetails>>,
  /// The list of invoice items.
  #[serde(rename = "items")]
  items: Option<Vec<::models::InvoiceItem>>
}

impl Invoice {
  pub fn new(invoice_type: String, id: String, date: String, remit_to_party: ::models::PartyIdentification, invoice_total: ::models::Money) -> Invoice {
    Invoice {
      invoice_type: invoice_type,
      id: id,
      reference_number: None,
      date: date,
      remit_to_party: remit_to_party,
      ship_to_party: None,
      ship_from_party: None,
      bill_to_party: None,
      payment_terms: None,
      invoice_total: invoice_total,
      tax_details: None,
      additional_details: None,
      charge_details: None,
      allowance_details: None,
      items: None
    }
  }

  pub fn set_invoice_type(&mut self, invoice_type: String) {
    self.invoice_type = invoice_type;
  }

  pub fn with_invoice_type(mut self, invoice_type: String) -> Invoice {
    self.invoice_type = invoice_type;
    self
  }

  pub fn invoice_type(&self) -> &String {
    &self.invoice_type
  }


  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> Invoice {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }


  pub fn set_reference_number(&mut self, reference_number: String) {
    self.reference_number = Some(reference_number);
  }

  pub fn with_reference_number(mut self, reference_number: String) -> Invoice {
    self.reference_number = Some(reference_number);
    self
  }

  pub fn reference_number(&self) -> Option<&String> {
    self.reference_number.as_ref()
  }

  pub fn reset_reference_number(&mut self) {
    self.reference_number = None;
  }

  pub fn set_date(&mut self, date: String) {
    self.date = date;
  }

  pub fn with_date(mut self, date: String) -> Invoice {
    self.date = date;
    self
  }

  pub fn date(&self) -> &String {
    &self.date
  }


  pub fn set_remit_to_party(&mut self, remit_to_party: ::models::PartyIdentification) {
    self.remit_to_party = remit_to_party;
  }

  pub fn with_remit_to_party(mut self, remit_to_party: ::models::PartyIdentification) -> Invoice {
    self.remit_to_party = remit_to_party;
    self
  }

  pub fn remit_to_party(&self) -> &::models::PartyIdentification {
    &self.remit_to_party
  }


  pub fn set_ship_to_party(&mut self, ship_to_party: ::models::PartyIdentification) {
    self.ship_to_party = Some(ship_to_party);
  }

  pub fn with_ship_to_party(mut self, ship_to_party: ::models::PartyIdentification) -> Invoice {
    self.ship_to_party = Some(ship_to_party);
    self
  }

  pub fn ship_to_party(&self) -> Option<&::models::PartyIdentification> {
    self.ship_to_party.as_ref()
  }

  pub fn reset_ship_to_party(&mut self) {
    self.ship_to_party = None;
  }

  pub fn set_ship_from_party(&mut self, ship_from_party: ::models::PartyIdentification) {
    self.ship_from_party = Some(ship_from_party);
  }

  pub fn with_ship_from_party(mut self, ship_from_party: ::models::PartyIdentification) -> Invoice {
    self.ship_from_party = Some(ship_from_party);
    self
  }

  pub fn ship_from_party(&self) -> Option<&::models::PartyIdentification> {
    self.ship_from_party.as_ref()
  }

  pub fn reset_ship_from_party(&mut self) {
    self.ship_from_party = None;
  }

  pub fn set_bill_to_party(&mut self, bill_to_party: ::models::PartyIdentification) {
    self.bill_to_party = Some(bill_to_party);
  }

  pub fn with_bill_to_party(mut self, bill_to_party: ::models::PartyIdentification) -> Invoice {
    self.bill_to_party = Some(bill_to_party);
    self
  }

  pub fn bill_to_party(&self) -> Option<&::models::PartyIdentification> {
    self.bill_to_party.as_ref()
  }

  pub fn reset_bill_to_party(&mut self) {
    self.bill_to_party = None;
  }

  pub fn set_payment_terms(&mut self, payment_terms: ::models::PaymentTerms) {
    self.payment_terms = Some(payment_terms);
  }

  pub fn with_payment_terms(mut self, payment_terms: ::models::PaymentTerms) -> Invoice {
    self.payment_terms = Some(payment_terms);
    self
  }

  pub fn payment_terms(&self) -> Option<&::models::PaymentTerms> {
    self.payment_terms.as_ref()
  }

  pub fn reset_payment_terms(&mut self) {
    self.payment_terms = None;
  }

  pub fn set_invoice_total(&mut self, invoice_total: ::models::Money) {
    self.invoice_total = invoice_total;
  }

  pub fn with_invoice_total(mut self, invoice_total: ::models::Money) -> Invoice {
    self.invoice_total = invoice_total;
    self
  }

  pub fn invoice_total(&self) -> &::models::Money {
    &self.invoice_total
  }


  pub fn set_tax_details(&mut self, tax_details: Vec<::models::TaxDetails>) {
    self.tax_details = Some(tax_details);
  }

  pub fn with_tax_details(mut self, tax_details: Vec<::models::TaxDetails>) -> Invoice {
    self.tax_details = Some(tax_details);
    self
  }

  pub fn tax_details(&self) -> Option<&Vec<::models::TaxDetails>> {
    self.tax_details.as_ref()
  }

  pub fn reset_tax_details(&mut self) {
    self.tax_details = None;
  }

  pub fn set_additional_details(&mut self, additional_details: Vec<::models::AdditionalDetails>) {
    self.additional_details = Some(additional_details);
  }

  pub fn with_additional_details(mut self, additional_details: Vec<::models::AdditionalDetails>) -> Invoice {
    self.additional_details = Some(additional_details);
    self
  }

  pub fn additional_details(&self) -> Option<&Vec<::models::AdditionalDetails>> {
    self.additional_details.as_ref()
  }

  pub fn reset_additional_details(&mut self) {
    self.additional_details = None;
  }

  pub fn set_charge_details(&mut self, charge_details: Vec<::models::ChargeDetails>) {
    self.charge_details = Some(charge_details);
  }

  pub fn with_charge_details(mut self, charge_details: Vec<::models::ChargeDetails>) -> Invoice {
    self.charge_details = Some(charge_details);
    self
  }

  pub fn charge_details(&self) -> Option<&Vec<::models::ChargeDetails>> {
    self.charge_details.as_ref()
  }

  pub fn reset_charge_details(&mut self) {
    self.charge_details = None;
  }

  pub fn set_allowance_details(&mut self, allowance_details: Vec<::models::AllowanceDetails>) {
    self.allowance_details = Some(allowance_details);
  }

  pub fn with_allowance_details(mut self, allowance_details: Vec<::models::AllowanceDetails>) -> Invoice {
    self.allowance_details = Some(allowance_details);
    self
  }

  pub fn allowance_details(&self) -> Option<&Vec<::models::AllowanceDetails>> {
    self.allowance_details.as_ref()
  }

  pub fn reset_allowance_details(&mut self) {
    self.allowance_details = None;
  }

  pub fn set_items(&mut self, items: Vec<::models::InvoiceItem>) {
    self.items = Some(items);
  }

  pub fn with_items(mut self, items: Vec<::models::InvoiceItem>) -> Invoice {
    self.items = Some(items);
    self
  }

  pub fn items(&self) -> Option<&Vec<::models::InvoiceItem>> {
    self.items.as_ref()
  }

  pub fn reset_items(&mut self) {
    self.items = None;
  }

}



