/* 
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// CreditNoteDetails : References required in order to process a credit note. This information is required only if InvoiceType is CreditNote.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct CreditNoteDetails {
  /// Original Invoice Number when sending a credit note relating to an existing invoice. One Invoice only to be processed per Credit Note. This is mandatory for AP Credit Notes.
  #[serde(rename = "referenceInvoiceNumber")]
  reference_invoice_number: Option<String>,
  /// Debit Note Number as generated by Amazon. Recommended for Returns and COOP Credit Notes.
  #[serde(rename = "debitNoteNumber")]
  debit_note_number: Option<String>,
  /// Identifies the Returns Notice Number. Mandatory for all Returns Credit Notes.
  #[serde(rename = "returnsReferenceNumber")]
  returns_reference_number: Option<String>,
  /// Date that a return is received by the vendor. It is mandatory for Returns Credit Note.
  #[serde(rename = "goodsReturnDate")]
  goods_return_date: Option<String>,
  /// Identifies the Returned Merchandise Authorization ID, if generated.
  #[serde(rename = "rmaId")]
  rma_id: Option<String>,
  /// Identifies the COOP reference used for COOP agreement. Failure to provide the COOP reference number or the Debit Note number may lead to a rejection of the Credit Note.
  #[serde(rename = "coopReferenceNumber")]
  coop_reference_number: Option<String>,
  /// Identifies the consignor reference number (VRET number), if generated by Amazon.
  #[serde(rename = "consignorsReferenceNumber")]
  consignors_reference_number: Option<String>
}

impl CreditNoteDetails {
  /// References required in order to process a credit note. This information is required only if InvoiceType is CreditNote.
  pub fn new() -> CreditNoteDetails {
    CreditNoteDetails {
      reference_invoice_number: None,
      debit_note_number: None,
      returns_reference_number: None,
      goods_return_date: None,
      rma_id: None,
      coop_reference_number: None,
      consignors_reference_number: None
    }
  }

  pub fn set_reference_invoice_number(&mut self, reference_invoice_number: String) {
    self.reference_invoice_number = Some(reference_invoice_number);
  }

  pub fn with_reference_invoice_number(mut self, reference_invoice_number: String) -> CreditNoteDetails {
    self.reference_invoice_number = Some(reference_invoice_number);
    self
  }

  pub fn reference_invoice_number(&self) -> Option<&String> {
    self.reference_invoice_number.as_ref()
  }

  pub fn reset_reference_invoice_number(&mut self) {
    self.reference_invoice_number = None;
  }

  pub fn set_debit_note_number(&mut self, debit_note_number: String) {
    self.debit_note_number = Some(debit_note_number);
  }

  pub fn with_debit_note_number(mut self, debit_note_number: String) -> CreditNoteDetails {
    self.debit_note_number = Some(debit_note_number);
    self
  }

  pub fn debit_note_number(&self) -> Option<&String> {
    self.debit_note_number.as_ref()
  }

  pub fn reset_debit_note_number(&mut self) {
    self.debit_note_number = None;
  }

  pub fn set_returns_reference_number(&mut self, returns_reference_number: String) {
    self.returns_reference_number = Some(returns_reference_number);
  }

  pub fn with_returns_reference_number(mut self, returns_reference_number: String) -> CreditNoteDetails {
    self.returns_reference_number = Some(returns_reference_number);
    self
  }

  pub fn returns_reference_number(&self) -> Option<&String> {
    self.returns_reference_number.as_ref()
  }

  pub fn reset_returns_reference_number(&mut self) {
    self.returns_reference_number = None;
  }

  pub fn set_goods_return_date(&mut self, goods_return_date: String) {
    self.goods_return_date = Some(goods_return_date);
  }

  pub fn with_goods_return_date(mut self, goods_return_date: String) -> CreditNoteDetails {
    self.goods_return_date = Some(goods_return_date);
    self
  }

  pub fn goods_return_date(&self) -> Option<&String> {
    self.goods_return_date.as_ref()
  }

  pub fn reset_goods_return_date(&mut self) {
    self.goods_return_date = None;
  }

  pub fn set_rma_id(&mut self, rma_id: String) {
    self.rma_id = Some(rma_id);
  }

  pub fn with_rma_id(mut self, rma_id: String) -> CreditNoteDetails {
    self.rma_id = Some(rma_id);
    self
  }

  pub fn rma_id(&self) -> Option<&String> {
    self.rma_id.as_ref()
  }

  pub fn reset_rma_id(&mut self) {
    self.rma_id = None;
  }

  pub fn set_coop_reference_number(&mut self, coop_reference_number: String) {
    self.coop_reference_number = Some(coop_reference_number);
  }

  pub fn with_coop_reference_number(mut self, coop_reference_number: String) -> CreditNoteDetails {
    self.coop_reference_number = Some(coop_reference_number);
    self
  }

  pub fn coop_reference_number(&self) -> Option<&String> {
    self.coop_reference_number.as_ref()
  }

  pub fn reset_coop_reference_number(&mut self) {
    self.coop_reference_number = None;
  }

  pub fn set_consignors_reference_number(&mut self, consignors_reference_number: String) {
    self.consignors_reference_number = Some(consignors_reference_number);
  }

  pub fn with_consignors_reference_number(mut self, consignors_reference_number: String) -> CreditNoteDetails {
    self.consignors_reference_number = Some(consignors_reference_number);
    self
  }

  pub fn consignors_reference_number(&self) -> Option<&String> {
    self.consignors_reference_number.as_ref()
  }

  pub fn reset_consignors_reference_number(&mut self) {
    self.consignors_reference_number = None;
  }

}



