/* 
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// InvoiceItem : Details of the item being invoiced.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InvoiceItem {
  /// Unique number related to this line item.
  #[serde(rename = "itemSequenceNumber")]
  item_sequence_number: i32,
  /// Amazon Standard Identification Number (ASIN) of an item.
  #[serde(rename = "amazonProductIdentifier")]
  amazon_product_identifier: Option<String>,
  /// The vendor selected product identifier of the item. Should be the same as was provided in the purchase order.
  #[serde(rename = "vendorProductIdentifier")]
  vendor_product_identifier: Option<String>,
  /// Invoiced quantity of this item. Quantity must be greater than zero.
  #[serde(rename = "invoicedQuantity")]
  invoiced_quantity: ::models::ItemQuantity,
  /// The item cost to Amazon, which should match the cost on the order. Price information should not be zero or negative. It indicates net unit price. Net cost means VAT is not included in cost.
  #[serde(rename = "netCost")]
  net_cost: ::models::Money,
  /// The Amazon purchase order number for this invoiced line item. Formatting Notes: 8-character alpha-numeric code. This value is mandatory only when invoiceType is Invoice, and is not required when invoiceType is CreditNote.
  #[serde(rename = "purchaseOrderNumber")]
  purchase_order_number: Option<String>,
  /// HSN Tax code. The HSN number cannot contain alphabets.
  #[serde(rename = "hsnCode")]
  hsn_code: Option<String>,
  /// Details required in order to process a credit note. This information is required only if invoiceType is CreditNote.
  #[serde(rename = "creditNoteDetails")]
  credit_note_details: Option<::models::CreditNoteDetails>,
  /// Individual tax details per line item.
  #[serde(rename = "taxDetails")]
  tax_details: Option<Vec<::models::TaxDetails>>,
  /// Individual charge details per line item.
  #[serde(rename = "chargeDetails")]
  charge_details: Option<Vec<::models::ChargeDetails>>,
  /// Individual allowance details per line item.
  #[serde(rename = "allowanceDetails")]
  allowance_details: Option<Vec<::models::AllowanceDetails>>
}

impl InvoiceItem {
  /// Details of the item being invoiced.
  pub fn new(item_sequence_number: i32, invoiced_quantity: ::models::ItemQuantity, net_cost: ::models::Money) -> InvoiceItem {
    InvoiceItem {
      item_sequence_number: item_sequence_number,
      amazon_product_identifier: None,
      vendor_product_identifier: None,
      invoiced_quantity: invoiced_quantity,
      net_cost: net_cost,
      purchase_order_number: None,
      hsn_code: None,
      credit_note_details: None,
      tax_details: None,
      charge_details: None,
      allowance_details: None
    }
  }

  pub fn set_item_sequence_number(&mut self, item_sequence_number: i32) {
    self.item_sequence_number = item_sequence_number;
  }

  pub fn with_item_sequence_number(mut self, item_sequence_number: i32) -> InvoiceItem {
    self.item_sequence_number = item_sequence_number;
    self
  }

  pub fn item_sequence_number(&self) -> &i32 {
    &self.item_sequence_number
  }


  pub fn set_amazon_product_identifier(&mut self, amazon_product_identifier: String) {
    self.amazon_product_identifier = Some(amazon_product_identifier);
  }

  pub fn with_amazon_product_identifier(mut self, amazon_product_identifier: String) -> InvoiceItem {
    self.amazon_product_identifier = Some(amazon_product_identifier);
    self
  }

  pub fn amazon_product_identifier(&self) -> Option<&String> {
    self.amazon_product_identifier.as_ref()
  }

  pub fn reset_amazon_product_identifier(&mut self) {
    self.amazon_product_identifier = None;
  }

  pub fn set_vendor_product_identifier(&mut self, vendor_product_identifier: String) {
    self.vendor_product_identifier = Some(vendor_product_identifier);
  }

  pub fn with_vendor_product_identifier(mut self, vendor_product_identifier: String) -> InvoiceItem {
    self.vendor_product_identifier = Some(vendor_product_identifier);
    self
  }

  pub fn vendor_product_identifier(&self) -> Option<&String> {
    self.vendor_product_identifier.as_ref()
  }

  pub fn reset_vendor_product_identifier(&mut self) {
    self.vendor_product_identifier = None;
  }

  pub fn set_invoiced_quantity(&mut self, invoiced_quantity: ::models::ItemQuantity) {
    self.invoiced_quantity = invoiced_quantity;
  }

  pub fn with_invoiced_quantity(mut self, invoiced_quantity: ::models::ItemQuantity) -> InvoiceItem {
    self.invoiced_quantity = invoiced_quantity;
    self
  }

  pub fn invoiced_quantity(&self) -> &::models::ItemQuantity {
    &self.invoiced_quantity
  }


  pub fn set_net_cost(&mut self, net_cost: ::models::Money) {
    self.net_cost = net_cost;
  }

  pub fn with_net_cost(mut self, net_cost: ::models::Money) -> InvoiceItem {
    self.net_cost = net_cost;
    self
  }

  pub fn net_cost(&self) -> &::models::Money {
    &self.net_cost
  }


  pub fn set_purchase_order_number(&mut self, purchase_order_number: String) {
    self.purchase_order_number = Some(purchase_order_number);
  }

  pub fn with_purchase_order_number(mut self, purchase_order_number: String) -> InvoiceItem {
    self.purchase_order_number = Some(purchase_order_number);
    self
  }

  pub fn purchase_order_number(&self) -> Option<&String> {
    self.purchase_order_number.as_ref()
  }

  pub fn reset_purchase_order_number(&mut self) {
    self.purchase_order_number = None;
  }

  pub fn set_hsn_code(&mut self, hsn_code: String) {
    self.hsn_code = Some(hsn_code);
  }

  pub fn with_hsn_code(mut self, hsn_code: String) -> InvoiceItem {
    self.hsn_code = Some(hsn_code);
    self
  }

  pub fn hsn_code(&self) -> Option<&String> {
    self.hsn_code.as_ref()
  }

  pub fn reset_hsn_code(&mut self) {
    self.hsn_code = None;
  }

  pub fn set_credit_note_details(&mut self, credit_note_details: ::models::CreditNoteDetails) {
    self.credit_note_details = Some(credit_note_details);
  }

  pub fn with_credit_note_details(mut self, credit_note_details: ::models::CreditNoteDetails) -> InvoiceItem {
    self.credit_note_details = Some(credit_note_details);
    self
  }

  pub fn credit_note_details(&self) -> Option<&::models::CreditNoteDetails> {
    self.credit_note_details.as_ref()
  }

  pub fn reset_credit_note_details(&mut self) {
    self.credit_note_details = None;
  }

  pub fn set_tax_details(&mut self, tax_details: Vec<::models::TaxDetails>) {
    self.tax_details = Some(tax_details);
  }

  pub fn with_tax_details(mut self, tax_details: Vec<::models::TaxDetails>) -> InvoiceItem {
    self.tax_details = Some(tax_details);
    self
  }

  pub fn tax_details(&self) -> Option<&Vec<::models::TaxDetails>> {
    self.tax_details.as_ref()
  }

  pub fn reset_tax_details(&mut self) {
    self.tax_details = None;
  }

  pub fn set_charge_details(&mut self, charge_details: Vec<::models::ChargeDetails>) {
    self.charge_details = Some(charge_details);
  }

  pub fn with_charge_details(mut self, charge_details: Vec<::models::ChargeDetails>) -> InvoiceItem {
    self.charge_details = Some(charge_details);
    self
  }

  pub fn charge_details(&self) -> Option<&Vec<::models::ChargeDetails>> {
    self.charge_details.as_ref()
  }

  pub fn reset_charge_details(&mut self) {
    self.charge_details = None;
  }

  pub fn set_allowance_details(&mut self, allowance_details: Vec<::models::AllowanceDetails>) {
    self.allowance_details = Some(allowance_details);
  }

  pub fn with_allowance_details(mut self, allowance_details: Vec<::models::AllowanceDetails>) -> InvoiceItem {
    self.allowance_details = Some(allowance_details);
    self
  }

  pub fn allowance_details(&self) -> Option<&Vec<::models::AllowanceDetails>> {
    self.allowance_details.as_ref()
  }

  pub fn reset_allowance_details(&mut self) {
    self.allowance_details = None;
  }

}



