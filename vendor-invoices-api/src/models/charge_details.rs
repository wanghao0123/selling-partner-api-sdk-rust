/* 
 * Selling Partner API for Retail Procurement Payments
 *
 * The Selling Partner API for Retail Procurement Payments provides programmatic access to vendors payments data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ChargeDetails : Monetary and tax details of the charge.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChargeDetails {
  /// Type of the charge applied.
  #[serde(rename = "type")]
  _type: String,
  /// Description of the charge.
  #[serde(rename = "description")]
  description: Option<String>,
  /// Total monetary amount related to this charge.
  #[serde(rename = "chargeAmount")]
  charge_amount: ::models::Money,
  /// Tax amount details applied on this charge.
  #[serde(rename = "taxDetails")]
  tax_details: Option<Vec<::models::TaxDetails>>
}

impl ChargeDetails {
  /// Monetary and tax details of the charge.
  pub fn new(_type: String, charge_amount: ::models::Money) -> ChargeDetails {
    ChargeDetails {
      _type: _type,
      description: None,
      charge_amount: charge_amount,
      tax_details: None
    }
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> ChargeDetails {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }


  pub fn set_description(&mut self, description: String) {
    self.description = Some(description);
  }

  pub fn with_description(mut self, description: String) -> ChargeDetails {
    self.description = Some(description);
    self
  }

  pub fn description(&self) -> Option<&String> {
    self.description.as_ref()
  }

  pub fn reset_description(&mut self) {
    self.description = None;
  }

  pub fn set_charge_amount(&mut self, charge_amount: ::models::Money) {
    self.charge_amount = charge_amount;
  }

  pub fn with_charge_amount(mut self, charge_amount: ::models::Money) -> ChargeDetails {
    self.charge_amount = charge_amount;
    self
  }

  pub fn charge_amount(&self) -> &::models::Money {
    &self.charge_amount
  }


  pub fn set_tax_details(&mut self, tax_details: Vec<::models::TaxDetails>) {
    self.tax_details = Some(tax_details);
  }

  pub fn with_tax_details(mut self, tax_details: Vec<::models::TaxDetails>) -> ChargeDetails {
    self.tax_details = Some(tax_details);
    self
  }

  pub fn tax_details(&self) -> Option<&Vec<::models::TaxDetails>> {
    self.tax_details.as_ref()
  }

  pub fn reset_tax_details(&mut self) {
    self.tax_details = None;
  }

}



