/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network. Today this API is available only in the North America region. In 2021 we plan to release this API in the Europe and Far East regions.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// InventorySummary : Inventory summary for a specific item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InventorySummary {
  /// The Amazon Standard Identification Number (ASIN) of an item.
  #[serde(rename = "asin")]
  asin: Option<String>,
  /// Amazon's fulfillment network SKU identifier.
  #[serde(rename = "fnSku")]
  fn_sku: Option<String>,
  /// The seller SKU of the item.
  #[serde(rename = "sellerSku")]
  seller_sku: Option<String>,
  /// The condition of the item as described by the seller (for example, New Item).
  #[serde(rename = "condition")]
  condition: Option<String>,
  #[serde(rename = "inventoryDetails")]
  inventory_details: Option<::models::InventoryDetails>,
  /// The date and time that any quantity was last updated.
  #[serde(rename = "lastUpdatedTime")]
  last_updated_time: Option<String>,
  /// The localized language product title of the item within the specific marketplace.
  #[serde(rename = "productName")]
  product_name: Option<String>,
  /// The total number of units in an inbound shipment or in Amazon fulfillment centers.
  #[serde(rename = "totalQuantity")]
  total_quantity: Option<i32>
}

impl InventorySummary {
  /// Inventory summary for a specific item.
  pub fn new() -> InventorySummary {
    InventorySummary {
      asin: None,
      fn_sku: None,
      seller_sku: None,
      condition: None,
      inventory_details: None,
      last_updated_time: None,
      product_name: None,
      total_quantity: None
    }
  }

  pub fn set_asin(&mut self, asin: String) {
    self.asin = Some(asin);
  }

  pub fn with_asin(mut self, asin: String) -> InventorySummary {
    self.asin = Some(asin);
    self
  }

  pub fn asin(&self) -> Option<&String> {
    self.asin.as_ref()
  }

  pub fn reset_asin(&mut self) {
    self.asin = None;
  }

  pub fn set_fn_sku(&mut self, fn_sku: String) {
    self.fn_sku = Some(fn_sku);
  }

  pub fn with_fn_sku(mut self, fn_sku: String) -> InventorySummary {
    self.fn_sku = Some(fn_sku);
    self
  }

  pub fn fn_sku(&self) -> Option<&String> {
    self.fn_sku.as_ref()
  }

  pub fn reset_fn_sku(&mut self) {
    self.fn_sku = None;
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = Some(seller_sku);
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> InventorySummary {
    self.seller_sku = Some(seller_sku);
    self
  }

  pub fn seller_sku(&self) -> Option<&String> {
    self.seller_sku.as_ref()
  }

  pub fn reset_seller_sku(&mut self) {
    self.seller_sku = None;
  }

  pub fn set_condition(&mut self, condition: String) {
    self.condition = Some(condition);
  }

  pub fn with_condition(mut self, condition: String) -> InventorySummary {
    self.condition = Some(condition);
    self
  }

  pub fn condition(&self) -> Option<&String> {
    self.condition.as_ref()
  }

  pub fn reset_condition(&mut self) {
    self.condition = None;
  }

  pub fn set_inventory_details(&mut self, inventory_details: ::models::InventoryDetails) {
    self.inventory_details = Some(inventory_details);
  }

  pub fn with_inventory_details(mut self, inventory_details: ::models::InventoryDetails) -> InventorySummary {
    self.inventory_details = Some(inventory_details);
    self
  }

  pub fn inventory_details(&self) -> Option<&::models::InventoryDetails> {
    self.inventory_details.as_ref()
  }

  pub fn reset_inventory_details(&mut self) {
    self.inventory_details = None;
  }

  pub fn set_last_updated_time(&mut self, last_updated_time: String) {
    self.last_updated_time = Some(last_updated_time);
  }

  pub fn with_last_updated_time(mut self, last_updated_time: String) -> InventorySummary {
    self.last_updated_time = Some(last_updated_time);
    self
  }

  pub fn last_updated_time(&self) -> Option<&String> {
    self.last_updated_time.as_ref()
  }

  pub fn reset_last_updated_time(&mut self) {
    self.last_updated_time = None;
  }

  pub fn set_product_name(&mut self, product_name: String) {
    self.product_name = Some(product_name);
  }

  pub fn with_product_name(mut self, product_name: String) -> InventorySummary {
    self.product_name = Some(product_name);
    self
  }

  pub fn product_name(&self) -> Option<&String> {
    self.product_name.as_ref()
  }

  pub fn reset_product_name(&mut self) {
    self.product_name = None;
  }

  pub fn set_total_quantity(&mut self, total_quantity: i32) {
    self.total_quantity = Some(total_quantity);
  }

  pub fn with_total_quantity(mut self, total_quantity: i32) -> InventorySummary {
    self.total_quantity = Some(total_quantity);
    self
  }

  pub fn total_quantity(&self) -> Option<&i32> {
    self.total_quantity.as_ref()
  }

  pub fn reset_total_quantity(&mut self) {
    self.total_quantity = None;
  }

}



