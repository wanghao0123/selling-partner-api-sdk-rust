/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network. Today this API is available only in the North America region. In 2021 we plan to release this API in the Europe and Far East regions.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// InventoryDetails : Summarized inventory details. This object will not appear if the details parameter in the request is false.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InventoryDetails {
  /// The item quantity that can be picked, packed, and shipped.
  #[serde(rename = "fulfillableQuantity")]
  fulfillable_quantity: Option<i32>,
  /// The number of units in an inbound shipment for which you have notified Amazon.
  #[serde(rename = "inboundWorkingQuantity")]
  inbound_working_quantity: Option<i32>,
  /// The number of units in an inbound shipment that you have notified Amazon about and have provided a tracking number.
  #[serde(rename = "inboundShippedQuantity")]
  inbound_shipped_quantity: Option<i32>,
  /// The number of units that have not yet been received at an Amazon fulfillment center for processing, but are part of an inbound shipment with some units that have already been received and processed.
  #[serde(rename = "inboundReceivingQuantity")]
  inbound_receiving_quantity: Option<i32>,
  #[serde(rename = "reservedQuantity")]
  reserved_quantity: Option<::models::ReservedQuantity>,
  #[serde(rename = "researchingQuantity")]
  researching_quantity: Option<::models::ResearchingQuantity>,
  #[serde(rename = "unfulfillableQuantity")]
  unfulfillable_quantity: Option<::models::UnfulfillableQuantity>
}

impl InventoryDetails {
  /// Summarized inventory details. This object will not appear if the details parameter in the request is false.
  pub fn new() -> InventoryDetails {
    InventoryDetails {
      fulfillable_quantity: None,
      inbound_working_quantity: None,
      inbound_shipped_quantity: None,
      inbound_receiving_quantity: None,
      reserved_quantity: None,
      researching_quantity: None,
      unfulfillable_quantity: None
    }
  }

  pub fn set_fulfillable_quantity(&mut self, fulfillable_quantity: i32) {
    self.fulfillable_quantity = Some(fulfillable_quantity);
  }

  pub fn with_fulfillable_quantity(mut self, fulfillable_quantity: i32) -> InventoryDetails {
    self.fulfillable_quantity = Some(fulfillable_quantity);
    self
  }

  pub fn fulfillable_quantity(&self) -> Option<&i32> {
    self.fulfillable_quantity.as_ref()
  }

  pub fn reset_fulfillable_quantity(&mut self) {
    self.fulfillable_quantity = None;
  }

  pub fn set_inbound_working_quantity(&mut self, inbound_working_quantity: i32) {
    self.inbound_working_quantity = Some(inbound_working_quantity);
  }

  pub fn with_inbound_working_quantity(mut self, inbound_working_quantity: i32) -> InventoryDetails {
    self.inbound_working_quantity = Some(inbound_working_quantity);
    self
  }

  pub fn inbound_working_quantity(&self) -> Option<&i32> {
    self.inbound_working_quantity.as_ref()
  }

  pub fn reset_inbound_working_quantity(&mut self) {
    self.inbound_working_quantity = None;
  }

  pub fn set_inbound_shipped_quantity(&mut self, inbound_shipped_quantity: i32) {
    self.inbound_shipped_quantity = Some(inbound_shipped_quantity);
  }

  pub fn with_inbound_shipped_quantity(mut self, inbound_shipped_quantity: i32) -> InventoryDetails {
    self.inbound_shipped_quantity = Some(inbound_shipped_quantity);
    self
  }

  pub fn inbound_shipped_quantity(&self) -> Option<&i32> {
    self.inbound_shipped_quantity.as_ref()
  }

  pub fn reset_inbound_shipped_quantity(&mut self) {
    self.inbound_shipped_quantity = None;
  }

  pub fn set_inbound_receiving_quantity(&mut self, inbound_receiving_quantity: i32) {
    self.inbound_receiving_quantity = Some(inbound_receiving_quantity);
  }

  pub fn with_inbound_receiving_quantity(mut self, inbound_receiving_quantity: i32) -> InventoryDetails {
    self.inbound_receiving_quantity = Some(inbound_receiving_quantity);
    self
  }

  pub fn inbound_receiving_quantity(&self) -> Option<&i32> {
    self.inbound_receiving_quantity.as_ref()
  }

  pub fn reset_inbound_receiving_quantity(&mut self) {
    self.inbound_receiving_quantity = None;
  }

  pub fn set_reserved_quantity(&mut self, reserved_quantity: ::models::ReservedQuantity) {
    self.reserved_quantity = Some(reserved_quantity);
  }

  pub fn with_reserved_quantity(mut self, reserved_quantity: ::models::ReservedQuantity) -> InventoryDetails {
    self.reserved_quantity = Some(reserved_quantity);
    self
  }

  pub fn reserved_quantity(&self) -> Option<&::models::ReservedQuantity> {
    self.reserved_quantity.as_ref()
  }

  pub fn reset_reserved_quantity(&mut self) {
    self.reserved_quantity = None;
  }

  pub fn set_researching_quantity(&mut self, researching_quantity: ::models::ResearchingQuantity) {
    self.researching_quantity = Some(researching_quantity);
  }

  pub fn with_researching_quantity(mut self, researching_quantity: ::models::ResearchingQuantity) -> InventoryDetails {
    self.researching_quantity = Some(researching_quantity);
    self
  }

  pub fn researching_quantity(&self) -> Option<&::models::ResearchingQuantity> {
    self.researching_quantity.as_ref()
  }

  pub fn reset_researching_quantity(&mut self) {
    self.researching_quantity = None;
  }

  pub fn set_unfulfillable_quantity(&mut self, unfulfillable_quantity: ::models::UnfulfillableQuantity) {
    self.unfulfillable_quantity = Some(unfulfillable_quantity);
  }

  pub fn with_unfulfillable_quantity(mut self, unfulfillable_quantity: ::models::UnfulfillableQuantity) -> InventoryDetails {
    self.unfulfillable_quantity = Some(unfulfillable_quantity);
    self
  }

  pub fn unfulfillable_quantity(&self) -> Option<&::models::UnfulfillableQuantity> {
    self.unfulfillable_quantity.as_ref()
  }

  pub fn reset_unfulfillable_quantity(&mut self) {
    self.unfulfillable_quantity = None;
  }

}



