/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network. Today this API is available only in the North America region. In 2021 we plan to release this API in the Europe and Far East regions.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ResearchingQuantity : The number of misplaced or warehouse damaged units that are actively being confirmed at our fulfillment centers.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ResearchingQuantity {
  /// The total number of units currently being researched in Amazon's fulfillment network.
  #[serde(rename = "totalResearchingQuantity")]
  total_researching_quantity: Option<i32>,
  /// A list of quantity details for items currently being researched.
  #[serde(rename = "researchingQuantityBreakdown")]
  researching_quantity_breakdown: Option<Vec<::models::ResearchingQuantityEntry>>
}

impl ResearchingQuantity {
  /// The number of misplaced or warehouse damaged units that are actively being confirmed at our fulfillment centers.
  pub fn new() -> ResearchingQuantity {
    ResearchingQuantity {
      total_researching_quantity: None,
      researching_quantity_breakdown: None
    }
  }

  pub fn set_total_researching_quantity(&mut self, total_researching_quantity: i32) {
    self.total_researching_quantity = Some(total_researching_quantity);
  }

  pub fn with_total_researching_quantity(mut self, total_researching_quantity: i32) -> ResearchingQuantity {
    self.total_researching_quantity = Some(total_researching_quantity);
    self
  }

  pub fn total_researching_quantity(&self) -> Option<&i32> {
    self.total_researching_quantity.as_ref()
  }

  pub fn reset_total_researching_quantity(&mut self) {
    self.total_researching_quantity = None;
  }

  pub fn set_researching_quantity_breakdown(&mut self, researching_quantity_breakdown: Vec<::models::ResearchingQuantityEntry>) {
    self.researching_quantity_breakdown = Some(researching_quantity_breakdown);
  }

  pub fn with_researching_quantity_breakdown(mut self, researching_quantity_breakdown: Vec<::models::ResearchingQuantityEntry>) -> ResearchingQuantity {
    self.researching_quantity_breakdown = Some(researching_quantity_breakdown);
    self
  }

  pub fn researching_quantity_breakdown(&self) -> Option<&Vec<::models::ResearchingQuantityEntry>> {
    self.researching_quantity_breakdown.as_ref()
  }

  pub fn reset_researching_quantity_breakdown(&mut self) {
    self.researching_quantity_breakdown = None;
  }

}



