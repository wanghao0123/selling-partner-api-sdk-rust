/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network. Today this API is available only in the North America region. In 2021 we plan to release this API in the Europe and Far East regions.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// UnfulfillableQuantity : The quantity of unfulfillable inventory.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct UnfulfillableQuantity {
  /// The total number of units in Amazon's fulfillment network in unsellable condition.
  #[serde(rename = "totalUnfulfillableQuantity")]
  total_unfulfillable_quantity: Option<i32>,
  /// The number of units in customer damaged disposition.
  #[serde(rename = "customerDamagedQuantity")]
  customer_damaged_quantity: Option<i32>,
  /// The number of units in warehouse damaged disposition.
  #[serde(rename = "warehouseDamagedQuantity")]
  warehouse_damaged_quantity: Option<i32>,
  /// The number of units in distributor damaged disposition.
  #[serde(rename = "distributorDamagedQuantity")]
  distributor_damaged_quantity: Option<i32>,
  /// The number of units in carrier damaged disposition.
  #[serde(rename = "carrierDamagedQuantity")]
  carrier_damaged_quantity: Option<i32>,
  /// The number of units in defective disposition.
  #[serde(rename = "defectiveQuantity")]
  defective_quantity: Option<i32>,
  /// The number of units in expired disposition.
  #[serde(rename = "expiredQuantity")]
  expired_quantity: Option<i32>
}

impl UnfulfillableQuantity {
  /// The quantity of unfulfillable inventory.
  pub fn new() -> UnfulfillableQuantity {
    UnfulfillableQuantity {
      total_unfulfillable_quantity: None,
      customer_damaged_quantity: None,
      warehouse_damaged_quantity: None,
      distributor_damaged_quantity: None,
      carrier_damaged_quantity: None,
      defective_quantity: None,
      expired_quantity: None
    }
  }

  pub fn set_total_unfulfillable_quantity(&mut self, total_unfulfillable_quantity: i32) {
    self.total_unfulfillable_quantity = Some(total_unfulfillable_quantity);
  }

  pub fn with_total_unfulfillable_quantity(mut self, total_unfulfillable_quantity: i32) -> UnfulfillableQuantity {
    self.total_unfulfillable_quantity = Some(total_unfulfillable_quantity);
    self
  }

  pub fn total_unfulfillable_quantity(&self) -> Option<&i32> {
    self.total_unfulfillable_quantity.as_ref()
  }

  pub fn reset_total_unfulfillable_quantity(&mut self) {
    self.total_unfulfillable_quantity = None;
  }

  pub fn set_customer_damaged_quantity(&mut self, customer_damaged_quantity: i32) {
    self.customer_damaged_quantity = Some(customer_damaged_quantity);
  }

  pub fn with_customer_damaged_quantity(mut self, customer_damaged_quantity: i32) -> UnfulfillableQuantity {
    self.customer_damaged_quantity = Some(customer_damaged_quantity);
    self
  }

  pub fn customer_damaged_quantity(&self) -> Option<&i32> {
    self.customer_damaged_quantity.as_ref()
  }

  pub fn reset_customer_damaged_quantity(&mut self) {
    self.customer_damaged_quantity = None;
  }

  pub fn set_warehouse_damaged_quantity(&mut self, warehouse_damaged_quantity: i32) {
    self.warehouse_damaged_quantity = Some(warehouse_damaged_quantity);
  }

  pub fn with_warehouse_damaged_quantity(mut self, warehouse_damaged_quantity: i32) -> UnfulfillableQuantity {
    self.warehouse_damaged_quantity = Some(warehouse_damaged_quantity);
    self
  }

  pub fn warehouse_damaged_quantity(&self) -> Option<&i32> {
    self.warehouse_damaged_quantity.as_ref()
  }

  pub fn reset_warehouse_damaged_quantity(&mut self) {
    self.warehouse_damaged_quantity = None;
  }

  pub fn set_distributor_damaged_quantity(&mut self, distributor_damaged_quantity: i32) {
    self.distributor_damaged_quantity = Some(distributor_damaged_quantity);
  }

  pub fn with_distributor_damaged_quantity(mut self, distributor_damaged_quantity: i32) -> UnfulfillableQuantity {
    self.distributor_damaged_quantity = Some(distributor_damaged_quantity);
    self
  }

  pub fn distributor_damaged_quantity(&self) -> Option<&i32> {
    self.distributor_damaged_quantity.as_ref()
  }

  pub fn reset_distributor_damaged_quantity(&mut self) {
    self.distributor_damaged_quantity = None;
  }

  pub fn set_carrier_damaged_quantity(&mut self, carrier_damaged_quantity: i32) {
    self.carrier_damaged_quantity = Some(carrier_damaged_quantity);
  }

  pub fn with_carrier_damaged_quantity(mut self, carrier_damaged_quantity: i32) -> UnfulfillableQuantity {
    self.carrier_damaged_quantity = Some(carrier_damaged_quantity);
    self
  }

  pub fn carrier_damaged_quantity(&self) -> Option<&i32> {
    self.carrier_damaged_quantity.as_ref()
  }

  pub fn reset_carrier_damaged_quantity(&mut self) {
    self.carrier_damaged_quantity = None;
  }

  pub fn set_defective_quantity(&mut self, defective_quantity: i32) {
    self.defective_quantity = Some(defective_quantity);
  }

  pub fn with_defective_quantity(mut self, defective_quantity: i32) -> UnfulfillableQuantity {
    self.defective_quantity = Some(defective_quantity);
    self
  }

  pub fn defective_quantity(&self) -> Option<&i32> {
    self.defective_quantity.as_ref()
  }

  pub fn reset_defective_quantity(&mut self) {
    self.defective_quantity = None;
  }

  pub fn set_expired_quantity(&mut self, expired_quantity: i32) {
    self.expired_quantity = Some(expired_quantity);
  }

  pub fn with_expired_quantity(mut self, expired_quantity: i32) -> UnfulfillableQuantity {
    self.expired_quantity = Some(expired_quantity);
    self
  }

  pub fn expired_quantity(&self) -> Option<&i32> {
    self.expired_quantity.as_ref()
  }

  pub fn reset_expired_quantity(&mut self) {
    self.expired_quantity = None;
  }

}



