/* 
 * Selling Partner API for FBA Inventory
 *
 * The Selling Partner API for FBA Inventory lets you programmatically retrieve information about inventory in Amazon's fulfillment network. Today this API is available only in the North America region. In 2021 we plan to release this API in the Europe and Far East regions.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetInventorySummariesResponse : The Response schema.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetInventorySummariesResponse {
  /// The payload for the getInventorySummaries operation.
  #[serde(rename = "payload")]
  payload: Option<::models::GetInventorySummariesResult>,
  #[serde(rename = "pagination")]
  pagination: Option<::models::Pagination>,
  /// One or more unexpected errors occurred during the getInventorySummaries operation.
  #[serde(rename = "errors")]
  errors: Option<::models::ErrorList>
}

impl GetInventorySummariesResponse {
  /// The Response schema.
  pub fn new() -> GetInventorySummariesResponse {
    GetInventorySummariesResponse {
      payload: None,
      pagination: None,
      errors: None
    }
  }

  pub fn set_payload(&mut self, payload: ::models::GetInventorySummariesResult) {
    self.payload = Some(payload);
  }

  pub fn with_payload(mut self, payload: ::models::GetInventorySummariesResult) -> GetInventorySummariesResponse {
    self.payload = Some(payload);
    self
  }

  pub fn payload(&self) -> Option<&::models::GetInventorySummariesResult> {
    self.payload.as_ref()
  }

  pub fn reset_payload(&mut self) {
    self.payload = None;
  }

  pub fn set_pagination(&mut self, pagination: ::models::Pagination) {
    self.pagination = Some(pagination);
  }

  pub fn with_pagination(mut self, pagination: ::models::Pagination) -> GetInventorySummariesResponse {
    self.pagination = Some(pagination);
    self
  }

  pub fn pagination(&self) -> Option<&::models::Pagination> {
    self.pagination.as_ref()
  }

  pub fn reset_pagination(&mut self) {
    self.pagination = None;
  }

  pub fn set_errors(&mut self, errors: ::models::ErrorList) {
    self.errors = Some(errors);
  }

  pub fn with_errors(mut self, errors: ::models::ErrorList) -> GetInventorySummariesResponse {
    self.errors = Some(errors);
    self
  }

  pub fn errors(&self) -> Option<&::models::ErrorList> {
    self.errors.as_ref()
  }

  pub fn reset_errors(&mut self) {
    self.errors = None;
  }

}



