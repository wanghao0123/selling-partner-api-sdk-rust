/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrderedQuantityDetails : Details of item quantity ordered

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderedQuantityDetails {
  /// The date when the line item quantity was updated by buyer. Must be in ISO-8601 date/time format.
  #[serde(rename = "updatedDate")]
  updated_date: Option<String>,
  /// Item quantity ordered.
  #[serde(rename = "orderedQuantity")]
  ordered_quantity: Option<::models::ItemQuantity>,
  /// Item quantity ordered.
  #[serde(rename = "cancelledQuantity")]
  cancelled_quantity: Option<::models::ItemQuantity>
}

impl OrderedQuantityDetails {
  /// Details of item quantity ordered
  pub fn new() -> OrderedQuantityDetails {
    OrderedQuantityDetails {
      updated_date: None,
      ordered_quantity: None,
      cancelled_quantity: None
    }
  }

  pub fn set_updated_date(&mut self, updated_date: String) {
    self.updated_date = Some(updated_date);
  }

  pub fn with_updated_date(mut self, updated_date: String) -> OrderedQuantityDetails {
    self.updated_date = Some(updated_date);
    self
  }

  pub fn updated_date(&self) -> Option<&String> {
    self.updated_date.as_ref()
  }

  pub fn reset_updated_date(&mut self) {
    self.updated_date = None;
  }

  pub fn set_ordered_quantity(&mut self, ordered_quantity: ::models::ItemQuantity) {
    self.ordered_quantity = Some(ordered_quantity);
  }

  pub fn with_ordered_quantity(mut self, ordered_quantity: ::models::ItemQuantity) -> OrderedQuantityDetails {
    self.ordered_quantity = Some(ordered_quantity);
    self
  }

  pub fn ordered_quantity(&self) -> Option<&::models::ItemQuantity> {
    self.ordered_quantity.as_ref()
  }

  pub fn reset_ordered_quantity(&mut self) {
    self.ordered_quantity = None;
  }

  pub fn set_cancelled_quantity(&mut self, cancelled_quantity: ::models::ItemQuantity) {
    self.cancelled_quantity = Some(cancelled_quantity);
  }

  pub fn with_cancelled_quantity(mut self, cancelled_quantity: ::models::ItemQuantity) -> OrderedQuantityDetails {
    self.cancelled_quantity = Some(cancelled_quantity);
    self
  }

  pub fn cancelled_quantity(&self) -> Option<&::models::ItemQuantity> {
    self.cancelled_quantity.as_ref()
  }

  pub fn reset_cancelled_quantity(&mut self) {
    self.cancelled_quantity = None;
  }

}



