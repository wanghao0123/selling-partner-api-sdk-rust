/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PartyIdentification {
  /// Assigned identification for the party. For example, warehouse code or vendor code. Please refer to specific party for more details.
  #[serde(rename = "partyId")]
  party_id: String,
  /// Identification of the party by address.
  #[serde(rename = "address")]
  address: Option<::models::Address>,
  /// Tax registration details of the party.
  #[serde(rename = "taxInfo")]
  tax_info: Option<::models::TaxRegistrationDetails>
}

impl PartyIdentification {
  pub fn new(party_id: String) -> PartyIdentification {
    PartyIdentification {
      party_id: party_id,
      address: None,
      tax_info: None
    }
  }

  pub fn set_party_id(&mut self, party_id: String) {
    self.party_id = party_id;
  }

  pub fn with_party_id(mut self, party_id: String) -> PartyIdentification {
    self.party_id = party_id;
    self
  }

  pub fn party_id(&self) -> &String {
    &self.party_id
  }


  pub fn set_address(&mut self, address: ::models::Address) {
    self.address = Some(address);
  }

  pub fn with_address(mut self, address: ::models::Address) -> PartyIdentification {
    self.address = Some(address);
    self
  }

  pub fn address(&self) -> Option<&::models::Address> {
    self.address.as_ref()
  }

  pub fn reset_address(&mut self) {
    self.address = None;
  }

  pub fn set_tax_info(&mut self, tax_info: ::models::TaxRegistrationDetails) {
    self.tax_info = Some(tax_info);
  }

  pub fn with_tax_info(mut self, tax_info: ::models::TaxRegistrationDetails) -> PartyIdentification {
    self.tax_info = Some(tax_info);
    self
  }

  pub fn tax_info(&self) -> Option<&::models::TaxRegistrationDetails> {
    self.tax_info.as_ref()
  }

  pub fn reset_tax_info(&mut self) {
    self.tax_info = None;
  }

}



