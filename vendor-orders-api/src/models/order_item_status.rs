/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderItemStatus {
  /// Numbering of the item on the purchase order. The first item will be 1, the second 2, and so on.
  #[serde(rename = "itemSequenceNumber")]
  item_sequence_number: String,
  /// Buyer's Standard Identification Number (ASIN) of an item.
  #[serde(rename = "buyerProductIdentifier")]
  buyer_product_identifier: Option<String>,
  /// The vendor selected product identification of the item.
  #[serde(rename = "vendorProductIdentifier")]
  vendor_product_identifier: Option<String>,
  /// The net cost to Amazon each (cost).
  #[serde(rename = "netCost")]
  net_cost: Option<::models::Money>,
  /// The list Price to Amazon each (list).
  #[serde(rename = "listPrice")]
  list_price: Option<::models::Money>,
  /// Ordered quantity information.
  #[serde(rename = "orderedQuantity")]
  ordered_quantity: Option<Value>,
  /// Acknowledgement status information.
  #[serde(rename = "acknowledgementStatus")]
  acknowledgement_status: Option<Value>
}

impl OrderItemStatus {
  pub fn new(item_sequence_number: String) -> OrderItemStatus {
    OrderItemStatus {
      item_sequence_number: item_sequence_number,
      buyer_product_identifier: None,
      vendor_product_identifier: None,
      net_cost: None,
      list_price: None,
      ordered_quantity: None,
      acknowledgement_status: None
    }
  }

  pub fn set_item_sequence_number(&mut self, item_sequence_number: String) {
    self.item_sequence_number = item_sequence_number;
  }

  pub fn with_item_sequence_number(mut self, item_sequence_number: String) -> OrderItemStatus {
    self.item_sequence_number = item_sequence_number;
    self
  }

  pub fn item_sequence_number(&self) -> &String {
    &self.item_sequence_number
  }


  pub fn set_buyer_product_identifier(&mut self, buyer_product_identifier: String) {
    self.buyer_product_identifier = Some(buyer_product_identifier);
  }

  pub fn with_buyer_product_identifier(mut self, buyer_product_identifier: String) -> OrderItemStatus {
    self.buyer_product_identifier = Some(buyer_product_identifier);
    self
  }

  pub fn buyer_product_identifier(&self) -> Option<&String> {
    self.buyer_product_identifier.as_ref()
  }

  pub fn reset_buyer_product_identifier(&mut self) {
    self.buyer_product_identifier = None;
  }

  pub fn set_vendor_product_identifier(&mut self, vendor_product_identifier: String) {
    self.vendor_product_identifier = Some(vendor_product_identifier);
  }

  pub fn with_vendor_product_identifier(mut self, vendor_product_identifier: String) -> OrderItemStatus {
    self.vendor_product_identifier = Some(vendor_product_identifier);
    self
  }

  pub fn vendor_product_identifier(&self) -> Option<&String> {
    self.vendor_product_identifier.as_ref()
  }

  pub fn reset_vendor_product_identifier(&mut self) {
    self.vendor_product_identifier = None;
  }

  pub fn set_net_cost(&mut self, net_cost: ::models::Money) {
    self.net_cost = Some(net_cost);
  }

  pub fn with_net_cost(mut self, net_cost: ::models::Money) -> OrderItemStatus {
    self.net_cost = Some(net_cost);
    self
  }

  pub fn net_cost(&self) -> Option<&::models::Money> {
    self.net_cost.as_ref()
  }

  pub fn reset_net_cost(&mut self) {
    self.net_cost = None;
  }

  pub fn set_list_price(&mut self, list_price: ::models::Money) {
    self.list_price = Some(list_price);
  }

  pub fn with_list_price(mut self, list_price: ::models::Money) -> OrderItemStatus {
    self.list_price = Some(list_price);
    self
  }

  pub fn list_price(&self) -> Option<&::models::Money> {
    self.list_price.as_ref()
  }

  pub fn reset_list_price(&mut self) {
    self.list_price = None;
  }

  pub fn set_ordered_quantity(&mut self, ordered_quantity: Value) {
    self.ordered_quantity = Some(ordered_quantity);
  }

  pub fn with_ordered_quantity(mut self, ordered_quantity: Value) -> OrderItemStatus {
    self.ordered_quantity = Some(ordered_quantity);
    self
  }

  pub fn ordered_quantity(&self) -> Option<&Value> {
    self.ordered_quantity.as_ref()
  }

  pub fn reset_ordered_quantity(&mut self) {
    self.ordered_quantity = None;
  }

  pub fn set_acknowledgement_status(&mut self, acknowledgement_status: Value) {
    self.acknowledgement_status = Some(acknowledgement_status);
  }

  pub fn with_acknowledgement_status(mut self, acknowledgement_status: Value) -> OrderItemStatus {
    self.acknowledgement_status = Some(acknowledgement_status);
    self
  }

  pub fn acknowledgement_status(&self) -> Option<&Value> {
    self.acknowledgement_status.as_ref()
  }

  pub fn reset_acknowledgement_status(&mut self) {
    self.acknowledgement_status = None;
  }

}



