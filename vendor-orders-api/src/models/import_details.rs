/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ImportDetails : Import details for an import order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ImportDetails {
  /// If the recipient requests, contains the shipment method of payment. This is for import PO's only.
  #[serde(rename = "methodOfPayment")]
  method_of_payment: Option<String>,
  /// Incoterms (International Commercial Terms) are used to divide transaction costs and responsibilities between buyer and seller and reflect state-of-the-art transportation practices. This is for import purchase orders only. 
  #[serde(rename = "internationalCommercialTerms")]
  international_commercial_terms: Option<String>,
  /// The port where goods on an import purchase order must be delivered by the vendor. This should only be specified when the internationalCommercialTerms is FOB.
  #[serde(rename = "portOfDelivery")]
  port_of_delivery: Option<String>,
  /// Types and numbers of container(s) for import purchase orders. Can be a comma-separated list if the shipment has multiple containers. HC signifies a high-capacity container. Free-text field, limited to 64 characters. The format will be a comma-delimited list containing values of the type: $NUMBER_OF_CONTAINERS_OF_THIS_TYPE-$CONTAINER_TYPE. The list of values for the container type is: 40'(40-foot container), 40'HC (40-foot high-capacity container), 45', 45'HC, 30', 30'HC, 20', 20'HC.
  #[serde(rename = "importContainers")]
  import_containers: Option<String>,
  /// Special instructions regarding the shipment. This field is for import purchase orders.
  #[serde(rename = "shippingInstructions")]
  shipping_instructions: Option<String>
}

impl ImportDetails {
  /// Import details for an import order.
  pub fn new() -> ImportDetails {
    ImportDetails {
      method_of_payment: None,
      international_commercial_terms: None,
      port_of_delivery: None,
      import_containers: None,
      shipping_instructions: None
    }
  }

  pub fn set_method_of_payment(&mut self, method_of_payment: String) {
    self.method_of_payment = Some(method_of_payment);
  }

  pub fn with_method_of_payment(mut self, method_of_payment: String) -> ImportDetails {
    self.method_of_payment = Some(method_of_payment);
    self
  }

  pub fn method_of_payment(&self) -> Option<&String> {
    self.method_of_payment.as_ref()
  }

  pub fn reset_method_of_payment(&mut self) {
    self.method_of_payment = None;
  }

  pub fn set_international_commercial_terms(&mut self, international_commercial_terms: String) {
    self.international_commercial_terms = Some(international_commercial_terms);
  }

  pub fn with_international_commercial_terms(mut self, international_commercial_terms: String) -> ImportDetails {
    self.international_commercial_terms = Some(international_commercial_terms);
    self
  }

  pub fn international_commercial_terms(&self) -> Option<&String> {
    self.international_commercial_terms.as_ref()
  }

  pub fn reset_international_commercial_terms(&mut self) {
    self.international_commercial_terms = None;
  }

  pub fn set_port_of_delivery(&mut self, port_of_delivery: String) {
    self.port_of_delivery = Some(port_of_delivery);
  }

  pub fn with_port_of_delivery(mut self, port_of_delivery: String) -> ImportDetails {
    self.port_of_delivery = Some(port_of_delivery);
    self
  }

  pub fn port_of_delivery(&self) -> Option<&String> {
    self.port_of_delivery.as_ref()
  }

  pub fn reset_port_of_delivery(&mut self) {
    self.port_of_delivery = None;
  }

  pub fn set_import_containers(&mut self, import_containers: String) {
    self.import_containers = Some(import_containers);
  }

  pub fn with_import_containers(mut self, import_containers: String) -> ImportDetails {
    self.import_containers = Some(import_containers);
    self
  }

  pub fn import_containers(&self) -> Option<&String> {
    self.import_containers.as_ref()
  }

  pub fn reset_import_containers(&mut self) {
    self.import_containers = None;
  }

  pub fn set_shipping_instructions(&mut self, shipping_instructions: String) {
    self.shipping_instructions = Some(shipping_instructions);
  }

  pub fn with_shipping_instructions(mut self, shipping_instructions: String) -> ImportDetails {
    self.shipping_instructions = Some(shipping_instructions);
    self
  }

  pub fn shipping_instructions(&self) -> Option<&String> {
    self.shipping_instructions.as_ref()
  }

  pub fn reset_shipping_instructions(&mut self) {
    self.shipping_instructions = None;
  }

}



