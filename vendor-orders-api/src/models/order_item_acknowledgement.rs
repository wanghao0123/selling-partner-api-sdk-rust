/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderItemAcknowledgement {
  /// This indicates the acknowledgement code.
  #[serde(rename = "acknowledgementCode")]
  acknowledgement_code: String,
  /// Details of quantity acknowledged with the above acknowledgement code.
  #[serde(rename = "acknowledgedQuantity")]
  acknowledged_quantity: ::models::ItemQuantity,
  /// Estimated ship date per line item. Must be in ISO-8601 date/time format.
  #[serde(rename = "scheduledShipDate")]
  scheduled_ship_date: Option<String>,
  /// Estimated delivery date per line item. Must be in ISO-8601 date/time format.
  #[serde(rename = "scheduledDeliveryDate")]
  scheduled_delivery_date: Option<String>,
  /// Indicates the reason for rejection.
  #[serde(rename = "rejectionReason")]
  rejection_reason: Option<String>
}

impl OrderItemAcknowledgement {
  pub fn new(acknowledgement_code: String, acknowledged_quantity: ::models::ItemQuantity) -> OrderItemAcknowledgement {
    OrderItemAcknowledgement {
      acknowledgement_code: acknowledgement_code,
      acknowledged_quantity: acknowledged_quantity,
      scheduled_ship_date: None,
      scheduled_delivery_date: None,
      rejection_reason: None
    }
  }

  pub fn set_acknowledgement_code(&mut self, acknowledgement_code: String) {
    self.acknowledgement_code = acknowledgement_code;
  }

  pub fn with_acknowledgement_code(mut self, acknowledgement_code: String) -> OrderItemAcknowledgement {
    self.acknowledgement_code = acknowledgement_code;
    self
  }

  pub fn acknowledgement_code(&self) -> &String {
    &self.acknowledgement_code
  }


  pub fn set_acknowledged_quantity(&mut self, acknowledged_quantity: ::models::ItemQuantity) {
    self.acknowledged_quantity = acknowledged_quantity;
  }

  pub fn with_acknowledged_quantity(mut self, acknowledged_quantity: ::models::ItemQuantity) -> OrderItemAcknowledgement {
    self.acknowledged_quantity = acknowledged_quantity;
    self
  }

  pub fn acknowledged_quantity(&self) -> &::models::ItemQuantity {
    &self.acknowledged_quantity
  }


  pub fn set_scheduled_ship_date(&mut self, scheduled_ship_date: String) {
    self.scheduled_ship_date = Some(scheduled_ship_date);
  }

  pub fn with_scheduled_ship_date(mut self, scheduled_ship_date: String) -> OrderItemAcknowledgement {
    self.scheduled_ship_date = Some(scheduled_ship_date);
    self
  }

  pub fn scheduled_ship_date(&self) -> Option<&String> {
    self.scheduled_ship_date.as_ref()
  }

  pub fn reset_scheduled_ship_date(&mut self) {
    self.scheduled_ship_date = None;
  }

  pub fn set_scheduled_delivery_date(&mut self, scheduled_delivery_date: String) {
    self.scheduled_delivery_date = Some(scheduled_delivery_date);
  }

  pub fn with_scheduled_delivery_date(mut self, scheduled_delivery_date: String) -> OrderItemAcknowledgement {
    self.scheduled_delivery_date = Some(scheduled_delivery_date);
    self
  }

  pub fn scheduled_delivery_date(&self) -> Option<&String> {
    self.scheduled_delivery_date.as_ref()
  }

  pub fn reset_scheduled_delivery_date(&mut self) {
    self.scheduled_delivery_date = None;
  }

  pub fn set_rejection_reason(&mut self, rejection_reason: String) {
    self.rejection_reason = Some(rejection_reason);
  }

  pub fn with_rejection_reason(mut self, rejection_reason: String) -> OrderItemAcknowledgement {
    self.rejection_reason = Some(rejection_reason);
    self
  }

  pub fn rejection_reason(&self) -> Option<&String> {
    self.rejection_reason.as_ref()
  }

  pub fn reset_rejection_reason(&mut self) {
    self.rejection_reason = None;
  }

}



