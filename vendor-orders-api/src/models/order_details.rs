/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrderDetails : Details of an order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderDetails {
  /// The date the purchase order was placed. Must be in ISO-8601 date/time format.
  #[serde(rename = "purchaseOrderDate")]
  purchase_order_date: String,
  /// The date when purchase order was last changed by Amazon after the order was placed. This date will be greater than 'purchaseOrderDate'. This means the PO data was changed on that date and vendors are required to fulfill the  updated PO. The PO changes can be related to Item Quantity, Ship to Location, Ship Window etc. This field will not be present in orders that have not changed after creation. Must be in ISO-8601 date/time format.
  #[serde(rename = "purchaseOrderChangedDate")]
  purchase_order_changed_date: Option<String>,
  /// The date when current purchase order state was changed. Current purchase order state is available in the field 'purchaseOrderState'. Must be in ISO-8601 date/time format.
  #[serde(rename = "purchaseOrderStateChangedDate")]
  purchase_order_state_changed_date: String,
  /// Type of purchase order.
  #[serde(rename = "purchaseOrderType")]
  purchase_order_type: Option<String>,
  /// If the purchase order is an import order, the details for the import order.
  #[serde(rename = "importDetails")]
  import_details: Option<::models::ImportDetails>,
  /// If requested by the recipient, this field will contain a promotional/deal number. The discount code line is optional. It is used to obtain a price discount on items on the order.
  #[serde(rename = "dealCode")]
  deal_code: Option<String>,
  /// Payment method used.
  #[serde(rename = "paymentMethod")]
  payment_method: Option<String>,
  /// Name/Address and tax details of the buying party.
  #[serde(rename = "buyingParty")]
  buying_party: Option<::models::PartyIdentification>,
  /// Name/Address and tax details of the selling party.
  #[serde(rename = "sellingParty")]
  selling_party: Option<::models::PartyIdentification>,
  /// Name/Address and tax details of the ship to party.
  #[serde(rename = "shipToParty")]
  ship_to_party: Option<::models::PartyIdentification>,
  /// Name/Address and tax details of the bill to party.
  #[serde(rename = "billToParty")]
  bill_to_party: Option<::models::PartyIdentification>,
  /// This indicates the ship window. Format is start and end date separated by double hyphen (--). For example, 2007-03-01T13:00:00Z--2007-03-11T15:30:00Z.
  #[serde(rename = "shipWindow")]
  ship_window: Option<::models::DateTimeInterval>,
  /// This indicates the delivery window. Format is start and end date separated by double hyphen (--). For example, 2007-03-01T13:00:00Z--2007-03-11T15:30:00Z.
  #[serde(rename = "deliveryWindow")]
  delivery_window: Option<::models::DateTimeInterval>,
  /// A list of items in this purchase order.
  #[serde(rename = "items")]
  items: Vec<::models::OrderItem>
}

impl OrderDetails {
  /// Details of an order.
  pub fn new(purchase_order_date: String, purchase_order_state_changed_date: String, items: Vec<::models::OrderItem>) -> OrderDetails {
    OrderDetails {
      purchase_order_date: purchase_order_date,
      purchase_order_changed_date: None,
      purchase_order_state_changed_date: purchase_order_state_changed_date,
      purchase_order_type: None,
      import_details: None,
      deal_code: None,
      payment_method: None,
      buying_party: None,
      selling_party: None,
      ship_to_party: None,
      bill_to_party: None,
      ship_window: None,
      delivery_window: None,
      items: items
    }
  }

  pub fn set_purchase_order_date(&mut self, purchase_order_date: String) {
    self.purchase_order_date = purchase_order_date;
  }

  pub fn with_purchase_order_date(mut self, purchase_order_date: String) -> OrderDetails {
    self.purchase_order_date = purchase_order_date;
    self
  }

  pub fn purchase_order_date(&self) -> &String {
    &self.purchase_order_date
  }


  pub fn set_purchase_order_changed_date(&mut self, purchase_order_changed_date: String) {
    self.purchase_order_changed_date = Some(purchase_order_changed_date);
  }

  pub fn with_purchase_order_changed_date(mut self, purchase_order_changed_date: String) -> OrderDetails {
    self.purchase_order_changed_date = Some(purchase_order_changed_date);
    self
  }

  pub fn purchase_order_changed_date(&self) -> Option<&String> {
    self.purchase_order_changed_date.as_ref()
  }

  pub fn reset_purchase_order_changed_date(&mut self) {
    self.purchase_order_changed_date = None;
  }

  pub fn set_purchase_order_state_changed_date(&mut self, purchase_order_state_changed_date: String) {
    self.purchase_order_state_changed_date = purchase_order_state_changed_date;
  }

  pub fn with_purchase_order_state_changed_date(mut self, purchase_order_state_changed_date: String) -> OrderDetails {
    self.purchase_order_state_changed_date = purchase_order_state_changed_date;
    self
  }

  pub fn purchase_order_state_changed_date(&self) -> &String {
    &self.purchase_order_state_changed_date
  }


  pub fn set_purchase_order_type(&mut self, purchase_order_type: String) {
    self.purchase_order_type = Some(purchase_order_type);
  }

  pub fn with_purchase_order_type(mut self, purchase_order_type: String) -> OrderDetails {
    self.purchase_order_type = Some(purchase_order_type);
    self
  }

  pub fn purchase_order_type(&self) -> Option<&String> {
    self.purchase_order_type.as_ref()
  }

  pub fn reset_purchase_order_type(&mut self) {
    self.purchase_order_type = None;
  }

  pub fn set_import_details(&mut self, import_details: ::models::ImportDetails) {
    self.import_details = Some(import_details);
  }

  pub fn with_import_details(mut self, import_details: ::models::ImportDetails) -> OrderDetails {
    self.import_details = Some(import_details);
    self
  }

  pub fn import_details(&self) -> Option<&::models::ImportDetails> {
    self.import_details.as_ref()
  }

  pub fn reset_import_details(&mut self) {
    self.import_details = None;
  }

  pub fn set_deal_code(&mut self, deal_code: String) {
    self.deal_code = Some(deal_code);
  }

  pub fn with_deal_code(mut self, deal_code: String) -> OrderDetails {
    self.deal_code = Some(deal_code);
    self
  }

  pub fn deal_code(&self) -> Option<&String> {
    self.deal_code.as_ref()
  }

  pub fn reset_deal_code(&mut self) {
    self.deal_code = None;
  }

  pub fn set_payment_method(&mut self, payment_method: String) {
    self.payment_method = Some(payment_method);
  }

  pub fn with_payment_method(mut self, payment_method: String) -> OrderDetails {
    self.payment_method = Some(payment_method);
    self
  }

  pub fn payment_method(&self) -> Option<&String> {
    self.payment_method.as_ref()
  }

  pub fn reset_payment_method(&mut self) {
    self.payment_method = None;
  }

  pub fn set_buying_party(&mut self, buying_party: ::models::PartyIdentification) {
    self.buying_party = Some(buying_party);
  }

  pub fn with_buying_party(mut self, buying_party: ::models::PartyIdentification) -> OrderDetails {
    self.buying_party = Some(buying_party);
    self
  }

  pub fn buying_party(&self) -> Option<&::models::PartyIdentification> {
    self.buying_party.as_ref()
  }

  pub fn reset_buying_party(&mut self) {
    self.buying_party = None;
  }

  pub fn set_selling_party(&mut self, selling_party: ::models::PartyIdentification) {
    self.selling_party = Some(selling_party);
  }

  pub fn with_selling_party(mut self, selling_party: ::models::PartyIdentification) -> OrderDetails {
    self.selling_party = Some(selling_party);
    self
  }

  pub fn selling_party(&self) -> Option<&::models::PartyIdentification> {
    self.selling_party.as_ref()
  }

  pub fn reset_selling_party(&mut self) {
    self.selling_party = None;
  }

  pub fn set_ship_to_party(&mut self, ship_to_party: ::models::PartyIdentification) {
    self.ship_to_party = Some(ship_to_party);
  }

  pub fn with_ship_to_party(mut self, ship_to_party: ::models::PartyIdentification) -> OrderDetails {
    self.ship_to_party = Some(ship_to_party);
    self
  }

  pub fn ship_to_party(&self) -> Option<&::models::PartyIdentification> {
    self.ship_to_party.as_ref()
  }

  pub fn reset_ship_to_party(&mut self) {
    self.ship_to_party = None;
  }

  pub fn set_bill_to_party(&mut self, bill_to_party: ::models::PartyIdentification) {
    self.bill_to_party = Some(bill_to_party);
  }

  pub fn with_bill_to_party(mut self, bill_to_party: ::models::PartyIdentification) -> OrderDetails {
    self.bill_to_party = Some(bill_to_party);
    self
  }

  pub fn bill_to_party(&self) -> Option<&::models::PartyIdentification> {
    self.bill_to_party.as_ref()
  }

  pub fn reset_bill_to_party(&mut self) {
    self.bill_to_party = None;
  }

  pub fn set_ship_window(&mut self, ship_window: ::models::DateTimeInterval) {
    self.ship_window = Some(ship_window);
  }

  pub fn with_ship_window(mut self, ship_window: ::models::DateTimeInterval) -> OrderDetails {
    self.ship_window = Some(ship_window);
    self
  }

  pub fn ship_window(&self) -> Option<&::models::DateTimeInterval> {
    self.ship_window.as_ref()
  }

  pub fn reset_ship_window(&mut self) {
    self.ship_window = None;
  }

  pub fn set_delivery_window(&mut self, delivery_window: ::models::DateTimeInterval) {
    self.delivery_window = Some(delivery_window);
  }

  pub fn with_delivery_window(mut self, delivery_window: ::models::DateTimeInterval) -> OrderDetails {
    self.delivery_window = Some(delivery_window);
    self
  }

  pub fn delivery_window(&self) -> Option<&::models::DateTimeInterval> {
    self.delivery_window.as_ref()
  }

  pub fn reset_delivery_window(&mut self) {
    self.delivery_window = None;
  }

  pub fn set_items(&mut self, items: Vec<::models::OrderItem>) {
    self.items = items;
  }

  pub fn with_items(mut self, items: Vec<::models::OrderItem>) -> OrderDetails {
    self.items = items;
    self
  }

  pub fn items(&self) -> &Vec<::models::OrderItem> {
    &self.items
  }


}



