/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AcknowledgementStatusDetails : Details of item quantity ordered

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AcknowledgementStatusDetails {
  /// The date when the line item was confirmed by vendor. Must be in ISO-8601 date/time format.
  #[serde(rename = "acknowledgementDate")]
  acknowledgement_date: Option<String>,
  /// Item quantity accepted by vendor to be shipped.
  #[serde(rename = "acceptedQuantity")]
  accepted_quantity: Option<::models::ItemQuantity>,
  /// Item quantity rejected by vendor.
  #[serde(rename = "rejectedQuantity")]
  rejected_quantity: Option<::models::ItemQuantity>
}

impl AcknowledgementStatusDetails {
  /// Details of item quantity ordered
  pub fn new() -> AcknowledgementStatusDetails {
    AcknowledgementStatusDetails {
      acknowledgement_date: None,
      accepted_quantity: None,
      rejected_quantity: None
    }
  }

  pub fn set_acknowledgement_date(&mut self, acknowledgement_date: String) {
    self.acknowledgement_date = Some(acknowledgement_date);
  }

  pub fn with_acknowledgement_date(mut self, acknowledgement_date: String) -> AcknowledgementStatusDetails {
    self.acknowledgement_date = Some(acknowledgement_date);
    self
  }

  pub fn acknowledgement_date(&self) -> Option<&String> {
    self.acknowledgement_date.as_ref()
  }

  pub fn reset_acknowledgement_date(&mut self) {
    self.acknowledgement_date = None;
  }

  pub fn set_accepted_quantity(&mut self, accepted_quantity: ::models::ItemQuantity) {
    self.accepted_quantity = Some(accepted_quantity);
  }

  pub fn with_accepted_quantity(mut self, accepted_quantity: ::models::ItemQuantity) -> AcknowledgementStatusDetails {
    self.accepted_quantity = Some(accepted_quantity);
    self
  }

  pub fn accepted_quantity(&self) -> Option<&::models::ItemQuantity> {
    self.accepted_quantity.as_ref()
  }

  pub fn reset_accepted_quantity(&mut self) {
    self.accepted_quantity = None;
  }

  pub fn set_rejected_quantity(&mut self, rejected_quantity: ::models::ItemQuantity) {
    self.rejected_quantity = Some(rejected_quantity);
  }

  pub fn with_rejected_quantity(mut self, rejected_quantity: ::models::ItemQuantity) -> AcknowledgementStatusDetails {
    self.rejected_quantity = Some(rejected_quantity);
    self
  }

  pub fn rejected_quantity(&self) -> Option<&::models::ItemQuantity> {
    self.rejected_quantity.as_ref()
  }

  pub fn reset_rejected_quantity(&mut self) {
    self.rejected_quantity = None;
  }

}



