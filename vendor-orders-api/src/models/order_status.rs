/* 
 * Selling Partner API for Retail Procurement Orders
 *
 * The Selling Partner API for Retail Procurement Orders provides programmatic access to vendor orders data.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// OrderStatus : Current status of a purchase order.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct OrderStatus {
  /// The buyer's purchase order number for this order. Formatting Notes: 8-character alpha-numeric code.
  #[serde(rename = "purchaseOrderNumber")]
  purchase_order_number: String,
  /// The status of the buyer's purchase order for this order.
  #[serde(rename = "purchaseOrderStatus")]
  purchase_order_status: String,
  /// The date the purchase order was placed. Must be in ISO-8601 date/time format.
  #[serde(rename = "purchaseOrderDate")]
  purchase_order_date: String,
  /// The date when the purchase order was last updated. Must be in ISO-8601 date/time format.
  #[serde(rename = "lastUpdatedDate")]
  last_updated_date: Option<String>,
  /// Name/Address and tax details of the selling party.
  #[serde(rename = "sellingParty")]
  selling_party: ::models::PartyIdentification,
  /// Name/Address and tax details of the ship to party.
  #[serde(rename = "shipToParty")]
  ship_to_party: ::models::PartyIdentification,
  /// Detailed order status.
  #[serde(rename = "itemStatus")]
  item_status: ::models::ItemStatus
}

impl OrderStatus {
  /// Current status of a purchase order.
  pub fn new(purchase_order_number: String, purchase_order_status: String, purchase_order_date: String, selling_party: ::models::PartyIdentification, ship_to_party: ::models::PartyIdentification, item_status: ::models::ItemStatus) -> OrderStatus {
    OrderStatus {
      purchase_order_number: purchase_order_number,
      purchase_order_status: purchase_order_status,
      purchase_order_date: purchase_order_date,
      last_updated_date: None,
      selling_party: selling_party,
      ship_to_party: ship_to_party,
      item_status: item_status
    }
  }

  pub fn set_purchase_order_number(&mut self, purchase_order_number: String) {
    self.purchase_order_number = purchase_order_number;
  }

  pub fn with_purchase_order_number(mut self, purchase_order_number: String) -> OrderStatus {
    self.purchase_order_number = purchase_order_number;
    self
  }

  pub fn purchase_order_number(&self) -> &String {
    &self.purchase_order_number
  }


  pub fn set_purchase_order_status(&mut self, purchase_order_status: String) {
    self.purchase_order_status = purchase_order_status;
  }

  pub fn with_purchase_order_status(mut self, purchase_order_status: String) -> OrderStatus {
    self.purchase_order_status = purchase_order_status;
    self
  }

  pub fn purchase_order_status(&self) -> &String {
    &self.purchase_order_status
  }


  pub fn set_purchase_order_date(&mut self, purchase_order_date: String) {
    self.purchase_order_date = purchase_order_date;
  }

  pub fn with_purchase_order_date(mut self, purchase_order_date: String) -> OrderStatus {
    self.purchase_order_date = purchase_order_date;
    self
  }

  pub fn purchase_order_date(&self) -> &String {
    &self.purchase_order_date
  }


  pub fn set_last_updated_date(&mut self, last_updated_date: String) {
    self.last_updated_date = Some(last_updated_date);
  }

  pub fn with_last_updated_date(mut self, last_updated_date: String) -> OrderStatus {
    self.last_updated_date = Some(last_updated_date);
    self
  }

  pub fn last_updated_date(&self) -> Option<&String> {
    self.last_updated_date.as_ref()
  }

  pub fn reset_last_updated_date(&mut self) {
    self.last_updated_date = None;
  }

  pub fn set_selling_party(&mut self, selling_party: ::models::PartyIdentification) {
    self.selling_party = selling_party;
  }

  pub fn with_selling_party(mut self, selling_party: ::models::PartyIdentification) -> OrderStatus {
    self.selling_party = selling_party;
    self
  }

  pub fn selling_party(&self) -> &::models::PartyIdentification {
    &self.selling_party
  }


  pub fn set_ship_to_party(&mut self, ship_to_party: ::models::PartyIdentification) {
    self.ship_to_party = ship_to_party;
  }

  pub fn with_ship_to_party(mut self, ship_to_party: ::models::PartyIdentification) -> OrderStatus {
    self.ship_to_party = ship_to_party;
    self
  }

  pub fn ship_to_party(&self) -> &::models::PartyIdentification {
    &self.ship_to_party
  }


  pub fn set_item_status(&mut self, item_status: ::models::ItemStatus) {
    self.item_status = item_status;
  }

  pub fn with_item_status(mut self, item_status: ::models::ItemStatus) -> OrderStatus {
    self.item_status = item_status;
    self
  }

  pub fn item_status(&self) -> &::models::ItemStatus {
    &self.item_status
  }


}



