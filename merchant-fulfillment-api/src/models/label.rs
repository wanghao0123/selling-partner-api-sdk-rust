/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Label : Data for creating a shipping label and dimensions for printing the label.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Label {
  #[serde(rename = "CustomTextForLabel")]
  custom_text_for_label: Option<::models::CustomTextForLabel>,
  #[serde(rename = "Dimensions")]
  dimensions: ::models::LabelDimensions,
  #[serde(rename = "FileContents")]
  file_contents: ::models::FileContents,
  #[serde(rename = "LabelFormat")]
  label_format: Option<::models::LabelFormat>,
  #[serde(rename = "StandardIdForLabel")]
  standard_id_for_label: Option<::models::StandardIdForLabel>
}

impl Label {
  /// Data for creating a shipping label and dimensions for printing the label.
  pub fn new(dimensions: ::models::LabelDimensions, file_contents: ::models::FileContents) -> Label {
    Label {
      custom_text_for_label: None,
      dimensions: dimensions,
      file_contents: file_contents,
      label_format: None,
      standard_id_for_label: None
    }
  }

  pub fn set_custom_text_for_label(&mut self, custom_text_for_label: ::models::CustomTextForLabel) {
    self.custom_text_for_label = Some(custom_text_for_label);
  }

  pub fn with_custom_text_for_label(mut self, custom_text_for_label: ::models::CustomTextForLabel) -> Label {
    self.custom_text_for_label = Some(custom_text_for_label);
    self
  }

  pub fn custom_text_for_label(&self) -> Option<&::models::CustomTextForLabel> {
    self.custom_text_for_label.as_ref()
  }

  pub fn reset_custom_text_for_label(&mut self) {
    self.custom_text_for_label = None;
  }

  pub fn set_dimensions(&mut self, dimensions: ::models::LabelDimensions) {
    self.dimensions = dimensions;
  }

  pub fn with_dimensions(mut self, dimensions: ::models::LabelDimensions) -> Label {
    self.dimensions = dimensions;
    self
  }

  pub fn dimensions(&self) -> &::models::LabelDimensions {
    &self.dimensions
  }


  pub fn set_file_contents(&mut self, file_contents: ::models::FileContents) {
    self.file_contents = file_contents;
  }

  pub fn with_file_contents(mut self, file_contents: ::models::FileContents) -> Label {
    self.file_contents = file_contents;
    self
  }

  pub fn file_contents(&self) -> &::models::FileContents {
    &self.file_contents
  }


  pub fn set_label_format(&mut self, label_format: ::models::LabelFormat) {
    self.label_format = Some(label_format);
  }

  pub fn with_label_format(mut self, label_format: ::models::LabelFormat) -> Label {
    self.label_format = Some(label_format);
    self
  }

  pub fn label_format(&self) -> Option<&::models::LabelFormat> {
    self.label_format.as_ref()
  }

  pub fn reset_label_format(&mut self) {
    self.label_format = None;
  }

  pub fn set_standard_id_for_label(&mut self, standard_id_for_label: ::models::StandardIdForLabel) {
    self.standard_id_for_label = Some(standard_id_for_label);
  }

  pub fn with_standard_id_for_label(mut self, standard_id_for_label: ::models::StandardIdForLabel) -> Label {
    self.standard_id_for_label = Some(standard_id_for_label);
    self
  }

  pub fn standard_id_for_label(&self) -> Option<&::models::StandardIdForLabel> {
    self.standard_id_for_label.as_ref()
  }

  pub fn reset_standard_id_for_label(&mut self) {
    self.standard_id_for_label = None;
  }

}



