/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ShippingService : A shipping service offer made by a carrier.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShippingService {
  /// A plain text representation of a carrier's shipping service. For example, \"UPS Ground\" or \"FedEx Standard Overnight\". 
  #[serde(rename = "ShippingServiceName")]
  shipping_service_name: String,
  /// The name of the carrier.
  #[serde(rename = "CarrierName")]
  carrier_name: String,
  #[serde(rename = "ShippingServiceId")]
  shipping_service_id: ::models::ShippingServiceIdentifier,
  /// An Amazon-defined shipping service offer identifier.
  #[serde(rename = "ShippingServiceOfferId")]
  shipping_service_offer_id: String,
  /// The date that the carrier will ship the package.
  #[serde(rename = "ShipDate")]
  ship_date: ::models::Timestamp,
  /// The earliest date by which the shipment will be delivered.
  #[serde(rename = "EarliestEstimatedDeliveryDate")]
  earliest_estimated_delivery_date: Option<::models::Timestamp>,
  /// The latest date by which the shipment will be delivered.
  #[serde(rename = "LatestEstimatedDeliveryDate")]
  latest_estimated_delivery_date: Option<::models::Timestamp>,
  /// The amount that the carrier will charge for the shipment.
  #[serde(rename = "Rate")]
  rate: ::models::CurrencyAmount,
  /// Extra services offered by the carrier.
  #[serde(rename = "ShippingServiceOptions")]
  shipping_service_options: ::models::ShippingServiceOptions,
  #[serde(rename = "AvailableShippingServiceOptions")]
  available_shipping_service_options: Option<::models::AvailableShippingServiceOptions>,
  #[serde(rename = "AvailableLabelFormats")]
  available_label_formats: Option<::models::LabelFormatList>,
  #[serde(rename = "AvailableFormatOptionsForLabel")]
  available_format_options_for_label: Option<::models::AvailableFormatOptionsForLabelList>,
  /// When true, additional seller inputs are required.
  #[serde(rename = "RequiresAdditionalSellerInputs")]
  requires_additional_seller_inputs: bool
}

impl ShippingService {
  /// A shipping service offer made by a carrier.
  pub fn new(shipping_service_name: String, carrier_name: String, shipping_service_id: ::models::ShippingServiceIdentifier, shipping_service_offer_id: String, ship_date: ::models::Timestamp, rate: ::models::CurrencyAmount, shipping_service_options: ::models::ShippingServiceOptions, requires_additional_seller_inputs: bool) -> ShippingService {
    ShippingService {
      shipping_service_name: shipping_service_name,
      carrier_name: carrier_name,
      shipping_service_id: shipping_service_id,
      shipping_service_offer_id: shipping_service_offer_id,
      ship_date: ship_date,
      earliest_estimated_delivery_date: None,
      latest_estimated_delivery_date: None,
      rate: rate,
      shipping_service_options: shipping_service_options,
      available_shipping_service_options: None,
      available_label_formats: None,
      available_format_options_for_label: None,
      requires_additional_seller_inputs: requires_additional_seller_inputs
    }
  }

  pub fn set_shipping_service_name(&mut self, shipping_service_name: String) {
    self.shipping_service_name = shipping_service_name;
  }

  pub fn with_shipping_service_name(mut self, shipping_service_name: String) -> ShippingService {
    self.shipping_service_name = shipping_service_name;
    self
  }

  pub fn shipping_service_name(&self) -> &String {
    &self.shipping_service_name
  }


  pub fn set_carrier_name(&mut self, carrier_name: String) {
    self.carrier_name = carrier_name;
  }

  pub fn with_carrier_name(mut self, carrier_name: String) -> ShippingService {
    self.carrier_name = carrier_name;
    self
  }

  pub fn carrier_name(&self) -> &String {
    &self.carrier_name
  }


  pub fn set_shipping_service_id(&mut self, shipping_service_id: ::models::ShippingServiceIdentifier) {
    self.shipping_service_id = shipping_service_id;
  }

  pub fn with_shipping_service_id(mut self, shipping_service_id: ::models::ShippingServiceIdentifier) -> ShippingService {
    self.shipping_service_id = shipping_service_id;
    self
  }

  pub fn shipping_service_id(&self) -> &::models::ShippingServiceIdentifier {
    &self.shipping_service_id
  }


  pub fn set_shipping_service_offer_id(&mut self, shipping_service_offer_id: String) {
    self.shipping_service_offer_id = shipping_service_offer_id;
  }

  pub fn with_shipping_service_offer_id(mut self, shipping_service_offer_id: String) -> ShippingService {
    self.shipping_service_offer_id = shipping_service_offer_id;
    self
  }

  pub fn shipping_service_offer_id(&self) -> &String {
    &self.shipping_service_offer_id
  }


  pub fn set_ship_date(&mut self, ship_date: ::models::Timestamp) {
    self.ship_date = ship_date;
  }

  pub fn with_ship_date(mut self, ship_date: ::models::Timestamp) -> ShippingService {
    self.ship_date = ship_date;
    self
  }

  pub fn ship_date(&self) -> &::models::Timestamp {
    &self.ship_date
  }


  pub fn set_earliest_estimated_delivery_date(&mut self, earliest_estimated_delivery_date: ::models::Timestamp) {
    self.earliest_estimated_delivery_date = Some(earliest_estimated_delivery_date);
  }

  pub fn with_earliest_estimated_delivery_date(mut self, earliest_estimated_delivery_date: ::models::Timestamp) -> ShippingService {
    self.earliest_estimated_delivery_date = Some(earliest_estimated_delivery_date);
    self
  }

  pub fn earliest_estimated_delivery_date(&self) -> Option<&::models::Timestamp> {
    self.earliest_estimated_delivery_date.as_ref()
  }

  pub fn reset_earliest_estimated_delivery_date(&mut self) {
    self.earliest_estimated_delivery_date = None;
  }

  pub fn set_latest_estimated_delivery_date(&mut self, latest_estimated_delivery_date: ::models::Timestamp) {
    self.latest_estimated_delivery_date = Some(latest_estimated_delivery_date);
  }

  pub fn with_latest_estimated_delivery_date(mut self, latest_estimated_delivery_date: ::models::Timestamp) -> ShippingService {
    self.latest_estimated_delivery_date = Some(latest_estimated_delivery_date);
    self
  }

  pub fn latest_estimated_delivery_date(&self) -> Option<&::models::Timestamp> {
    self.latest_estimated_delivery_date.as_ref()
  }

  pub fn reset_latest_estimated_delivery_date(&mut self) {
    self.latest_estimated_delivery_date = None;
  }

  pub fn set_rate(&mut self, rate: ::models::CurrencyAmount) {
    self.rate = rate;
  }

  pub fn with_rate(mut self, rate: ::models::CurrencyAmount) -> ShippingService {
    self.rate = rate;
    self
  }

  pub fn rate(&self) -> &::models::CurrencyAmount {
    &self.rate
  }


  pub fn set_shipping_service_options(&mut self, shipping_service_options: ::models::ShippingServiceOptions) {
    self.shipping_service_options = shipping_service_options;
  }

  pub fn with_shipping_service_options(mut self, shipping_service_options: ::models::ShippingServiceOptions) -> ShippingService {
    self.shipping_service_options = shipping_service_options;
    self
  }

  pub fn shipping_service_options(&self) -> &::models::ShippingServiceOptions {
    &self.shipping_service_options
  }


  pub fn set_available_shipping_service_options(&mut self, available_shipping_service_options: ::models::AvailableShippingServiceOptions) {
    self.available_shipping_service_options = Some(available_shipping_service_options);
  }

  pub fn with_available_shipping_service_options(mut self, available_shipping_service_options: ::models::AvailableShippingServiceOptions) -> ShippingService {
    self.available_shipping_service_options = Some(available_shipping_service_options);
    self
  }

  pub fn available_shipping_service_options(&self) -> Option<&::models::AvailableShippingServiceOptions> {
    self.available_shipping_service_options.as_ref()
  }

  pub fn reset_available_shipping_service_options(&mut self) {
    self.available_shipping_service_options = None;
  }

  pub fn set_available_label_formats(&mut self, available_label_formats: ::models::LabelFormatList) {
    self.available_label_formats = Some(available_label_formats);
  }

  pub fn with_available_label_formats(mut self, available_label_formats: ::models::LabelFormatList) -> ShippingService {
    self.available_label_formats = Some(available_label_formats);
    self
  }

  pub fn available_label_formats(&self) -> Option<&::models::LabelFormatList> {
    self.available_label_formats.as_ref()
  }

  pub fn reset_available_label_formats(&mut self) {
    self.available_label_formats = None;
  }

  pub fn set_available_format_options_for_label(&mut self, available_format_options_for_label: ::models::AvailableFormatOptionsForLabelList) {
    self.available_format_options_for_label = Some(available_format_options_for_label);
  }

  pub fn with_available_format_options_for_label(mut self, available_format_options_for_label: ::models::AvailableFormatOptionsForLabelList) -> ShippingService {
    self.available_format_options_for_label = Some(available_format_options_for_label);
    self
  }

  pub fn available_format_options_for_label(&self) -> Option<&::models::AvailableFormatOptionsForLabelList> {
    self.available_format_options_for_label.as_ref()
  }

  pub fn reset_available_format_options_for_label(&mut self) {
    self.available_format_options_for_label = None;
  }

  pub fn set_requires_additional_seller_inputs(&mut self, requires_additional_seller_inputs: bool) {
    self.requires_additional_seller_inputs = requires_additional_seller_inputs;
  }

  pub fn with_requires_additional_seller_inputs(mut self, requires_additional_seller_inputs: bool) -> ShippingService {
    self.requires_additional_seller_inputs = requires_additional_seller_inputs;
    self
  }

  pub fn requires_additional_seller_inputs(&self) -> &bool {
    &self.requires_additional_seller_inputs
  }


}



