/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// AvailableCarrierWillPickUpOption : Indicates whether the carrier will pick up the package, and what fee is charged, if any.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct AvailableCarrierWillPickUpOption {
  #[serde(rename = "CarrierWillPickUpOption")]
  carrier_will_pick_up_option: ::models::CarrierWillPickUpOption,
  /// The fee charged.
  #[serde(rename = "Charge")]
  charge: ::models::CurrencyAmount
}

impl AvailableCarrierWillPickUpOption {
  /// Indicates whether the carrier will pick up the package, and what fee is charged, if any.
  pub fn new(carrier_will_pick_up_option: ::models::CarrierWillPickUpOption, charge: ::models::CurrencyAmount) -> AvailableCarrierWillPickUpOption {
    AvailableCarrierWillPickUpOption {
      carrier_will_pick_up_option: carrier_will_pick_up_option,
      charge: charge
    }
  }

  pub fn set_carrier_will_pick_up_option(&mut self, carrier_will_pick_up_option: ::models::CarrierWillPickUpOption) {
    self.carrier_will_pick_up_option = carrier_will_pick_up_option;
  }

  pub fn with_carrier_will_pick_up_option(mut self, carrier_will_pick_up_option: ::models::CarrierWillPickUpOption) -> AvailableCarrierWillPickUpOption {
    self.carrier_will_pick_up_option = carrier_will_pick_up_option;
    self
  }

  pub fn carrier_will_pick_up_option(&self) -> &::models::CarrierWillPickUpOption {
    &self.carrier_will_pick_up_option
  }


  pub fn set_charge(&mut self, charge: ::models::CurrencyAmount) {
    self.charge = charge;
  }

  pub fn with_charge(mut self, charge: ::models::CurrencyAmount) -> AvailableCarrierWillPickUpOption {
    self.charge = charge;
    self
  }

  pub fn charge(&self) -> &::models::CurrencyAmount {
    &self.charge
  }


}



