/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ShipmentRequestDetails : Shipment information required for requesting shipping service offers or for creating a shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShipmentRequestDetails {
  /// An Amazon-defined order identifier in 3-7-7 format.
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: ::models::AmazonOrderId,
  /// A seller-defined order identifier.
  #[serde(rename = "SellerOrderId")]
  seller_order_id: Option<::models::SellerOrderId>,
  #[serde(rename = "ItemList")]
  item_list: ::models::ItemList,
  /// The address of the sender.
  #[serde(rename = "ShipFromAddress")]
  ship_from_address: ::models::Address,
  /// The package dimensions.
  #[serde(rename = "PackageDimensions")]
  package_dimensions: ::models::PackageDimensions,
  /// The package weight.
  #[serde(rename = "Weight")]
  weight: ::models::Weight,
  /// The date by which the package must arrive to keep the promise to the customer, in ISO 8601 datetime format. If MustArriveByDate is specified, only shipping service offers that can be delivered by that date are returned.
  #[serde(rename = "MustArriveByDate")]
  must_arrive_by_date: Option<::models::Timestamp>,
  /// When used in a request, this is the date and time that the seller wants to ship the package. When used in a response, this is the date and time that the package can be shipped by the indicated method.
  #[serde(rename = "ShipDate")]
  ship_date: Option<::models::Timestamp>,
  /// Extra services offered by the carrier.
  #[serde(rename = "ShippingServiceOptions")]
  shipping_service_options: ::models::ShippingServiceOptions,
  /// Label customization options.
  #[serde(rename = "LabelCustomization")]
  label_customization: Option<::models::LabelCustomization>
}

impl ShipmentRequestDetails {
  /// Shipment information required for requesting shipping service offers or for creating a shipment.
  pub fn new(amazon_order_id: ::models::AmazonOrderId, item_list: ::models::ItemList, ship_from_address: ::models::Address, package_dimensions: ::models::PackageDimensions, weight: ::models::Weight, shipping_service_options: ::models::ShippingServiceOptions) -> ShipmentRequestDetails {
    ShipmentRequestDetails {
      amazon_order_id: amazon_order_id,
      seller_order_id: None,
      item_list: item_list,
      ship_from_address: ship_from_address,
      package_dimensions: package_dimensions,
      weight: weight,
      must_arrive_by_date: None,
      ship_date: None,
      shipping_service_options: shipping_service_options,
      label_customization: None
    }
  }

  pub fn set_amazon_order_id(&mut self, amazon_order_id: ::models::AmazonOrderId) {
    self.amazon_order_id = amazon_order_id;
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: ::models::AmazonOrderId) -> ShipmentRequestDetails {
    self.amazon_order_id = amazon_order_id;
    self
  }

  pub fn amazon_order_id(&self) -> &::models::AmazonOrderId {
    &self.amazon_order_id
  }


  pub fn set_seller_order_id(&mut self, seller_order_id: ::models::SellerOrderId) {
    self.seller_order_id = Some(seller_order_id);
  }

  pub fn with_seller_order_id(mut self, seller_order_id: ::models::SellerOrderId) -> ShipmentRequestDetails {
    self.seller_order_id = Some(seller_order_id);
    self
  }

  pub fn seller_order_id(&self) -> Option<&::models::SellerOrderId> {
    self.seller_order_id.as_ref()
  }

  pub fn reset_seller_order_id(&mut self) {
    self.seller_order_id = None;
  }

  pub fn set_item_list(&mut self, item_list: ::models::ItemList) {
    self.item_list = item_list;
  }

  pub fn with_item_list(mut self, item_list: ::models::ItemList) -> ShipmentRequestDetails {
    self.item_list = item_list;
    self
  }

  pub fn item_list(&self) -> &::models::ItemList {
    &self.item_list
  }


  pub fn set_ship_from_address(&mut self, ship_from_address: ::models::Address) {
    self.ship_from_address = ship_from_address;
  }

  pub fn with_ship_from_address(mut self, ship_from_address: ::models::Address) -> ShipmentRequestDetails {
    self.ship_from_address = ship_from_address;
    self
  }

  pub fn ship_from_address(&self) -> &::models::Address {
    &self.ship_from_address
  }


  pub fn set_package_dimensions(&mut self, package_dimensions: ::models::PackageDimensions) {
    self.package_dimensions = package_dimensions;
  }

  pub fn with_package_dimensions(mut self, package_dimensions: ::models::PackageDimensions) -> ShipmentRequestDetails {
    self.package_dimensions = package_dimensions;
    self
  }

  pub fn package_dimensions(&self) -> &::models::PackageDimensions {
    &self.package_dimensions
  }


  pub fn set_weight(&mut self, weight: ::models::Weight) {
    self.weight = weight;
  }

  pub fn with_weight(mut self, weight: ::models::Weight) -> ShipmentRequestDetails {
    self.weight = weight;
    self
  }

  pub fn weight(&self) -> &::models::Weight {
    &self.weight
  }


  pub fn set_must_arrive_by_date(&mut self, must_arrive_by_date: ::models::Timestamp) {
    self.must_arrive_by_date = Some(must_arrive_by_date);
  }

  pub fn with_must_arrive_by_date(mut self, must_arrive_by_date: ::models::Timestamp) -> ShipmentRequestDetails {
    self.must_arrive_by_date = Some(must_arrive_by_date);
    self
  }

  pub fn must_arrive_by_date(&self) -> Option<&::models::Timestamp> {
    self.must_arrive_by_date.as_ref()
  }

  pub fn reset_must_arrive_by_date(&mut self) {
    self.must_arrive_by_date = None;
  }

  pub fn set_ship_date(&mut self, ship_date: ::models::Timestamp) {
    self.ship_date = Some(ship_date);
  }

  pub fn with_ship_date(mut self, ship_date: ::models::Timestamp) -> ShipmentRequestDetails {
    self.ship_date = Some(ship_date);
    self
  }

  pub fn ship_date(&self) -> Option<&::models::Timestamp> {
    self.ship_date.as_ref()
  }

  pub fn reset_ship_date(&mut self) {
    self.ship_date = None;
  }

  pub fn set_shipping_service_options(&mut self, shipping_service_options: ::models::ShippingServiceOptions) {
    self.shipping_service_options = shipping_service_options;
  }

  pub fn with_shipping_service_options(mut self, shipping_service_options: ::models::ShippingServiceOptions) -> ShipmentRequestDetails {
    self.shipping_service_options = shipping_service_options;
    self
  }

  pub fn shipping_service_options(&self) -> &::models::ShippingServiceOptions {
    &self.shipping_service_options
  }


  pub fn set_label_customization(&mut self, label_customization: ::models::LabelCustomization) {
    self.label_customization = Some(label_customization);
  }

  pub fn with_label_customization(mut self, label_customization: ::models::LabelCustomization) -> ShipmentRequestDetails {
    self.label_customization = Some(label_customization);
    self
  }

  pub fn label_customization(&self) -> Option<&::models::LabelCustomization> {
    self.label_customization.as_ref()
  }

  pub fn reset_label_customization(&mut self) {
    self.label_customization = None;
  }

}



