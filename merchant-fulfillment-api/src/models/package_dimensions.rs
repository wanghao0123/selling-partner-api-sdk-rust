/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PackageDimensions : The dimensions of a package contained in a shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PackageDimensions {
  /// The length dimension. If you don't specify PredefinedPackageDimensions, you must specify the Length.
  #[serde(rename = "Length")]
  length: Option<::models::PackageDimension>,
  /// The width dimension. If you don't specify PredefinedPackageDimensions, you must specify the Width.
  #[serde(rename = "Width")]
  width: Option<::models::PackageDimension>,
  /// The height dimension. If you don't specify PredefinedPackageDimensions, you must specify the Height.
  #[serde(rename = "Height")]
  height: Option<::models::PackageDimension>,
  /// The unit of measurement. If you don't specify PredefinedPackageDimensions, you must specify the Unit.
  #[serde(rename = "Unit")]
  unit: Option<::models::UnitOfLength>,
  #[serde(rename = "PredefinedPackageDimensions")]
  predefined_package_dimensions: Option<::models::PredefinedPackageDimensions>
}

impl PackageDimensions {
  /// The dimensions of a package contained in a shipment.
  pub fn new() -> PackageDimensions {
    PackageDimensions {
      length: None,
      width: None,
      height: None,
      unit: None,
      predefined_package_dimensions: None
    }
  }

  pub fn set_length(&mut self, length: ::models::PackageDimension) {
    self.length = Some(length);
  }

  pub fn with_length(mut self, length: ::models::PackageDimension) -> PackageDimensions {
    self.length = Some(length);
    self
  }

  pub fn length(&self) -> Option<&::models::PackageDimension> {
    self.length.as_ref()
  }

  pub fn reset_length(&mut self) {
    self.length = None;
  }

  pub fn set_width(&mut self, width: ::models::PackageDimension) {
    self.width = Some(width);
  }

  pub fn with_width(mut self, width: ::models::PackageDimension) -> PackageDimensions {
    self.width = Some(width);
    self
  }

  pub fn width(&self) -> Option<&::models::PackageDimension> {
    self.width.as_ref()
  }

  pub fn reset_width(&mut self) {
    self.width = None;
  }

  pub fn set_height(&mut self, height: ::models::PackageDimension) {
    self.height = Some(height);
  }

  pub fn with_height(mut self, height: ::models::PackageDimension) -> PackageDimensions {
    self.height = Some(height);
    self
  }

  pub fn height(&self) -> Option<&::models::PackageDimension> {
    self.height.as_ref()
  }

  pub fn reset_height(&mut self) {
    self.height = None;
  }

  pub fn set_unit(&mut self, unit: ::models::UnitOfLength) {
    self.unit = Some(unit);
  }

  pub fn with_unit(mut self, unit: ::models::UnitOfLength) -> PackageDimensions {
    self.unit = Some(unit);
    self
  }

  pub fn unit(&self) -> Option<&::models::UnitOfLength> {
    self.unit.as_ref()
  }

  pub fn reset_unit(&mut self) {
    self.unit = None;
  }

  pub fn set_predefined_package_dimensions(&mut self, predefined_package_dimensions: ::models::PredefinedPackageDimensions) {
    self.predefined_package_dimensions = Some(predefined_package_dimensions);
  }

  pub fn with_predefined_package_dimensions(mut self, predefined_package_dimensions: ::models::PredefinedPackageDimensions) -> PackageDimensions {
    self.predefined_package_dimensions = Some(predefined_package_dimensions);
    self
  }

  pub fn predefined_package_dimensions(&self) -> Option<&::models::PredefinedPackageDimensions> {
    self.predefined_package_dimensions.as_ref()
  }

  pub fn reset_predefined_package_dimensions(&mut self) {
    self.predefined_package_dimensions = None;
  }

}



