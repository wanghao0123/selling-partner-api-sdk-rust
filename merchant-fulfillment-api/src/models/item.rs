/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Item : An Amazon order item identifier and a quantity.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Item {
  #[serde(rename = "OrderItemId")]
  order_item_id: ::models::OrderItemId,
  #[serde(rename = "Quantity")]
  quantity: ::models::ItemQuantity,
  #[serde(rename = "ItemWeight")]
  item_weight: Option<::models::Weight>,
  #[serde(rename = "ItemDescription")]
  item_description: Option<::models::ItemDescription>,
  #[serde(rename = "TransparencyCodeList")]
  transparency_code_list: Option<::models::TransparencyCodeList>,
  /// A list of additional seller inputs required to ship this item using the chosen shipping service.
  #[serde(rename = "ItemLevelSellerInputsList")]
  item_level_seller_inputs_list: Option<::models::AdditionalSellerInputsList>
}

impl Item {
  /// An Amazon order item identifier and a quantity.
  pub fn new(order_item_id: ::models::OrderItemId, quantity: ::models::ItemQuantity) -> Item {
    Item {
      order_item_id: order_item_id,
      quantity: quantity,
      item_weight: None,
      item_description: None,
      transparency_code_list: None,
      item_level_seller_inputs_list: None
    }
  }

  pub fn set_order_item_id(&mut self, order_item_id: ::models::OrderItemId) {
    self.order_item_id = order_item_id;
  }

  pub fn with_order_item_id(mut self, order_item_id: ::models::OrderItemId) -> Item {
    self.order_item_id = order_item_id;
    self
  }

  pub fn order_item_id(&self) -> &::models::OrderItemId {
    &self.order_item_id
  }


  pub fn set_quantity(&mut self, quantity: ::models::ItemQuantity) {
    self.quantity = quantity;
  }

  pub fn with_quantity(mut self, quantity: ::models::ItemQuantity) -> Item {
    self.quantity = quantity;
    self
  }

  pub fn quantity(&self) -> &::models::ItemQuantity {
    &self.quantity
  }


  pub fn set_item_weight(&mut self, item_weight: ::models::Weight) {
    self.item_weight = Some(item_weight);
  }

  pub fn with_item_weight(mut self, item_weight: ::models::Weight) -> Item {
    self.item_weight = Some(item_weight);
    self
  }

  pub fn item_weight(&self) -> Option<&::models::Weight> {
    self.item_weight.as_ref()
  }

  pub fn reset_item_weight(&mut self) {
    self.item_weight = None;
  }

  pub fn set_item_description(&mut self, item_description: ::models::ItemDescription) {
    self.item_description = Some(item_description);
  }

  pub fn with_item_description(mut self, item_description: ::models::ItemDescription) -> Item {
    self.item_description = Some(item_description);
    self
  }

  pub fn item_description(&self) -> Option<&::models::ItemDescription> {
    self.item_description.as_ref()
  }

  pub fn reset_item_description(&mut self) {
    self.item_description = None;
  }

  pub fn set_transparency_code_list(&mut self, transparency_code_list: ::models::TransparencyCodeList) {
    self.transparency_code_list = Some(transparency_code_list);
  }

  pub fn with_transparency_code_list(mut self, transparency_code_list: ::models::TransparencyCodeList) -> Item {
    self.transparency_code_list = Some(transparency_code_list);
    self
  }

  pub fn transparency_code_list(&self) -> Option<&::models::TransparencyCodeList> {
    self.transparency_code_list.as_ref()
  }

  pub fn reset_transparency_code_list(&mut self) {
    self.transparency_code_list = None;
  }

  pub fn set_item_level_seller_inputs_list(&mut self, item_level_seller_inputs_list: ::models::AdditionalSellerInputsList) {
    self.item_level_seller_inputs_list = Some(item_level_seller_inputs_list);
  }

  pub fn with_item_level_seller_inputs_list(mut self, item_level_seller_inputs_list: ::models::AdditionalSellerInputsList) -> Item {
    self.item_level_seller_inputs_list = Some(item_level_seller_inputs_list);
    self
  }

  pub fn item_level_seller_inputs_list(&self) -> Option<&::models::AdditionalSellerInputsList> {
    self.item_level_seller_inputs_list.as_ref()
  }

  pub fn reset_item_level_seller_inputs_list(&mut self) {
    self.item_level_seller_inputs_list = None;
  }

}



