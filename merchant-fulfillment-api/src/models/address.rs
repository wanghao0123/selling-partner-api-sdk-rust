/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Address : The postal address information.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Address {
  #[serde(rename = "Name")]
  name: ::models::AddressName,
  #[serde(rename = "AddressLine1")]
  address_line1: ::models::AddressLine1,
  #[serde(rename = "AddressLine2")]
  address_line2: Option<::models::AddressLine2>,
  #[serde(rename = "AddressLine3")]
  address_line3: Option<::models::AddressLine3>,
  #[serde(rename = "DistrictOrCounty")]
  district_or_county: Option<::models::DistrictOrCounty>,
  #[serde(rename = "Email")]
  email: ::models::EmailAddress,
  #[serde(rename = "City")]
  city: ::models::City,
  #[serde(rename = "StateOrProvinceCode")]
  state_or_province_code: Option<::models::StateOrProvinceCode>,
  #[serde(rename = "PostalCode")]
  postal_code: ::models::PostalCode,
  #[serde(rename = "CountryCode")]
  country_code: ::models::CountryCode,
  #[serde(rename = "Phone")]
  phone: ::models::PhoneNumber
}

impl Address {
  /// The postal address information.
  pub fn new(name: ::models::AddressName, address_line1: ::models::AddressLine1, email: ::models::EmailAddress, city: ::models::City, postal_code: ::models::PostalCode, country_code: ::models::CountryCode, phone: ::models::PhoneNumber) -> Address {
    Address {
      name: name,
      address_line1: address_line1,
      address_line2: None,
      address_line3: None,
      district_or_county: None,
      email: email,
      city: city,
      state_or_province_code: None,
      postal_code: postal_code,
      country_code: country_code,
      phone: phone
    }
  }

  pub fn set_name(&mut self, name: ::models::AddressName) {
    self.name = name;
  }

  pub fn with_name(mut self, name: ::models::AddressName) -> Address {
    self.name = name;
    self
  }

  pub fn name(&self) -> &::models::AddressName {
    &self.name
  }


  pub fn set_address_line1(&mut self, address_line1: ::models::AddressLine1) {
    self.address_line1 = address_line1;
  }

  pub fn with_address_line1(mut self, address_line1: ::models::AddressLine1) -> Address {
    self.address_line1 = address_line1;
    self
  }

  pub fn address_line1(&self) -> &::models::AddressLine1 {
    &self.address_line1
  }


  pub fn set_address_line2(&mut self, address_line2: ::models::AddressLine2) {
    self.address_line2 = Some(address_line2);
  }

  pub fn with_address_line2(mut self, address_line2: ::models::AddressLine2) -> Address {
    self.address_line2 = Some(address_line2);
    self
  }

  pub fn address_line2(&self) -> Option<&::models::AddressLine2> {
    self.address_line2.as_ref()
  }

  pub fn reset_address_line2(&mut self) {
    self.address_line2 = None;
  }

  pub fn set_address_line3(&mut self, address_line3: ::models::AddressLine3) {
    self.address_line3 = Some(address_line3);
  }

  pub fn with_address_line3(mut self, address_line3: ::models::AddressLine3) -> Address {
    self.address_line3 = Some(address_line3);
    self
  }

  pub fn address_line3(&self) -> Option<&::models::AddressLine3> {
    self.address_line3.as_ref()
  }

  pub fn reset_address_line3(&mut self) {
    self.address_line3 = None;
  }

  pub fn set_district_or_county(&mut self, district_or_county: ::models::DistrictOrCounty) {
    self.district_or_county = Some(district_or_county);
  }

  pub fn with_district_or_county(mut self, district_or_county: ::models::DistrictOrCounty) -> Address {
    self.district_or_county = Some(district_or_county);
    self
  }

  pub fn district_or_county(&self) -> Option<&::models::DistrictOrCounty> {
    self.district_or_county.as_ref()
  }

  pub fn reset_district_or_county(&mut self) {
    self.district_or_county = None;
  }

  pub fn set_email(&mut self, email: ::models::EmailAddress) {
    self.email = email;
  }

  pub fn with_email(mut self, email: ::models::EmailAddress) -> Address {
    self.email = email;
    self
  }

  pub fn email(&self) -> &::models::EmailAddress {
    &self.email
  }


  pub fn set_city(&mut self, city: ::models::City) {
    self.city = city;
  }

  pub fn with_city(mut self, city: ::models::City) -> Address {
    self.city = city;
    self
  }

  pub fn city(&self) -> &::models::City {
    &self.city
  }


  pub fn set_state_or_province_code(&mut self, state_or_province_code: ::models::StateOrProvinceCode) {
    self.state_or_province_code = Some(state_or_province_code);
  }

  pub fn with_state_or_province_code(mut self, state_or_province_code: ::models::StateOrProvinceCode) -> Address {
    self.state_or_province_code = Some(state_or_province_code);
    self
  }

  pub fn state_or_province_code(&self) -> Option<&::models::StateOrProvinceCode> {
    self.state_or_province_code.as_ref()
  }

  pub fn reset_state_or_province_code(&mut self) {
    self.state_or_province_code = None;
  }

  pub fn set_postal_code(&mut self, postal_code: ::models::PostalCode) {
    self.postal_code = postal_code;
  }

  pub fn with_postal_code(mut self, postal_code: ::models::PostalCode) -> Address {
    self.postal_code = postal_code;
    self
  }

  pub fn postal_code(&self) -> &::models::PostalCode {
    &self.postal_code
  }


  pub fn set_country_code(&mut self, country_code: ::models::CountryCode) {
    self.country_code = country_code;
  }

  pub fn with_country_code(mut self, country_code: ::models::CountryCode) -> Address {
    self.country_code = country_code;
    self
  }

  pub fn country_code(&self) -> &::models::CountryCode {
    &self.country_code
  }


  pub fn set_phone(&mut self, phone: ::models::PhoneNumber) {
    self.phone = phone;
  }

  pub fn with_phone(mut self, phone: ::models::PhoneNumber) -> Address {
    self.phone = phone;
    self
  }

  pub fn phone(&self) -> &::models::PhoneNumber {
    &self.phone
  }


}



