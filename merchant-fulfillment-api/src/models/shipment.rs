/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Shipment : The details of a shipment, including the shipment status.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Shipment {
  #[serde(rename = "ShipmentId")]
  shipment_id: ::models::ShipmentId,
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: ::models::AmazonOrderId,
  #[serde(rename = "SellerOrderId")]
  seller_order_id: Option<::models::SellerOrderId>,
  #[serde(rename = "ItemList")]
  item_list: ::models::ItemList,
  /// The address of the sender.
  #[serde(rename = "ShipFromAddress")]
  ship_from_address: ::models::Address,
  /// The destination address for the shipment.
  #[serde(rename = "ShipToAddress")]
  ship_to_address: ::models::Address,
  #[serde(rename = "PackageDimensions")]
  package_dimensions: ::models::PackageDimensions,
  /// The package weight.
  #[serde(rename = "Weight")]
  weight: ::models::Weight,
  /// If DeclaredValue was specified in a previous call to the createShipment operation, then Insurance indicates the amount that the carrier will use to insure the shipment. If DeclaredValue was not specified with a previous call to the createShipment operation, then the shipment will be insured for the carrier's minimum insurance amount, or the combined sale prices that the items are listed for in the shipment, whichever is less.
  #[serde(rename = "Insurance")]
  insurance: ::models::CurrencyAmount,
  #[serde(rename = "ShippingService")]
  shipping_service: ::models::ShippingService,
  /// Data for creating a shipping label and dimensions for printing the label. If the shipment is canceled, an empty Label is returned.
  #[serde(rename = "Label")]
  label: ::models::Label,
  /// The shipment status.
  #[serde(rename = "Status")]
  status: ::models::ShipmentStatus,
  #[serde(rename = "TrackingId")]
  tracking_id: Option<::models::TrackingId>,
  /// The date and time the shipment was created.
  #[serde(rename = "CreatedDate")]
  created_date: ::models::Timestamp,
  /// The date and time of the last update.
  #[serde(rename = "LastUpdatedDate")]
  last_updated_date: Option<::models::Timestamp>
}

impl Shipment {
  /// The details of a shipment, including the shipment status.
  pub fn new(shipment_id: ::models::ShipmentId, amazon_order_id: ::models::AmazonOrderId, item_list: ::models::ItemList, ship_from_address: ::models::Address, ship_to_address: ::models::Address, package_dimensions: ::models::PackageDimensions, weight: ::models::Weight, insurance: ::models::CurrencyAmount, shipping_service: ::models::ShippingService, label: ::models::Label, status: ::models::ShipmentStatus, created_date: ::models::Timestamp) -> Shipment {
    Shipment {
      shipment_id: shipment_id,
      amazon_order_id: amazon_order_id,
      seller_order_id: None,
      item_list: item_list,
      ship_from_address: ship_from_address,
      ship_to_address: ship_to_address,
      package_dimensions: package_dimensions,
      weight: weight,
      insurance: insurance,
      shipping_service: shipping_service,
      label: label,
      status: status,
      tracking_id: None,
      created_date: created_date,
      last_updated_date: None
    }
  }

  pub fn set_shipment_id(&mut self, shipment_id: ::models::ShipmentId) {
    self.shipment_id = shipment_id;
  }

  pub fn with_shipment_id(mut self, shipment_id: ::models::ShipmentId) -> Shipment {
    self.shipment_id = shipment_id;
    self
  }

  pub fn shipment_id(&self) -> &::models::ShipmentId {
    &self.shipment_id
  }


  pub fn set_amazon_order_id(&mut self, amazon_order_id: ::models::AmazonOrderId) {
    self.amazon_order_id = amazon_order_id;
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: ::models::AmazonOrderId) -> Shipment {
    self.amazon_order_id = amazon_order_id;
    self
  }

  pub fn amazon_order_id(&self) -> &::models::AmazonOrderId {
    &self.amazon_order_id
  }


  pub fn set_seller_order_id(&mut self, seller_order_id: ::models::SellerOrderId) {
    self.seller_order_id = Some(seller_order_id);
  }

  pub fn with_seller_order_id(mut self, seller_order_id: ::models::SellerOrderId) -> Shipment {
    self.seller_order_id = Some(seller_order_id);
    self
  }

  pub fn seller_order_id(&self) -> Option<&::models::SellerOrderId> {
    self.seller_order_id.as_ref()
  }

  pub fn reset_seller_order_id(&mut self) {
    self.seller_order_id = None;
  }

  pub fn set_item_list(&mut self, item_list: ::models::ItemList) {
    self.item_list = item_list;
  }

  pub fn with_item_list(mut self, item_list: ::models::ItemList) -> Shipment {
    self.item_list = item_list;
    self
  }

  pub fn item_list(&self) -> &::models::ItemList {
    &self.item_list
  }


  pub fn set_ship_from_address(&mut self, ship_from_address: ::models::Address) {
    self.ship_from_address = ship_from_address;
  }

  pub fn with_ship_from_address(mut self, ship_from_address: ::models::Address) -> Shipment {
    self.ship_from_address = ship_from_address;
    self
  }

  pub fn ship_from_address(&self) -> &::models::Address {
    &self.ship_from_address
  }


  pub fn set_ship_to_address(&mut self, ship_to_address: ::models::Address) {
    self.ship_to_address = ship_to_address;
  }

  pub fn with_ship_to_address(mut self, ship_to_address: ::models::Address) -> Shipment {
    self.ship_to_address = ship_to_address;
    self
  }

  pub fn ship_to_address(&self) -> &::models::Address {
    &self.ship_to_address
  }


  pub fn set_package_dimensions(&mut self, package_dimensions: ::models::PackageDimensions) {
    self.package_dimensions = package_dimensions;
  }

  pub fn with_package_dimensions(mut self, package_dimensions: ::models::PackageDimensions) -> Shipment {
    self.package_dimensions = package_dimensions;
    self
  }

  pub fn package_dimensions(&self) -> &::models::PackageDimensions {
    &self.package_dimensions
  }


  pub fn set_weight(&mut self, weight: ::models::Weight) {
    self.weight = weight;
  }

  pub fn with_weight(mut self, weight: ::models::Weight) -> Shipment {
    self.weight = weight;
    self
  }

  pub fn weight(&self) -> &::models::Weight {
    &self.weight
  }


  pub fn set_insurance(&mut self, insurance: ::models::CurrencyAmount) {
    self.insurance = insurance;
  }

  pub fn with_insurance(mut self, insurance: ::models::CurrencyAmount) -> Shipment {
    self.insurance = insurance;
    self
  }

  pub fn insurance(&self) -> &::models::CurrencyAmount {
    &self.insurance
  }


  pub fn set_shipping_service(&mut self, shipping_service: ::models::ShippingService) {
    self.shipping_service = shipping_service;
  }

  pub fn with_shipping_service(mut self, shipping_service: ::models::ShippingService) -> Shipment {
    self.shipping_service = shipping_service;
    self
  }

  pub fn shipping_service(&self) -> &::models::ShippingService {
    &self.shipping_service
  }


  pub fn set_label(&mut self, label: ::models::Label) {
    self.label = label;
  }

  pub fn with_label(mut self, label: ::models::Label) -> Shipment {
    self.label = label;
    self
  }

  pub fn label(&self) -> &::models::Label {
    &self.label
  }


  pub fn set_status(&mut self, status: ::models::ShipmentStatus) {
    self.status = status;
  }

  pub fn with_status(mut self, status: ::models::ShipmentStatus) -> Shipment {
    self.status = status;
    self
  }

  pub fn status(&self) -> &::models::ShipmentStatus {
    &self.status
  }


  pub fn set_tracking_id(&mut self, tracking_id: ::models::TrackingId) {
    self.tracking_id = Some(tracking_id);
  }

  pub fn with_tracking_id(mut self, tracking_id: ::models::TrackingId) -> Shipment {
    self.tracking_id = Some(tracking_id);
    self
  }

  pub fn tracking_id(&self) -> Option<&::models::TrackingId> {
    self.tracking_id.as_ref()
  }

  pub fn reset_tracking_id(&mut self) {
    self.tracking_id = None;
  }

  pub fn set_created_date(&mut self, created_date: ::models::Timestamp) {
    self.created_date = created_date;
  }

  pub fn with_created_date(mut self, created_date: ::models::Timestamp) -> Shipment {
    self.created_date = created_date;
    self
  }

  pub fn created_date(&self) -> &::models::Timestamp {
    &self.created_date
  }


  pub fn set_last_updated_date(&mut self, last_updated_date: ::models::Timestamp) {
    self.last_updated_date = Some(last_updated_date);
  }

  pub fn with_last_updated_date(mut self, last_updated_date: ::models::Timestamp) -> Shipment {
    self.last_updated_date = Some(last_updated_date);
    self
  }

  pub fn last_updated_date(&self) -> Option<&::models::Timestamp> {
    self.last_updated_date.as_ref()
  }

  pub fn reset_last_updated_date(&mut self) {
    self.last_updated_date = None;
  }

}



