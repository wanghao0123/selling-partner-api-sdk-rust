/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ShippingOfferingFilter : Filter for use when requesting eligible shipping services.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShippingOfferingFilter {
  /// When true, include a packing slip with the label.
  #[serde(rename = "IncludePackingSlipWithLabel")]
  include_packing_slip_with_label: Option<bool>,
  /// When true, include complex shipping options.
  #[serde(rename = "IncludeComplexShippingOptions")]
  include_complex_shipping_options: Option<bool>,
  #[serde(rename = "CarrierWillPickUp")]
  carrier_will_pick_up: Option<::models::CarrierWillPickUpOption>,
  #[serde(rename = "DeliveryExperience")]
  delivery_experience: Option<::models::DeliveryExperienceOption>
}

impl ShippingOfferingFilter {
  /// Filter for use when requesting eligible shipping services.
  pub fn new() -> ShippingOfferingFilter {
    ShippingOfferingFilter {
      include_packing_slip_with_label: None,
      include_complex_shipping_options: None,
      carrier_will_pick_up: None,
      delivery_experience: None
    }
  }

  pub fn set_include_packing_slip_with_label(&mut self, include_packing_slip_with_label: bool) {
    self.include_packing_slip_with_label = Some(include_packing_slip_with_label);
  }

  pub fn with_include_packing_slip_with_label(mut self, include_packing_slip_with_label: bool) -> ShippingOfferingFilter {
    self.include_packing_slip_with_label = Some(include_packing_slip_with_label);
    self
  }

  pub fn include_packing_slip_with_label(&self) -> Option<&bool> {
    self.include_packing_slip_with_label.as_ref()
  }

  pub fn reset_include_packing_slip_with_label(&mut self) {
    self.include_packing_slip_with_label = None;
  }

  pub fn set_include_complex_shipping_options(&mut self, include_complex_shipping_options: bool) {
    self.include_complex_shipping_options = Some(include_complex_shipping_options);
  }

  pub fn with_include_complex_shipping_options(mut self, include_complex_shipping_options: bool) -> ShippingOfferingFilter {
    self.include_complex_shipping_options = Some(include_complex_shipping_options);
    self
  }

  pub fn include_complex_shipping_options(&self) -> Option<&bool> {
    self.include_complex_shipping_options.as_ref()
  }

  pub fn reset_include_complex_shipping_options(&mut self) {
    self.include_complex_shipping_options = None;
  }

  pub fn set_carrier_will_pick_up(&mut self, carrier_will_pick_up: ::models::CarrierWillPickUpOption) {
    self.carrier_will_pick_up = Some(carrier_will_pick_up);
  }

  pub fn with_carrier_will_pick_up(mut self, carrier_will_pick_up: ::models::CarrierWillPickUpOption) -> ShippingOfferingFilter {
    self.carrier_will_pick_up = Some(carrier_will_pick_up);
    self
  }

  pub fn carrier_will_pick_up(&self) -> Option<&::models::CarrierWillPickUpOption> {
    self.carrier_will_pick_up.as_ref()
  }

  pub fn reset_carrier_will_pick_up(&mut self) {
    self.carrier_will_pick_up = None;
  }

  pub fn set_delivery_experience(&mut self, delivery_experience: ::models::DeliveryExperienceOption) {
    self.delivery_experience = Some(delivery_experience);
  }

  pub fn with_delivery_experience(mut self, delivery_experience: ::models::DeliveryExperienceOption) -> ShippingOfferingFilter {
    self.delivery_experience = Some(delivery_experience);
    self
  }

  pub fn delivery_experience(&self) -> Option<&::models::DeliveryExperienceOption> {
    self.delivery_experience.as_ref()
  }

  pub fn reset_delivery_experience(&mut self) {
    self.delivery_experience = None;
  }

}



