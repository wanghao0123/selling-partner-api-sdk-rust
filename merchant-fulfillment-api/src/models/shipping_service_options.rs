/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ShippingServiceOptions : Extra services provided by a carrier.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShippingServiceOptions {
  /// The delivery confirmation level.
  #[serde(rename = "DeliveryExperience")]
  delivery_experience: ::models::DeliveryExperienceType,
  /// The declared value of the shipment. The carrier uses this value to determine the amount to use to insure the shipment. If DeclaredValue is greater than the carrier's minimum insurance amount, the seller is charged for the additional insurance as determined by the carrier. For information about optional insurance coverage, see the Seller Central Help [UK](https://sellercentral.amazon.co.uk/gp/help/200204080) [US](https://sellercentral.amazon.com/gp/help/200204080).
  #[serde(rename = "DeclaredValue")]
  declared_value: Option<::models::CurrencyAmount>,
  /// When true, the carrier will pick up the package.  Note: Scheduled carrier pickup is available only using Dynamex (US), DPD (UK), and Royal Mail (UK).
  #[serde(rename = "CarrierWillPickUp")]
  carrier_will_pick_up: bool,
  #[serde(rename = "CarrierWillPickUpOption")]
  carrier_will_pick_up_option: Option<::models::CarrierWillPickUpOption>,
  /// The seller's preferred label format.
  #[serde(rename = "LabelFormat")]
  label_format: Option<::models::LabelFormat>
}

impl ShippingServiceOptions {
  /// Extra services provided by a carrier.
  pub fn new(delivery_experience: ::models::DeliveryExperienceType, carrier_will_pick_up: bool) -> ShippingServiceOptions {
    ShippingServiceOptions {
      delivery_experience: delivery_experience,
      declared_value: None,
      carrier_will_pick_up: carrier_will_pick_up,
      carrier_will_pick_up_option: None,
      label_format: None
    }
  }

  pub fn set_delivery_experience(&mut self, delivery_experience: ::models::DeliveryExperienceType) {
    self.delivery_experience = delivery_experience;
  }

  pub fn with_delivery_experience(mut self, delivery_experience: ::models::DeliveryExperienceType) -> ShippingServiceOptions {
    self.delivery_experience = delivery_experience;
    self
  }

  pub fn delivery_experience(&self) -> &::models::DeliveryExperienceType {
    &self.delivery_experience
  }


  pub fn set_declared_value(&mut self, declared_value: ::models::CurrencyAmount) {
    self.declared_value = Some(declared_value);
  }

  pub fn with_declared_value(mut self, declared_value: ::models::CurrencyAmount) -> ShippingServiceOptions {
    self.declared_value = Some(declared_value);
    self
  }

  pub fn declared_value(&self) -> Option<&::models::CurrencyAmount> {
    self.declared_value.as_ref()
  }

  pub fn reset_declared_value(&mut self) {
    self.declared_value = None;
  }

  pub fn set_carrier_will_pick_up(&mut self, carrier_will_pick_up: bool) {
    self.carrier_will_pick_up = carrier_will_pick_up;
  }

  pub fn with_carrier_will_pick_up(mut self, carrier_will_pick_up: bool) -> ShippingServiceOptions {
    self.carrier_will_pick_up = carrier_will_pick_up;
    self
  }

  pub fn carrier_will_pick_up(&self) -> &bool {
    &self.carrier_will_pick_up
  }


  pub fn set_carrier_will_pick_up_option(&mut self, carrier_will_pick_up_option: ::models::CarrierWillPickUpOption) {
    self.carrier_will_pick_up_option = Some(carrier_will_pick_up_option);
  }

  pub fn with_carrier_will_pick_up_option(mut self, carrier_will_pick_up_option: ::models::CarrierWillPickUpOption) -> ShippingServiceOptions {
    self.carrier_will_pick_up_option = Some(carrier_will_pick_up_option);
    self
  }

  pub fn carrier_will_pick_up_option(&self) -> Option<&::models::CarrierWillPickUpOption> {
    self.carrier_will_pick_up_option.as_ref()
  }

  pub fn reset_carrier_will_pick_up_option(&mut self) {
    self.carrier_will_pick_up_option = None;
  }

  pub fn set_label_format(&mut self, label_format: ::models::LabelFormat) {
    self.label_format = Some(label_format);
  }

  pub fn with_label_format(mut self, label_format: ::models::LabelFormat) -> ShippingServiceOptions {
    self.label_format = Some(label_format);
    self
  }

  pub fn label_format(&self) -> Option<&::models::LabelFormat> {
    self.label_format.as_ref()
  }

  pub fn reset_label_format(&mut self) {
    self.label_format = None;
  }

}



