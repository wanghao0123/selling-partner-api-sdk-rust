/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// GetEligibleShipmentServicesResult : The payload for the getEligibleShipmentServices operation.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct GetEligibleShipmentServicesResult {
  /// A list of shipping services offers.
  #[serde(rename = "ShippingServiceList")]
  shipping_service_list: ::models::ShippingServiceList,
  #[serde(rename = "RejectedShippingServiceList")]
  rejected_shipping_service_list: Option<::models::RejectedShippingServiceList>,
  #[serde(rename = "TemporarilyUnavailableCarrierList")]
  temporarily_unavailable_carrier_list: Option<::models::TemporarilyUnavailableCarrierList>,
  #[serde(rename = "TermsAndConditionsNotAcceptedCarrierList")]
  terms_and_conditions_not_accepted_carrier_list: Option<::models::TermsAndConditionsNotAcceptedCarrierList>
}

impl GetEligibleShipmentServicesResult {
  /// The payload for the getEligibleShipmentServices operation.
  pub fn new(shipping_service_list: ::models::ShippingServiceList) -> GetEligibleShipmentServicesResult {
    GetEligibleShipmentServicesResult {
      shipping_service_list: shipping_service_list,
      rejected_shipping_service_list: None,
      temporarily_unavailable_carrier_list: None,
      terms_and_conditions_not_accepted_carrier_list: None
    }
  }

  pub fn set_shipping_service_list(&mut self, shipping_service_list: ::models::ShippingServiceList) {
    self.shipping_service_list = shipping_service_list;
  }

  pub fn with_shipping_service_list(mut self, shipping_service_list: ::models::ShippingServiceList) -> GetEligibleShipmentServicesResult {
    self.shipping_service_list = shipping_service_list;
    self
  }

  pub fn shipping_service_list(&self) -> &::models::ShippingServiceList {
    &self.shipping_service_list
  }


  pub fn set_rejected_shipping_service_list(&mut self, rejected_shipping_service_list: ::models::RejectedShippingServiceList) {
    self.rejected_shipping_service_list = Some(rejected_shipping_service_list);
  }

  pub fn with_rejected_shipping_service_list(mut self, rejected_shipping_service_list: ::models::RejectedShippingServiceList) -> GetEligibleShipmentServicesResult {
    self.rejected_shipping_service_list = Some(rejected_shipping_service_list);
    self
  }

  pub fn rejected_shipping_service_list(&self) -> Option<&::models::RejectedShippingServiceList> {
    self.rejected_shipping_service_list.as_ref()
  }

  pub fn reset_rejected_shipping_service_list(&mut self) {
    self.rejected_shipping_service_list = None;
  }

  pub fn set_temporarily_unavailable_carrier_list(&mut self, temporarily_unavailable_carrier_list: ::models::TemporarilyUnavailableCarrierList) {
    self.temporarily_unavailable_carrier_list = Some(temporarily_unavailable_carrier_list);
  }

  pub fn with_temporarily_unavailable_carrier_list(mut self, temporarily_unavailable_carrier_list: ::models::TemporarilyUnavailableCarrierList) -> GetEligibleShipmentServicesResult {
    self.temporarily_unavailable_carrier_list = Some(temporarily_unavailable_carrier_list);
    self
  }

  pub fn temporarily_unavailable_carrier_list(&self) -> Option<&::models::TemporarilyUnavailableCarrierList> {
    self.temporarily_unavailable_carrier_list.as_ref()
  }

  pub fn reset_temporarily_unavailable_carrier_list(&mut self) {
    self.temporarily_unavailable_carrier_list = None;
  }

  pub fn set_terms_and_conditions_not_accepted_carrier_list(&mut self, terms_and_conditions_not_accepted_carrier_list: ::models::TermsAndConditionsNotAcceptedCarrierList) {
    self.terms_and_conditions_not_accepted_carrier_list = Some(terms_and_conditions_not_accepted_carrier_list);
  }

  pub fn with_terms_and_conditions_not_accepted_carrier_list(mut self, terms_and_conditions_not_accepted_carrier_list: ::models::TermsAndConditionsNotAcceptedCarrierList) -> GetEligibleShipmentServicesResult {
    self.terms_and_conditions_not_accepted_carrier_list = Some(terms_and_conditions_not_accepted_carrier_list);
    self
  }

  pub fn terms_and_conditions_not_accepted_carrier_list(&self) -> Option<&::models::TermsAndConditionsNotAcceptedCarrierList> {
    self.terms_and_conditions_not_accepted_carrier_list.as_ref()
  }

  pub fn reset_terms_and_conditions_not_accepted_carrier_list(&mut self) {
    self.terms_and_conditions_not_accepted_carrier_list = None;
  }

}



