/* 
 * Selling Partner API for Merchant Fulfillment
 *
 * The Selling Partner API for Merchant Fulfillment helps you build applications that let sellers purchase shipping for non-Prime and Prime orders using Amazonâ€™s Buy Shipping Services.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RejectedShippingService : Information about a rejected shipping service

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct RejectedShippingService {
  /// The rejected shipping carrier name. e.g. USPS
  #[serde(rename = "CarrierName")]
  carrier_name: String,
  /// The rejected shipping service localized name. e.g. FedEx Standard Overnight
  #[serde(rename = "ShippingServiceName")]
  shipping_service_name: String,
  /// The rejected shipping service identifier. e.g. FEDEX_PTP_STANDARD_OVERNIGHT
  #[serde(rename = "ShippingServiceId")]
  shipping_service_id: ::models::ShippingServiceIdentifier,
  /// A reason code meant to be consumed programatically. e.g. CARRIER_CANNOT_SHIP_TO_POBOX
  #[serde(rename = "RejectionReasonCode")]
  rejection_reason_code: String,
  /// A localized human readable description of the rejected reason.
  #[serde(rename = "RejectionReasonMessage")]
  rejection_reason_message: Option<String>
}

impl RejectedShippingService {
  /// Information about a rejected shipping service
  pub fn new(carrier_name: String, shipping_service_name: String, shipping_service_id: ::models::ShippingServiceIdentifier, rejection_reason_code: String) -> RejectedShippingService {
    RejectedShippingService {
      carrier_name: carrier_name,
      shipping_service_name: shipping_service_name,
      shipping_service_id: shipping_service_id,
      rejection_reason_code: rejection_reason_code,
      rejection_reason_message: None
    }
  }

  pub fn set_carrier_name(&mut self, carrier_name: String) {
    self.carrier_name = carrier_name;
  }

  pub fn with_carrier_name(mut self, carrier_name: String) -> RejectedShippingService {
    self.carrier_name = carrier_name;
    self
  }

  pub fn carrier_name(&self) -> &String {
    &self.carrier_name
  }


  pub fn set_shipping_service_name(&mut self, shipping_service_name: String) {
    self.shipping_service_name = shipping_service_name;
  }

  pub fn with_shipping_service_name(mut self, shipping_service_name: String) -> RejectedShippingService {
    self.shipping_service_name = shipping_service_name;
    self
  }

  pub fn shipping_service_name(&self) -> &String {
    &self.shipping_service_name
  }


  pub fn set_shipping_service_id(&mut self, shipping_service_id: ::models::ShippingServiceIdentifier) {
    self.shipping_service_id = shipping_service_id;
  }

  pub fn with_shipping_service_id(mut self, shipping_service_id: ::models::ShippingServiceIdentifier) -> RejectedShippingService {
    self.shipping_service_id = shipping_service_id;
    self
  }

  pub fn shipping_service_id(&self) -> &::models::ShippingServiceIdentifier {
    &self.shipping_service_id
  }


  pub fn set_rejection_reason_code(&mut self, rejection_reason_code: String) {
    self.rejection_reason_code = rejection_reason_code;
  }

  pub fn with_rejection_reason_code(mut self, rejection_reason_code: String) -> RejectedShippingService {
    self.rejection_reason_code = rejection_reason_code;
    self
  }

  pub fn rejection_reason_code(&self) -> &String {
    &self.rejection_reason_code
  }


  pub fn set_rejection_reason_message(&mut self, rejection_reason_message: String) {
    self.rejection_reason_message = Some(rejection_reason_message);
  }

  pub fn with_rejection_reason_message(mut self, rejection_reason_message: String) -> RejectedShippingService {
    self.rejection_reason_message = Some(rejection_reason_message);
    self
  }

  pub fn rejection_reason_message(&self) -> Option<&String> {
    self.rejection_reason_message.as_ref()
  }

  pub fn reset_rejection_reason_message(&mut self) {
    self.rejection_reason_message = None;
  }

}



