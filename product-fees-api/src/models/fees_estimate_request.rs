/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FeesEstimateRequest {
  /// A marketplace identifier.
  #[serde(rename = "MarketplaceId")]
  marketplace_id: String,
  /// When true, the offer is fulfilled by Amazon.
  #[serde(rename = "IsAmazonFulfilled")]
  is_amazon_fulfilled: Option<bool>,
  /// The product price that the fee estimate is based on.
  #[serde(rename = "PriceToEstimateFees")]
  price_to_estimate_fees: ::models::PriceToEstimateFees,
  /// A unique identifier provided by the caller to track this request.
  #[serde(rename = "Identifier")]
  identifier: String,
  #[serde(rename = "OptionalFulfillmentProgram")]
  optional_fulfillment_program: Option<::models::OptionalFulfillmentProgram>
}

impl FeesEstimateRequest {
  pub fn new(marketplace_id: String, price_to_estimate_fees: ::models::PriceToEstimateFees, identifier: String) -> FeesEstimateRequest {
    FeesEstimateRequest {
      marketplace_id: marketplace_id,
      is_amazon_fulfilled: None,
      price_to_estimate_fees: price_to_estimate_fees,
      identifier: identifier,
      optional_fulfillment_program: None
    }
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = marketplace_id;
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> FeesEstimateRequest {
    self.marketplace_id = marketplace_id;
    self
  }

  pub fn marketplace_id(&self) -> &String {
    &self.marketplace_id
  }


  pub fn set_is_amazon_fulfilled(&mut self, is_amazon_fulfilled: bool) {
    self.is_amazon_fulfilled = Some(is_amazon_fulfilled);
  }

  pub fn with_is_amazon_fulfilled(mut self, is_amazon_fulfilled: bool) -> FeesEstimateRequest {
    self.is_amazon_fulfilled = Some(is_amazon_fulfilled);
    self
  }

  pub fn is_amazon_fulfilled(&self) -> Option<&bool> {
    self.is_amazon_fulfilled.as_ref()
  }

  pub fn reset_is_amazon_fulfilled(&mut self) {
    self.is_amazon_fulfilled = None;
  }

  pub fn set_price_to_estimate_fees(&mut self, price_to_estimate_fees: ::models::PriceToEstimateFees) {
    self.price_to_estimate_fees = price_to_estimate_fees;
  }

  pub fn with_price_to_estimate_fees(mut self, price_to_estimate_fees: ::models::PriceToEstimateFees) -> FeesEstimateRequest {
    self.price_to_estimate_fees = price_to_estimate_fees;
    self
  }

  pub fn price_to_estimate_fees(&self) -> &::models::PriceToEstimateFees {
    &self.price_to_estimate_fees
  }


  pub fn set_identifier(&mut self, identifier: String) {
    self.identifier = identifier;
  }

  pub fn with_identifier(mut self, identifier: String) -> FeesEstimateRequest {
    self.identifier = identifier;
    self
  }

  pub fn identifier(&self) -> &String {
    &self.identifier
  }


  pub fn set_optional_fulfillment_program(&mut self, optional_fulfillment_program: ::models::OptionalFulfillmentProgram) {
    self.optional_fulfillment_program = Some(optional_fulfillment_program);
  }

  pub fn with_optional_fulfillment_program(mut self, optional_fulfillment_program: ::models::OptionalFulfillmentProgram) -> FeesEstimateRequest {
    self.optional_fulfillment_program = Some(optional_fulfillment_program);
    self
  }

  pub fn optional_fulfillment_program(&self) -> Option<&::models::OptionalFulfillmentProgram> {
    self.optional_fulfillment_program.as_ref()
  }

  pub fn reset_optional_fulfillment_program(&mut self) {
    self.optional_fulfillment_program = None;
  }

}



