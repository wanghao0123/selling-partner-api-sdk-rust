/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FeesEstimateIdentifier : An item identifier, marketplace, time of request, and other details that identify an estimate.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FeesEstimateIdentifier {
  /// A marketplace identifier.
  #[serde(rename = "MarketplaceId")]
  marketplace_id: Option<String>,
  /// The seller identifier.
  #[serde(rename = "SellerId")]
  seller_id: Option<String>,
  /// The type of item identifier specified.
  #[serde(rename = "IdType")]
  id_type: Option<String>,
  /// The item identifier.
  #[serde(rename = "IdValue")]
  id_value: Option<String>,
  /// When true, the offer is fulfilled by Amazon.
  #[serde(rename = "IsAmazonFulfilled")]
  is_amazon_fulfilled: Option<bool>,
  /// The item price on which the fee estimate is based.
  #[serde(rename = "PriceToEstimateFees")]
  price_to_estimate_fees: Option<::models::PriceToEstimateFees>,
  /// A unique identifier provided by the caller to track this request.
  #[serde(rename = "SellerInputIdentifier")]
  seller_input_identifier: Option<String>,
  #[serde(rename = "OptionalFulfillmentProgram")]
  optional_fulfillment_program: Option<::models::OptionalFulfillmentProgram>
}

impl FeesEstimateIdentifier {
  /// An item identifier, marketplace, time of request, and other details that identify an estimate.
  pub fn new() -> FeesEstimateIdentifier {
    FeesEstimateIdentifier {
      marketplace_id: None,
      seller_id: None,
      id_type: None,
      id_value: None,
      is_amazon_fulfilled: None,
      price_to_estimate_fees: None,
      seller_input_identifier: None,
      optional_fulfillment_program: None
    }
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = Some(marketplace_id);
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> FeesEstimateIdentifier {
    self.marketplace_id = Some(marketplace_id);
    self
  }

  pub fn marketplace_id(&self) -> Option<&String> {
    self.marketplace_id.as_ref()
  }

  pub fn reset_marketplace_id(&mut self) {
    self.marketplace_id = None;
  }

  pub fn set_seller_id(&mut self, seller_id: String) {
    self.seller_id = Some(seller_id);
  }

  pub fn with_seller_id(mut self, seller_id: String) -> FeesEstimateIdentifier {
    self.seller_id = Some(seller_id);
    self
  }

  pub fn seller_id(&self) -> Option<&String> {
    self.seller_id.as_ref()
  }

  pub fn reset_seller_id(&mut self) {
    self.seller_id = None;
  }

  pub fn set_id_type(&mut self, id_type: String) {
    self.id_type = Some(id_type);
  }

  pub fn with_id_type(mut self, id_type: String) -> FeesEstimateIdentifier {
    self.id_type = Some(id_type);
    self
  }

  pub fn id_type(&self) -> Option<&String> {
    self.id_type.as_ref()
  }

  pub fn reset_id_type(&mut self) {
    self.id_type = None;
  }

  pub fn set_id_value(&mut self, id_value: String) {
    self.id_value = Some(id_value);
  }

  pub fn with_id_value(mut self, id_value: String) -> FeesEstimateIdentifier {
    self.id_value = Some(id_value);
    self
  }

  pub fn id_value(&self) -> Option<&String> {
    self.id_value.as_ref()
  }

  pub fn reset_id_value(&mut self) {
    self.id_value = None;
  }

  pub fn set_is_amazon_fulfilled(&mut self, is_amazon_fulfilled: bool) {
    self.is_amazon_fulfilled = Some(is_amazon_fulfilled);
  }

  pub fn with_is_amazon_fulfilled(mut self, is_amazon_fulfilled: bool) -> FeesEstimateIdentifier {
    self.is_amazon_fulfilled = Some(is_amazon_fulfilled);
    self
  }

  pub fn is_amazon_fulfilled(&self) -> Option<&bool> {
    self.is_amazon_fulfilled.as_ref()
  }

  pub fn reset_is_amazon_fulfilled(&mut self) {
    self.is_amazon_fulfilled = None;
  }

  pub fn set_price_to_estimate_fees(&mut self, price_to_estimate_fees: ::models::PriceToEstimateFees) {
    self.price_to_estimate_fees = Some(price_to_estimate_fees);
  }

  pub fn with_price_to_estimate_fees(mut self, price_to_estimate_fees: ::models::PriceToEstimateFees) -> FeesEstimateIdentifier {
    self.price_to_estimate_fees = Some(price_to_estimate_fees);
    self
  }

  pub fn price_to_estimate_fees(&self) -> Option<&::models::PriceToEstimateFees> {
    self.price_to_estimate_fees.as_ref()
  }

  pub fn reset_price_to_estimate_fees(&mut self) {
    self.price_to_estimate_fees = None;
  }

  pub fn set_seller_input_identifier(&mut self, seller_input_identifier: String) {
    self.seller_input_identifier = Some(seller_input_identifier);
  }

  pub fn with_seller_input_identifier(mut self, seller_input_identifier: String) -> FeesEstimateIdentifier {
    self.seller_input_identifier = Some(seller_input_identifier);
    self
  }

  pub fn seller_input_identifier(&self) -> Option<&String> {
    self.seller_input_identifier.as_ref()
  }

  pub fn reset_seller_input_identifier(&mut self) {
    self.seller_input_identifier = None;
  }

  pub fn set_optional_fulfillment_program(&mut self, optional_fulfillment_program: ::models::OptionalFulfillmentProgram) {
    self.optional_fulfillment_program = Some(optional_fulfillment_program);
  }

  pub fn with_optional_fulfillment_program(mut self, optional_fulfillment_program: ::models::OptionalFulfillmentProgram) -> FeesEstimateIdentifier {
    self.optional_fulfillment_program = Some(optional_fulfillment_program);
    self
  }

  pub fn optional_fulfillment_program(&self) -> Option<&::models::OptionalFulfillmentProgram> {
    self.optional_fulfillment_program.as_ref()
  }

  pub fn reset_optional_fulfillment_program(&mut self) {
    self.optional_fulfillment_program = None;
  }

}



