/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FeesEstimate : The total estimated fees for an item and a list of details.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FeesEstimate {
  /// The time at which the fees were estimated. This defaults to the time the request is made.
  #[serde(rename = "TimeOfFeesEstimation")]
  time_of_fees_estimation: String,
  /// Total estimated fees for a given item, price, and fulfillment channel.
  #[serde(rename = "TotalFeesEstimate")]
  total_fees_estimate: Option<::models::MoneyType>,
  #[serde(rename = "FeeDetailList")]
  fee_detail_list: Option<::models::FeeDetailList>
}

impl FeesEstimate {
  /// The total estimated fees for an item and a list of details.
  pub fn new(time_of_fees_estimation: String) -> FeesEstimate {
    FeesEstimate {
      time_of_fees_estimation: time_of_fees_estimation,
      total_fees_estimate: None,
      fee_detail_list: None
    }
  }

  pub fn set_time_of_fees_estimation(&mut self, time_of_fees_estimation: String) {
    self.time_of_fees_estimation = time_of_fees_estimation;
  }

  pub fn with_time_of_fees_estimation(mut self, time_of_fees_estimation: String) -> FeesEstimate {
    self.time_of_fees_estimation = time_of_fees_estimation;
    self
  }

  pub fn time_of_fees_estimation(&self) -> &String {
    &self.time_of_fees_estimation
  }


  pub fn set_total_fees_estimate(&mut self, total_fees_estimate: ::models::MoneyType) {
    self.total_fees_estimate = Some(total_fees_estimate);
  }

  pub fn with_total_fees_estimate(mut self, total_fees_estimate: ::models::MoneyType) -> FeesEstimate {
    self.total_fees_estimate = Some(total_fees_estimate);
    self
  }

  pub fn total_fees_estimate(&self) -> Option<&::models::MoneyType> {
    self.total_fees_estimate.as_ref()
  }

  pub fn reset_total_fees_estimate(&mut self) {
    self.total_fees_estimate = None;
  }

  pub fn set_fee_detail_list(&mut self, fee_detail_list: ::models::FeeDetailList) {
    self.fee_detail_list = Some(fee_detail_list);
  }

  pub fn with_fee_detail_list(mut self, fee_detail_list: ::models::FeeDetailList) -> FeesEstimate {
    self.fee_detail_list = Some(fee_detail_list);
    self
  }

  pub fn fee_detail_list(&self) -> Option<&::models::FeeDetailList> {
    self.fee_detail_list.as_ref()
  }

  pub fn reset_fee_detail_list(&mut self) {
    self.fee_detail_list = None;
  }

}



