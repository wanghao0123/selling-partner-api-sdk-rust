/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// FeesEstimateResult : An item identifier and the estimated fees for the item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct FeesEstimateResult {
  /// The status of the fee request. Possible values: Success, ClientError, ServiceError.
  #[serde(rename = "Status")]
  status: Option<String>,
  /// Information used to identify a fees estimate request.
  #[serde(rename = "FeesEstimateIdentifier")]
  fees_estimate_identifier: Option<::models::FeesEstimateIdentifier>,
  /// The total estimated fees for an item and a list of details.
  #[serde(rename = "FeesEstimate")]
  fees_estimate: Option<::models::FeesEstimate>,
  /// An error object with a type, code, and message.
  #[serde(rename = "Error")]
  error: Option<::models::FeesEstimateError>
}

impl FeesEstimateResult {
  /// An item identifier and the estimated fees for the item.
  pub fn new() -> FeesEstimateResult {
    FeesEstimateResult {
      status: None,
      fees_estimate_identifier: None,
      fees_estimate: None,
      error: None
    }
  }

  pub fn set_status(&mut self, status: String) {
    self.status = Some(status);
  }

  pub fn with_status(mut self, status: String) -> FeesEstimateResult {
    self.status = Some(status);
    self
  }

  pub fn status(&self) -> Option<&String> {
    self.status.as_ref()
  }

  pub fn reset_status(&mut self) {
    self.status = None;
  }

  pub fn set_fees_estimate_identifier(&mut self, fees_estimate_identifier: ::models::FeesEstimateIdentifier) {
    self.fees_estimate_identifier = Some(fees_estimate_identifier);
  }

  pub fn with_fees_estimate_identifier(mut self, fees_estimate_identifier: ::models::FeesEstimateIdentifier) -> FeesEstimateResult {
    self.fees_estimate_identifier = Some(fees_estimate_identifier);
    self
  }

  pub fn fees_estimate_identifier(&self) -> Option<&::models::FeesEstimateIdentifier> {
    self.fees_estimate_identifier.as_ref()
  }

  pub fn reset_fees_estimate_identifier(&mut self) {
    self.fees_estimate_identifier = None;
  }

  pub fn set_fees_estimate(&mut self, fees_estimate: ::models::FeesEstimate) {
    self.fees_estimate = Some(fees_estimate);
  }

  pub fn with_fees_estimate(mut self, fees_estimate: ::models::FeesEstimate) -> FeesEstimateResult {
    self.fees_estimate = Some(fees_estimate);
    self
  }

  pub fn fees_estimate(&self) -> Option<&::models::FeesEstimate> {
    self.fees_estimate.as_ref()
  }

  pub fn reset_fees_estimate(&mut self) {
    self.fees_estimate = None;
  }

  pub fn set_error(&mut self, error: ::models::FeesEstimateError) {
    self.error = Some(error);
  }

  pub fn with_error(mut self, error: ::models::FeesEstimateError) -> FeesEstimateResult {
    self.error = Some(error);
    self
  }

  pub fn error(&self) -> Option<&::models::FeesEstimateError> {
    self.error.as_ref()
  }

  pub fn reset_error(&mut self) {
    self.error = None;
  }

}



