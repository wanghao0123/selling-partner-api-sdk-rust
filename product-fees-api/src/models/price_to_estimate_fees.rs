/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// PriceToEstimateFees : Price information for an item, used to estimate fees.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct PriceToEstimateFees {
  /// The price of the item.
  #[serde(rename = "ListingPrice")]
  listing_price: ::models::MoneyType,
  /// The shipping cost.
  #[serde(rename = "Shipping")]
  shipping: Option<::models::MoneyType>,
  /// The number of Amazon Points offered with the purchase of an item.
  #[serde(rename = "Points")]
  points: Option<::models::Points>
}

impl PriceToEstimateFees {
  /// Price information for an item, used to estimate fees.
  pub fn new(listing_price: ::models::MoneyType) -> PriceToEstimateFees {
    PriceToEstimateFees {
      listing_price: listing_price,
      shipping: None,
      points: None
    }
  }

  pub fn set_listing_price(&mut self, listing_price: ::models::MoneyType) {
    self.listing_price = listing_price;
  }

  pub fn with_listing_price(mut self, listing_price: ::models::MoneyType) -> PriceToEstimateFees {
    self.listing_price = listing_price;
    self
  }

  pub fn listing_price(&self) -> &::models::MoneyType {
    &self.listing_price
  }


  pub fn set_shipping(&mut self, shipping: ::models::MoneyType) {
    self.shipping = Some(shipping);
  }

  pub fn with_shipping(mut self, shipping: ::models::MoneyType) -> PriceToEstimateFees {
    self.shipping = Some(shipping);
    self
  }

  pub fn shipping(&self) -> Option<&::models::MoneyType> {
    self.shipping.as_ref()
  }

  pub fn reset_shipping(&mut self) {
    self.shipping = None;
  }

  pub fn set_points(&mut self, points: ::models::Points) {
    self.points = Some(points);
  }

  pub fn with_points(mut self, points: ::models::Points) -> PriceToEstimateFees {
    self.points = Some(points);
    self
  }

  pub fn points(&self) -> Option<&::models::Points> {
    self.points.as_ref()
  }

  pub fn reset_points(&mut self) {
    self.points = None;
  }

}



