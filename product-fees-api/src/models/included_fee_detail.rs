/* 
 * Selling Partner API for Product Fees
 *
 * The Selling Partner API for Product Fees lets you programmatically retrieve estimated fees for a product. You can then account for those fees in your pricing.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// IncludedFeeDetail : The type of fee, fee amount, and other details.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct IncludedFeeDetail {
  /// The type of fee charged to a seller.
  #[serde(rename = "FeeType")]
  fee_type: String,
  /// The amount charged for a given fee.
  #[serde(rename = "FeeAmount")]
  fee_amount: ::models::MoneyType,
  /// The promotion amount for a given fee.
  #[serde(rename = "FeePromotion")]
  fee_promotion: Option<::models::MoneyType>,
  /// The tax amount for a given fee.
  #[serde(rename = "TaxAmount")]
  tax_amount: Option<::models::MoneyType>,
  /// The final fee amount for a given fee.
  #[serde(rename = "FinalFee")]
  final_fee: ::models::MoneyType
}

impl IncludedFeeDetail {
  /// The type of fee, fee amount, and other details.
  pub fn new(fee_type: String, fee_amount: ::models::MoneyType, final_fee: ::models::MoneyType) -> IncludedFeeDetail {
    IncludedFeeDetail {
      fee_type: fee_type,
      fee_amount: fee_amount,
      fee_promotion: None,
      tax_amount: None,
      final_fee: final_fee
    }
  }

  pub fn set_fee_type(&mut self, fee_type: String) {
    self.fee_type = fee_type;
  }

  pub fn with_fee_type(mut self, fee_type: String) -> IncludedFeeDetail {
    self.fee_type = fee_type;
    self
  }

  pub fn fee_type(&self) -> &String {
    &self.fee_type
  }


  pub fn set_fee_amount(&mut self, fee_amount: ::models::MoneyType) {
    self.fee_amount = fee_amount;
  }

  pub fn with_fee_amount(mut self, fee_amount: ::models::MoneyType) -> IncludedFeeDetail {
    self.fee_amount = fee_amount;
    self
  }

  pub fn fee_amount(&self) -> &::models::MoneyType {
    &self.fee_amount
  }


  pub fn set_fee_promotion(&mut self, fee_promotion: ::models::MoneyType) {
    self.fee_promotion = Some(fee_promotion);
  }

  pub fn with_fee_promotion(mut self, fee_promotion: ::models::MoneyType) -> IncludedFeeDetail {
    self.fee_promotion = Some(fee_promotion);
    self
  }

  pub fn fee_promotion(&self) -> Option<&::models::MoneyType> {
    self.fee_promotion.as_ref()
  }

  pub fn reset_fee_promotion(&mut self) {
    self.fee_promotion = None;
  }

  pub fn set_tax_amount(&mut self, tax_amount: ::models::MoneyType) {
    self.tax_amount = Some(tax_amount);
  }

  pub fn with_tax_amount(mut self, tax_amount: ::models::MoneyType) -> IncludedFeeDetail {
    self.tax_amount = Some(tax_amount);
    self
  }

  pub fn tax_amount(&self) -> Option<&::models::MoneyType> {
    self.tax_amount.as_ref()
  }

  pub fn reset_tax_amount(&mut self) {
    self.tax_amount = None;
  }

  pub fn set_final_fee(&mut self, final_fee: ::models::MoneyType) {
    self.final_fee = final_fee;
  }

  pub fn with_final_fee(mut self, final_fee: ::models::MoneyType) -> IncludedFeeDetail {
    self.final_fee = final_fee;
    self
  }

  pub fn final_fee(&self) -> &::models::MoneyType {
    &self.final_fee
  }


}



