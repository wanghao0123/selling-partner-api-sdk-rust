/* 
 * Selling Partner API for Direct Fulfillment Inventory Updates
 *
 * The Selling Partner API for Direct Fulfillment Inventory Updates provides programmatic access to a direct fulfillment vendor's inventory updates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct InventoryUpdate {
  /// ID of the selling party or vendor.
  #[serde(rename = "sellingParty")]
  selling_party: ::models::PartyIdentification,
  /// When true, this request contains a full feed. Otherwise, this request contains a partial feed. When sending a full feed, you must send information about all items in the warehouse. Any items not in the full feed are updated as not available. When sending a partial feed, only include the items that need an update to inventory. The status of other items will remain unchanged.
  #[serde(rename = "isFullUpdate")]
  is_full_update: bool,
  /// A list of inventory items with updated details, including quantity available.
  #[serde(rename = "items")]
  items: Vec<::models::ItemDetails>
}

impl InventoryUpdate {
  pub fn new(selling_party: ::models::PartyIdentification, is_full_update: bool, items: Vec<::models::ItemDetails>) -> InventoryUpdate {
    InventoryUpdate {
      selling_party: selling_party,
      is_full_update: is_full_update,
      items: items
    }
  }

  pub fn set_selling_party(&mut self, selling_party: ::models::PartyIdentification) {
    self.selling_party = selling_party;
  }

  pub fn with_selling_party(mut self, selling_party: ::models::PartyIdentification) -> InventoryUpdate {
    self.selling_party = selling_party;
    self
  }

  pub fn selling_party(&self) -> &::models::PartyIdentification {
    &self.selling_party
  }


  pub fn set_is_full_update(&mut self, is_full_update: bool) {
    self.is_full_update = is_full_update;
  }

  pub fn with_is_full_update(mut self, is_full_update: bool) -> InventoryUpdate {
    self.is_full_update = is_full_update;
    self
  }

  pub fn is_full_update(&self) -> &bool {
    &self.is_full_update
  }


  pub fn set_items(&mut self, items: Vec<::models::ItemDetails>) {
    self.items = items;
  }

  pub fn with_items(mut self, items: Vec<::models::ItemDetails>) -> InventoryUpdate {
    self.items = items;
    self
  }

  pub fn items(&self) -> &Vec<::models::ItemDetails> {
    &self.items
  }


}



