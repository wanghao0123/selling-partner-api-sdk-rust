/* 
 * Selling Partner API for Direct Fulfillment Inventory Updates
 *
 * The Selling Partner API for Direct Fulfillment Inventory Updates provides programmatic access to a direct fulfillment vendor's inventory updates.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ItemDetails : Updated inventory details for an item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ItemDetails {
  /// The buyer selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.
  #[serde(rename = "buyerProductIdentifier")]
  buyer_product_identifier: Option<String>,
  /// The vendor selected product identification of the item. Either buyerProductIdentifier or vendorProductIdentifier should be submitted.
  #[serde(rename = "vendorProductIdentifier")]
  vendor_product_identifier: Option<String>,
  /// Total item quantity available in the warehouse.
  #[serde(rename = "availableQuantity")]
  available_quantity: ::models::ItemQuantity,
  /// When true, the item is permanently unavailable.
  #[serde(rename = "isObsolete")]
  is_obsolete: Option<bool>
}

impl ItemDetails {
  /// Updated inventory details for an item.
  pub fn new(available_quantity: ::models::ItemQuantity) -> ItemDetails {
    ItemDetails {
      buyer_product_identifier: None,
      vendor_product_identifier: None,
      available_quantity: available_quantity,
      is_obsolete: None
    }
  }

  pub fn set_buyer_product_identifier(&mut self, buyer_product_identifier: String) {
    self.buyer_product_identifier = Some(buyer_product_identifier);
  }

  pub fn with_buyer_product_identifier(mut self, buyer_product_identifier: String) -> ItemDetails {
    self.buyer_product_identifier = Some(buyer_product_identifier);
    self
  }

  pub fn buyer_product_identifier(&self) -> Option<&String> {
    self.buyer_product_identifier.as_ref()
  }

  pub fn reset_buyer_product_identifier(&mut self) {
    self.buyer_product_identifier = None;
  }

  pub fn set_vendor_product_identifier(&mut self, vendor_product_identifier: String) {
    self.vendor_product_identifier = Some(vendor_product_identifier);
  }

  pub fn with_vendor_product_identifier(mut self, vendor_product_identifier: String) -> ItemDetails {
    self.vendor_product_identifier = Some(vendor_product_identifier);
    self
  }

  pub fn vendor_product_identifier(&self) -> Option<&String> {
    self.vendor_product_identifier.as_ref()
  }

  pub fn reset_vendor_product_identifier(&mut self) {
    self.vendor_product_identifier = None;
  }

  pub fn set_available_quantity(&mut self, available_quantity: ::models::ItemQuantity) {
    self.available_quantity = available_quantity;
  }

  pub fn with_available_quantity(mut self, available_quantity: ::models::ItemQuantity) -> ItemDetails {
    self.available_quantity = available_quantity;
    self
  }

  pub fn available_quantity(&self) -> &::models::ItemQuantity {
    &self.available_quantity
  }


  pub fn set_is_obsolete(&mut self, is_obsolete: bool) {
    self.is_obsolete = Some(is_obsolete);
  }

  pub fn with_is_obsolete(mut self, is_obsolete: bool) -> ItemDetails {
    self.is_obsolete = Some(is_obsolete);
    self
  }

  pub fn is_obsolete(&self) -> Option<&bool> {
    self.is_obsolete.as_ref()
  }

  pub fn reset_is_obsolete(&mut self) {
    self.is_obsolete = None;
  }

}



