/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Pallet : Details of the Pallet/Tare being shipped.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Pallet {
  /// A list of pallet identifiers.
  #[serde(rename = "palletIdentifiers")]
  pallet_identifiers: Vec<::models::ContainerIdentification>,
  /// Number of layers per pallet.
  #[serde(rename = "tier")]
  tier: Option<i32>,
  /// Number of cartons per layer on the pallet.
  #[serde(rename = "block")]
  block: Option<i32>,
  #[serde(rename = "dimensions")]
  dimensions: Option<::models::Dimensions>,
  #[serde(rename = "weight")]
  weight: Option<::models::Weight>,
  /// Carton reference details.
  #[serde(rename = "cartonReferenceDetails")]
  carton_reference_details: Option<::models::CartonReferenceDetails>,
  /// A list of container item details.
  #[serde(rename = "items")]
  items: Option<Vec<::models::ContainerItem>>
}

impl Pallet {
  /// Details of the Pallet/Tare being shipped.
  pub fn new(pallet_identifiers: Vec<::models::ContainerIdentification>) -> Pallet {
    Pallet {
      pallet_identifiers: pallet_identifiers,
      tier: None,
      block: None,
      dimensions: None,
      weight: None,
      carton_reference_details: None,
      items: None
    }
  }

  pub fn set_pallet_identifiers(&mut self, pallet_identifiers: Vec<::models::ContainerIdentification>) {
    self.pallet_identifiers = pallet_identifiers;
  }

  pub fn with_pallet_identifiers(mut self, pallet_identifiers: Vec<::models::ContainerIdentification>) -> Pallet {
    self.pallet_identifiers = pallet_identifiers;
    self
  }

  pub fn pallet_identifiers(&self) -> &Vec<::models::ContainerIdentification> {
    &self.pallet_identifiers
  }


  pub fn set_tier(&mut self, tier: i32) {
    self.tier = Some(tier);
  }

  pub fn with_tier(mut self, tier: i32) -> Pallet {
    self.tier = Some(tier);
    self
  }

  pub fn tier(&self) -> Option<&i32> {
    self.tier.as_ref()
  }

  pub fn reset_tier(&mut self) {
    self.tier = None;
  }

  pub fn set_block(&mut self, block: i32) {
    self.block = Some(block);
  }

  pub fn with_block(mut self, block: i32) -> Pallet {
    self.block = Some(block);
    self
  }

  pub fn block(&self) -> Option<&i32> {
    self.block.as_ref()
  }

  pub fn reset_block(&mut self) {
    self.block = None;
  }

  pub fn set_dimensions(&mut self, dimensions: ::models::Dimensions) {
    self.dimensions = Some(dimensions);
  }

  pub fn with_dimensions(mut self, dimensions: ::models::Dimensions) -> Pallet {
    self.dimensions = Some(dimensions);
    self
  }

  pub fn dimensions(&self) -> Option<&::models::Dimensions> {
    self.dimensions.as_ref()
  }

  pub fn reset_dimensions(&mut self) {
    self.dimensions = None;
  }

  pub fn set_weight(&mut self, weight: ::models::Weight) {
    self.weight = Some(weight);
  }

  pub fn with_weight(mut self, weight: ::models::Weight) -> Pallet {
    self.weight = Some(weight);
    self
  }

  pub fn weight(&self) -> Option<&::models::Weight> {
    self.weight.as_ref()
  }

  pub fn reset_weight(&mut self) {
    self.weight = None;
  }

  pub fn set_carton_reference_details(&mut self, carton_reference_details: ::models::CartonReferenceDetails) {
    self.carton_reference_details = Some(carton_reference_details);
  }

  pub fn with_carton_reference_details(mut self, carton_reference_details: ::models::CartonReferenceDetails) -> Pallet {
    self.carton_reference_details = Some(carton_reference_details);
    self
  }

  pub fn carton_reference_details(&self) -> Option<&::models::CartonReferenceDetails> {
    self.carton_reference_details.as_ref()
  }

  pub fn reset_carton_reference_details(&mut self) {
    self.carton_reference_details = None;
  }

  pub fn set_items(&mut self, items: Vec<::models::ContainerItem>) {
    self.items = Some(items);
  }

  pub fn with_items(mut self, items: Vec<::models::ContainerItem>) -> Pallet {
    self.items = Some(items);
    self
  }

  pub fn items(&self) -> Option<&Vec<::models::ContainerItem>> {
    self.items.as_ref()
  }

  pub fn reset_items(&mut self) {
    self.items = None;
  }

}



