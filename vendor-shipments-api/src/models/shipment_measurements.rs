/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ShipmentMeasurements : Shipment measurement details.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShipmentMeasurements {
  /// Gross weight of the shipment.
  #[serde(rename = "grossShipmentWeight")]
  gross_shipment_weight: Option<::models::Weight>,
  /// Volume of the shipment.
  #[serde(rename = "shipmentVolume")]
  shipment_volume: Option<::models::Volume>,
  /// Number of cartons present in the shipment. Provide the cartonCount only for unpalletized shipments.
  #[serde(rename = "cartonCount")]
  carton_count: Option<i32>,
  /// Number of pallets present in the shipment. Provide the palletCount only for palletized shipments.
  #[serde(rename = "palletCount")]
  pallet_count: Option<i32>
}

impl ShipmentMeasurements {
  /// Shipment measurement details.
  pub fn new() -> ShipmentMeasurements {
    ShipmentMeasurements {
      gross_shipment_weight: None,
      shipment_volume: None,
      carton_count: None,
      pallet_count: None
    }
  }

  pub fn set_gross_shipment_weight(&mut self, gross_shipment_weight: ::models::Weight) {
    self.gross_shipment_weight = Some(gross_shipment_weight);
  }

  pub fn with_gross_shipment_weight(mut self, gross_shipment_weight: ::models::Weight) -> ShipmentMeasurements {
    self.gross_shipment_weight = Some(gross_shipment_weight);
    self
  }

  pub fn gross_shipment_weight(&self) -> Option<&::models::Weight> {
    self.gross_shipment_weight.as_ref()
  }

  pub fn reset_gross_shipment_weight(&mut self) {
    self.gross_shipment_weight = None;
  }

  pub fn set_shipment_volume(&mut self, shipment_volume: ::models::Volume) {
    self.shipment_volume = Some(shipment_volume);
  }

  pub fn with_shipment_volume(mut self, shipment_volume: ::models::Volume) -> ShipmentMeasurements {
    self.shipment_volume = Some(shipment_volume);
    self
  }

  pub fn shipment_volume(&self) -> Option<&::models::Volume> {
    self.shipment_volume.as_ref()
  }

  pub fn reset_shipment_volume(&mut self) {
    self.shipment_volume = None;
  }

  pub fn set_carton_count(&mut self, carton_count: i32) {
    self.carton_count = Some(carton_count);
  }

  pub fn with_carton_count(mut self, carton_count: i32) -> ShipmentMeasurements {
    self.carton_count = Some(carton_count);
    self
  }

  pub fn carton_count(&self) -> Option<&i32> {
    self.carton_count.as_ref()
  }

  pub fn reset_carton_count(&mut self) {
    self.carton_count = None;
  }

  pub fn set_pallet_count(&mut self, pallet_count: i32) {
    self.pallet_count = Some(pallet_count);
  }

  pub fn with_pallet_count(mut self, pallet_count: i32) -> ShipmentMeasurements {
    self.pallet_count = Some(pallet_count);
    self
  }

  pub fn pallet_count(&self) -> Option<&i32> {
    self.pallet_count.as_ref()
  }

  pub fn reset_pallet_count(&mut self) {
    self.pallet_count = None;
  }

}



