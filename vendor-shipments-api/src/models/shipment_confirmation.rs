/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShipmentConfirmation {
  /// Unique shipment ID (not used over the last 365 days).
  #[serde(rename = "shipmentIdentifier")]
  shipment_identifier: String,
  /// Indicates if this shipment confirmation is the initial confirmation, or intended to replace an already posted shipment confirmation. If replacing an existing shipment confirmation, be sure to provide the identical shipmentIdentifier and sellingParty information as in the previous confirmation.
  #[serde(rename = "shipmentConfirmationType")]
  shipment_confirmation_type: String,
  /// The type of shipment.
  #[serde(rename = "shipmentType")]
  shipment_type: Option<String>,
  /// Shipment hierarchical structure.
  #[serde(rename = "shipmentStructure")]
  shipment_structure: Option<String>,
  /// Transportation details for this shipment.
  #[serde(rename = "transportationDetails")]
  transportation_details: Option<::models::TransportationDetails>,
  /// The Amazon Reference Number is a unique identifier generated by Amazon for all Collect/WePay shipments when you submit  a routing request. This field is mandatory for Collect/WePay shipments.
  #[serde(rename = "amazonReferenceNumber")]
  amazon_reference_number: Option<String>,
  /// Date on which the shipment confirmation was submitted.
  #[serde(rename = "shipmentConfirmationDate")]
  shipment_confirmation_date: String,
  /// The date and time of the departure of the shipment from the vendor's location. Vendors are requested to send ASNs within 30 minutes of departure from their warehouse/distribution center or at least 6 hours prior to the appointment time at the Amazon destination warehouse, whichever is sooner. Shipped date mentioned in the shipment confirmation should not be in the future.
  #[serde(rename = "shippedDate")]
  shipped_date: Option<String>,
  /// The date and time on which the shipment is expected to reach buyer's warehouse. It needs to be an estimate based on the average transit time between ship from location and the destination. The exact appointment time will be provided by the buyer and is potentially not known when creating the shipment confirmation.
  #[serde(rename = "estimatedDeliveryDate")]
  estimated_delivery_date: Option<String>,
  /// Name/Address and tax details of the selling party.
  #[serde(rename = "sellingParty")]
  selling_party: ::models::PartyIdentification,
  /// Name/Address and tax details of the ship from party.
  #[serde(rename = "shipFromParty")]
  ship_from_party: ::models::PartyIdentification,
  /// Name/Address of the destination warehouse where the shipment is being shipped to.
  #[serde(rename = "shipToParty")]
  ship_to_party: ::models::PartyIdentification,
  #[serde(rename = "shipmentMeasurements")]
  shipment_measurements: Option<::models::ShipmentMeasurements>,
  /// Provide these fields only if this shipment is a direct import.
  #[serde(rename = "importDetails")]
  import_details: Option<::models::ImportDetails>,
  /// A list of the items in this shipment and their associated details. If any of the item detail fields are common at a carton or a pallet level, provide them at the corresponding carton or pallet level.
  #[serde(rename = "shippedItems")]
  shipped_items: Vec<::models::Item>,
  /// A list of the cartons in this shipment.
  #[serde(rename = "cartons")]
  cartons: Option<Vec<::models::Carton>>,
  /// A list of the pallets in this shipment.
  #[serde(rename = "pallets")]
  pallets: Option<Vec<::models::Pallet>>
}

impl ShipmentConfirmation {
  pub fn new(shipment_identifier: String, shipment_confirmation_type: String, shipment_confirmation_date: String, selling_party: ::models::PartyIdentification, ship_from_party: ::models::PartyIdentification, ship_to_party: ::models::PartyIdentification, shipped_items: Vec<::models::Item>) -> ShipmentConfirmation {
    ShipmentConfirmation {
      shipment_identifier: shipment_identifier,
      shipment_confirmation_type: shipment_confirmation_type,
      shipment_type: None,
      shipment_structure: None,
      transportation_details: None,
      amazon_reference_number: None,
      shipment_confirmation_date: shipment_confirmation_date,
      shipped_date: None,
      estimated_delivery_date: None,
      selling_party: selling_party,
      ship_from_party: ship_from_party,
      ship_to_party: ship_to_party,
      shipment_measurements: None,
      import_details: None,
      shipped_items: shipped_items,
      cartons: None,
      pallets: None
    }
  }

  pub fn set_shipment_identifier(&mut self, shipment_identifier: String) {
    self.shipment_identifier = shipment_identifier;
  }

  pub fn with_shipment_identifier(mut self, shipment_identifier: String) -> ShipmentConfirmation {
    self.shipment_identifier = shipment_identifier;
    self
  }

  pub fn shipment_identifier(&self) -> &String {
    &self.shipment_identifier
  }


  pub fn set_shipment_confirmation_type(&mut self, shipment_confirmation_type: String) {
    self.shipment_confirmation_type = shipment_confirmation_type;
  }

  pub fn with_shipment_confirmation_type(mut self, shipment_confirmation_type: String) -> ShipmentConfirmation {
    self.shipment_confirmation_type = shipment_confirmation_type;
    self
  }

  pub fn shipment_confirmation_type(&self) -> &String {
    &self.shipment_confirmation_type
  }


  pub fn set_shipment_type(&mut self, shipment_type: String) {
    self.shipment_type = Some(shipment_type);
  }

  pub fn with_shipment_type(mut self, shipment_type: String) -> ShipmentConfirmation {
    self.shipment_type = Some(shipment_type);
    self
  }

  pub fn shipment_type(&self) -> Option<&String> {
    self.shipment_type.as_ref()
  }

  pub fn reset_shipment_type(&mut self) {
    self.shipment_type = None;
  }

  pub fn set_shipment_structure(&mut self, shipment_structure: String) {
    self.shipment_structure = Some(shipment_structure);
  }

  pub fn with_shipment_structure(mut self, shipment_structure: String) -> ShipmentConfirmation {
    self.shipment_structure = Some(shipment_structure);
    self
  }

  pub fn shipment_structure(&self) -> Option<&String> {
    self.shipment_structure.as_ref()
  }

  pub fn reset_shipment_structure(&mut self) {
    self.shipment_structure = None;
  }

  pub fn set_transportation_details(&mut self, transportation_details: ::models::TransportationDetails) {
    self.transportation_details = Some(transportation_details);
  }

  pub fn with_transportation_details(mut self, transportation_details: ::models::TransportationDetails) -> ShipmentConfirmation {
    self.transportation_details = Some(transportation_details);
    self
  }

  pub fn transportation_details(&self) -> Option<&::models::TransportationDetails> {
    self.transportation_details.as_ref()
  }

  pub fn reset_transportation_details(&mut self) {
    self.transportation_details = None;
  }

  pub fn set_amazon_reference_number(&mut self, amazon_reference_number: String) {
    self.amazon_reference_number = Some(amazon_reference_number);
  }

  pub fn with_amazon_reference_number(mut self, amazon_reference_number: String) -> ShipmentConfirmation {
    self.amazon_reference_number = Some(amazon_reference_number);
    self
  }

  pub fn amazon_reference_number(&self) -> Option<&String> {
    self.amazon_reference_number.as_ref()
  }

  pub fn reset_amazon_reference_number(&mut self) {
    self.amazon_reference_number = None;
  }

  pub fn set_shipment_confirmation_date(&mut self, shipment_confirmation_date: String) {
    self.shipment_confirmation_date = shipment_confirmation_date;
  }

  pub fn with_shipment_confirmation_date(mut self, shipment_confirmation_date: String) -> ShipmentConfirmation {
    self.shipment_confirmation_date = shipment_confirmation_date;
    self
  }

  pub fn shipment_confirmation_date(&self) -> &String {
    &self.shipment_confirmation_date
  }


  pub fn set_shipped_date(&mut self, shipped_date: String) {
    self.shipped_date = Some(shipped_date);
  }

  pub fn with_shipped_date(mut self, shipped_date: String) -> ShipmentConfirmation {
    self.shipped_date = Some(shipped_date);
    self
  }

  pub fn shipped_date(&self) -> Option<&String> {
    self.shipped_date.as_ref()
  }

  pub fn reset_shipped_date(&mut self) {
    self.shipped_date = None;
  }

  pub fn set_estimated_delivery_date(&mut self, estimated_delivery_date: String) {
    self.estimated_delivery_date = Some(estimated_delivery_date);
  }

  pub fn with_estimated_delivery_date(mut self, estimated_delivery_date: String) -> ShipmentConfirmation {
    self.estimated_delivery_date = Some(estimated_delivery_date);
    self
  }

  pub fn estimated_delivery_date(&self) -> Option<&String> {
    self.estimated_delivery_date.as_ref()
  }

  pub fn reset_estimated_delivery_date(&mut self) {
    self.estimated_delivery_date = None;
  }

  pub fn set_selling_party(&mut self, selling_party: ::models::PartyIdentification) {
    self.selling_party = selling_party;
  }

  pub fn with_selling_party(mut self, selling_party: ::models::PartyIdentification) -> ShipmentConfirmation {
    self.selling_party = selling_party;
    self
  }

  pub fn selling_party(&self) -> &::models::PartyIdentification {
    &self.selling_party
  }


  pub fn set_ship_from_party(&mut self, ship_from_party: ::models::PartyIdentification) {
    self.ship_from_party = ship_from_party;
  }

  pub fn with_ship_from_party(mut self, ship_from_party: ::models::PartyIdentification) -> ShipmentConfirmation {
    self.ship_from_party = ship_from_party;
    self
  }

  pub fn ship_from_party(&self) -> &::models::PartyIdentification {
    &self.ship_from_party
  }


  pub fn set_ship_to_party(&mut self, ship_to_party: ::models::PartyIdentification) {
    self.ship_to_party = ship_to_party;
  }

  pub fn with_ship_to_party(mut self, ship_to_party: ::models::PartyIdentification) -> ShipmentConfirmation {
    self.ship_to_party = ship_to_party;
    self
  }

  pub fn ship_to_party(&self) -> &::models::PartyIdentification {
    &self.ship_to_party
  }


  pub fn set_shipment_measurements(&mut self, shipment_measurements: ::models::ShipmentMeasurements) {
    self.shipment_measurements = Some(shipment_measurements);
  }

  pub fn with_shipment_measurements(mut self, shipment_measurements: ::models::ShipmentMeasurements) -> ShipmentConfirmation {
    self.shipment_measurements = Some(shipment_measurements);
    self
  }

  pub fn shipment_measurements(&self) -> Option<&::models::ShipmentMeasurements> {
    self.shipment_measurements.as_ref()
  }

  pub fn reset_shipment_measurements(&mut self) {
    self.shipment_measurements = None;
  }

  pub fn set_import_details(&mut self, import_details: ::models::ImportDetails) {
    self.import_details = Some(import_details);
  }

  pub fn with_import_details(mut self, import_details: ::models::ImportDetails) -> ShipmentConfirmation {
    self.import_details = Some(import_details);
    self
  }

  pub fn import_details(&self) -> Option<&::models::ImportDetails> {
    self.import_details.as_ref()
  }

  pub fn reset_import_details(&mut self) {
    self.import_details = None;
  }

  pub fn set_shipped_items(&mut self, shipped_items: Vec<::models::Item>) {
    self.shipped_items = shipped_items;
  }

  pub fn with_shipped_items(mut self, shipped_items: Vec<::models::Item>) -> ShipmentConfirmation {
    self.shipped_items = shipped_items;
    self
  }

  pub fn shipped_items(&self) -> &Vec<::models::Item> {
    &self.shipped_items
  }


  pub fn set_cartons(&mut self, cartons: Vec<::models::Carton>) {
    self.cartons = Some(cartons);
  }

  pub fn with_cartons(mut self, cartons: Vec<::models::Carton>) -> ShipmentConfirmation {
    self.cartons = Some(cartons);
    self
  }

  pub fn cartons(&self) -> Option<&Vec<::models::Carton>> {
    self.cartons.as_ref()
  }

  pub fn reset_cartons(&mut self) {
    self.cartons = None;
  }

  pub fn set_pallets(&mut self, pallets: Vec<::models::Pallet>) {
    self.pallets = Some(pallets);
  }

  pub fn with_pallets(mut self, pallets: Vec<::models::Pallet>) -> ShipmentConfirmation {
    self.pallets = Some(pallets);
    self
  }

  pub fn pallets(&self) -> Option<&Vec<::models::Pallet>> {
    self.pallets.as_ref()
  }

  pub fn reset_pallets(&mut self) {
    self.pallets = None;
  }

}



