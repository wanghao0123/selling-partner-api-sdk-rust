/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Stop : Contractual or operational port or point relevant to the movement of the cargo.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Stop {
  /// Provide the function code.
  #[serde(rename = "functionCode")]
  function_code: String,
  #[serde(rename = "locationIdentification")]
  location_identification: Option<::models::Location>,
  /// Date and time of the arrival of the cargo.
  #[serde(rename = "arrivalTime")]
  arrival_time: Option<String>,
  /// Date and time of the departure of the cargo.
  #[serde(rename = "departureTime")]
  departure_time: Option<String>
}

impl Stop {
  /// Contractual or operational port or point relevant to the movement of the cargo.
  pub fn new(function_code: String) -> Stop {
    Stop {
      function_code: function_code,
      location_identification: None,
      arrival_time: None,
      departure_time: None
    }
  }

  pub fn set_function_code(&mut self, function_code: String) {
    self.function_code = function_code;
  }

  pub fn with_function_code(mut self, function_code: String) -> Stop {
    self.function_code = function_code;
    self
  }

  pub fn function_code(&self) -> &String {
    &self.function_code
  }


  pub fn set_location_identification(&mut self, location_identification: ::models::Location) {
    self.location_identification = Some(location_identification);
  }

  pub fn with_location_identification(mut self, location_identification: ::models::Location) -> Stop {
    self.location_identification = Some(location_identification);
    self
  }

  pub fn location_identification(&self) -> Option<&::models::Location> {
    self.location_identification.as_ref()
  }

  pub fn reset_location_identification(&mut self) {
    self.location_identification = None;
  }

  pub fn set_arrival_time(&mut self, arrival_time: String) {
    self.arrival_time = Some(arrival_time);
  }

  pub fn with_arrival_time(mut self, arrival_time: String) -> Stop {
    self.arrival_time = Some(arrival_time);
    self
  }

  pub fn arrival_time(&self) -> Option<&String> {
    self.arrival_time.as_ref()
  }

  pub fn reset_arrival_time(&mut self) {
    self.arrival_time = None;
  }

  pub fn set_departure_time(&mut self, departure_time: String) {
    self.departure_time = Some(departure_time);
  }

  pub fn with_departure_time(mut self, departure_time: String) -> Stop {
    self.departure_time = Some(departure_time);
    self
  }

  pub fn departure_time(&self) -> Option<&String> {
    self.departure_time.as_ref()
  }

  pub fn reset_departure_time(&mut self) {
    self.departure_time = None;
  }

}



