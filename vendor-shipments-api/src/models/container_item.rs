/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ContainerItem : Carton/Pallet level details for the item.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ContainerItem {
  /// The reference number for the item. Please provide the itemSequenceNumber from the 'items' segment to refer to that item's details here.
  #[serde(rename = "itemReference")]
  item_reference: String,
  /// Total item quantity shipped in this carton/pallet.
  #[serde(rename = "shippedQuantity")]
  shipped_quantity: ::models::ItemQuantity,
  #[serde(rename = "itemDetails")]
  item_details: Option<::models::ItemDetails>
}

impl ContainerItem {
  /// Carton/Pallet level details for the item.
  pub fn new(item_reference: String, shipped_quantity: ::models::ItemQuantity) -> ContainerItem {
    ContainerItem {
      item_reference: item_reference,
      shipped_quantity: shipped_quantity,
      item_details: None
    }
  }

  pub fn set_item_reference(&mut self, item_reference: String) {
    self.item_reference = item_reference;
  }

  pub fn with_item_reference(mut self, item_reference: String) -> ContainerItem {
    self.item_reference = item_reference;
    self
  }

  pub fn item_reference(&self) -> &String {
    &self.item_reference
  }


  pub fn set_shipped_quantity(&mut self, shipped_quantity: ::models::ItemQuantity) {
    self.shipped_quantity = shipped_quantity;
  }

  pub fn with_shipped_quantity(mut self, shipped_quantity: ::models::ItemQuantity) -> ContainerItem {
    self.shipped_quantity = shipped_quantity;
    self
  }

  pub fn shipped_quantity(&self) -> &::models::ItemQuantity {
    &self.shipped_quantity
  }


  pub fn set_item_details(&mut self, item_details: ::models::ItemDetails) {
    self.item_details = Some(item_details);
  }

  pub fn with_item_details(mut self, item_details: ::models::ItemDetails) -> ContainerItem {
    self.item_details = Some(item_details);
    self
  }

  pub fn item_details(&self) -> Option<&::models::ItemDetails> {
    self.item_details.as_ref()
  }

  pub fn reset_item_details(&mut self) {
    self.item_details = None;
  }

}



