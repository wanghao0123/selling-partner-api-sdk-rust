/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ItemDetails : Item details for be provided for every item in shipment at either the item or carton or pallet level, whichever is appropriate.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ItemDetails {
  /// The Amazon purchase order number for the shipment being confirmed. If the items in this shipment belong to multiple purchase order numbers that are in particular carton or pallet within the shipment, then provide the purchaseOrderNumber at the appropriate carton or pallet level. Formatting Notes: 8-character alpha-numeric code.
  #[serde(rename = "purchaseOrderNumber")]
  purchase_order_number: Option<String>,
  /// The batch or lot number associates an item with information the manufacturer considers relevant for traceability of the trade item to which the Element String is applied. The data may refer to the trade item itself or to items contained. This field is mandatory for all perishable items.
  #[serde(rename = "lotNumber")]
  lot_number: Option<String>,
  /// Either expiryDate or mfgDate and expiryAfterDuration are mandatory for perishable items.
  #[serde(rename = "expiry")]
  expiry: Option<::models::Expiry>,
  /// Maximum retail price of the item being shipped.
  #[serde(rename = "maximumRetailPrice")]
  maximum_retail_price: Option<::models::Money>,
  /// Identification of the instructions on how specified item/carton/pallet should be handled.
  #[serde(rename = "handlingCode")]
  handling_code: Option<String>
}

impl ItemDetails {
  /// Item details for be provided for every item in shipment at either the item or carton or pallet level, whichever is appropriate.
  pub fn new() -> ItemDetails {
    ItemDetails {
      purchase_order_number: None,
      lot_number: None,
      expiry: None,
      maximum_retail_price: None,
      handling_code: None
    }
  }

  pub fn set_purchase_order_number(&mut self, purchase_order_number: String) {
    self.purchase_order_number = Some(purchase_order_number);
  }

  pub fn with_purchase_order_number(mut self, purchase_order_number: String) -> ItemDetails {
    self.purchase_order_number = Some(purchase_order_number);
    self
  }

  pub fn purchase_order_number(&self) -> Option<&String> {
    self.purchase_order_number.as_ref()
  }

  pub fn reset_purchase_order_number(&mut self) {
    self.purchase_order_number = None;
  }

  pub fn set_lot_number(&mut self, lot_number: String) {
    self.lot_number = Some(lot_number);
  }

  pub fn with_lot_number(mut self, lot_number: String) -> ItemDetails {
    self.lot_number = Some(lot_number);
    self
  }

  pub fn lot_number(&self) -> Option<&String> {
    self.lot_number.as_ref()
  }

  pub fn reset_lot_number(&mut self) {
    self.lot_number = None;
  }

  pub fn set_expiry(&mut self, expiry: ::models::Expiry) {
    self.expiry = Some(expiry);
  }

  pub fn with_expiry(mut self, expiry: ::models::Expiry) -> ItemDetails {
    self.expiry = Some(expiry);
    self
  }

  pub fn expiry(&self) -> Option<&::models::Expiry> {
    self.expiry.as_ref()
  }

  pub fn reset_expiry(&mut self) {
    self.expiry = None;
  }

  pub fn set_maximum_retail_price(&mut self, maximum_retail_price: ::models::Money) {
    self.maximum_retail_price = Some(maximum_retail_price);
  }

  pub fn with_maximum_retail_price(mut self, maximum_retail_price: ::models::Money) -> ItemDetails {
    self.maximum_retail_price = Some(maximum_retail_price);
    self
  }

  pub fn maximum_retail_price(&self) -> Option<&::models::Money> {
    self.maximum_retail_price.as_ref()
  }

  pub fn reset_maximum_retail_price(&mut self) {
    self.maximum_retail_price = None;
  }

  pub fn set_handling_code(&mut self, handling_code: String) {
    self.handling_code = Some(handling_code);
  }

  pub fn with_handling_code(mut self, handling_code: String) -> ItemDetails {
    self.handling_code = Some(handling_code);
    self
  }

  pub fn handling_code(&self) -> Option<&String> {
    self.handling_code.as_ref()
  }

  pub fn reset_handling_code(&mut self) {
    self.handling_code = None;
  }

}



