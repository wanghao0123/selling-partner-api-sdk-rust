/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Expiry {
  /// Production, packaging or assembly date determined by the manufacturer. Its meaning is determined based on the trade item context.
  #[serde(rename = "manufacturerDate")]
  manufacturer_date: Option<String>,
  /// The date that determines the limit of consumption or use of a product. Its meaning is determined based on the trade item context.
  #[serde(rename = "expiryDate")]
  expiry_date: Option<String>,
  /// Duration after manufacturing date during which the product is valid for consumption.
  #[serde(rename = "expiryAfterDuration")]
  expiry_after_duration: Option<::models::Duration>
}

impl Expiry {
  pub fn new() -> Expiry {
    Expiry {
      manufacturer_date: None,
      expiry_date: None,
      expiry_after_duration: None
    }
  }

  pub fn set_manufacturer_date(&mut self, manufacturer_date: String) {
    self.manufacturer_date = Some(manufacturer_date);
  }

  pub fn with_manufacturer_date(mut self, manufacturer_date: String) -> Expiry {
    self.manufacturer_date = Some(manufacturer_date);
    self
  }

  pub fn manufacturer_date(&self) -> Option<&String> {
    self.manufacturer_date.as_ref()
  }

  pub fn reset_manufacturer_date(&mut self) {
    self.manufacturer_date = None;
  }

  pub fn set_expiry_date(&mut self, expiry_date: String) {
    self.expiry_date = Some(expiry_date);
  }

  pub fn with_expiry_date(mut self, expiry_date: String) -> Expiry {
    self.expiry_date = Some(expiry_date);
    self
  }

  pub fn expiry_date(&self) -> Option<&String> {
    self.expiry_date.as_ref()
  }

  pub fn reset_expiry_date(&mut self) {
    self.expiry_date = None;
  }

  pub fn set_expiry_after_duration(&mut self, expiry_after_duration: ::models::Duration) {
    self.expiry_after_duration = Some(expiry_after_duration);
  }

  pub fn with_expiry_after_duration(mut self, expiry_after_duration: ::models::Duration) -> Expiry {
    self.expiry_after_duration = Some(expiry_after_duration);
    self
  }

  pub fn expiry_after_duration(&self) -> Option<&::models::Duration> {
    self.expiry_after_duration.as_ref()
  }

  pub fn reset_expiry_after_duration(&mut self) {
    self.expiry_after_duration = None;
  }

}



