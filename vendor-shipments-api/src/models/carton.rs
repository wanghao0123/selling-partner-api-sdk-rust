/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Carton : Details of the carton/package being shipped.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Carton {
  /// A list of carton identifiers.
  #[serde(rename = "cartonIdentifiers")]
  carton_identifiers: Option<Vec<::models::ContainerIdentification>>,
  /// Carton sequence number for the carton. The first carton will be 001, the second 002, and so on. This number is used as a reference to refer to this carton from the pallet level.
  #[serde(rename = "cartonSequenceNumber")]
  carton_sequence_number: String,
  #[serde(rename = "dimensions")]
  dimensions: Option<::models::Dimensions>,
  #[serde(rename = "weight")]
  weight: Option<::models::Weight>,
  /// This is required to be provided for every carton in the small parcel shipments.
  #[serde(rename = "trackingNumber")]
  tracking_number: Option<String>,
  /// A list of container item details.
  #[serde(rename = "items")]
  items: Vec<::models::ContainerItem>
}

impl Carton {
  /// Details of the carton/package being shipped.
  pub fn new(carton_sequence_number: String, items: Vec<::models::ContainerItem>) -> Carton {
    Carton {
      carton_identifiers: None,
      carton_sequence_number: carton_sequence_number,
      dimensions: None,
      weight: None,
      tracking_number: None,
      items: items
    }
  }

  pub fn set_carton_identifiers(&mut self, carton_identifiers: Vec<::models::ContainerIdentification>) {
    self.carton_identifiers = Some(carton_identifiers);
  }

  pub fn with_carton_identifiers(mut self, carton_identifiers: Vec<::models::ContainerIdentification>) -> Carton {
    self.carton_identifiers = Some(carton_identifiers);
    self
  }

  pub fn carton_identifiers(&self) -> Option<&Vec<::models::ContainerIdentification>> {
    self.carton_identifiers.as_ref()
  }

  pub fn reset_carton_identifiers(&mut self) {
    self.carton_identifiers = None;
  }

  pub fn set_carton_sequence_number(&mut self, carton_sequence_number: String) {
    self.carton_sequence_number = carton_sequence_number;
  }

  pub fn with_carton_sequence_number(mut self, carton_sequence_number: String) -> Carton {
    self.carton_sequence_number = carton_sequence_number;
    self
  }

  pub fn carton_sequence_number(&self) -> &String {
    &self.carton_sequence_number
  }


  pub fn set_dimensions(&mut self, dimensions: ::models::Dimensions) {
    self.dimensions = Some(dimensions);
  }

  pub fn with_dimensions(mut self, dimensions: ::models::Dimensions) -> Carton {
    self.dimensions = Some(dimensions);
    self
  }

  pub fn dimensions(&self) -> Option<&::models::Dimensions> {
    self.dimensions.as_ref()
  }

  pub fn reset_dimensions(&mut self) {
    self.dimensions = None;
  }

  pub fn set_weight(&mut self, weight: ::models::Weight) {
    self.weight = Some(weight);
  }

  pub fn with_weight(mut self, weight: ::models::Weight) -> Carton {
    self.weight = Some(weight);
    self
  }

  pub fn weight(&self) -> Option<&::models::Weight> {
    self.weight.as_ref()
  }

  pub fn reset_weight(&mut self) {
    self.weight = None;
  }

  pub fn set_tracking_number(&mut self, tracking_number: String) {
    self.tracking_number = Some(tracking_number);
  }

  pub fn with_tracking_number(mut self, tracking_number: String) -> Carton {
    self.tracking_number = Some(tracking_number);
    self
  }

  pub fn tracking_number(&self) -> Option<&String> {
    self.tracking_number.as_ref()
  }

  pub fn reset_tracking_number(&mut self) {
    self.tracking_number = None;
  }

  pub fn set_items(&mut self, items: Vec<::models::ContainerItem>) {
    self.items = items;
  }

  pub fn with_items(mut self, items: Vec<::models::ContainerItem>) -> Carton {
    self.items = items;
    self
  }

  pub fn items(&self) -> &Vec<::models::ContainerItem> {
    &self.items
  }


}



