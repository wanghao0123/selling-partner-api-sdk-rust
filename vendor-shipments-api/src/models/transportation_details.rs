/* 
 * Selling Partner API for Retail Procurement Shipments
 *
 * The Selling Partner API for Retail Procurement Shipments provides programmatic access to retail shipping data for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct TransportationDetails {
  /// Code that identifies the carrier for the shipment. The Standard Carrier Alpha Code (SCAC) is a unique two to four letter code used to identify a carrier. Carrier SCAC codes are assigned and maintained by the NMFTA (National Motor Freight Association). This field is mandatory for US, CA, MX shipment confirmations.
  #[serde(rename = "carrierScac")]
  carrier_scac: Option<String>,
  /// The field also known as PRO number is a unique number assigned by the carrier. It is used to identify and track the shipment that goes out for delivery. This field is mandatory for UA, CA, MX shipment confirmations.
  #[serde(rename = "carrierShipmentReferenceNumber")]
  carrier_shipment_reference_number: Option<String>,
  /// The mode of transportation for this shipment.
  #[serde(rename = "transportationMode")]
  transportation_mode: Option<String>,
  /// Bill Of Lading (BOL) number is the unique number assigned by the vendor. The BOL present in the Shipment Confirmation message ideally matches the paper BOL provided with the shipment, but that is no must. Instead of BOL, an alternative reference number (like Delivery Note Number) for the shipment can also be sent in this field.
  #[serde(rename = "billOfLadingNumber")]
  bill_of_lading_number: Option<String>
}

impl TransportationDetails {
  pub fn new() -> TransportationDetails {
    TransportationDetails {
      carrier_scac: None,
      carrier_shipment_reference_number: None,
      transportation_mode: None,
      bill_of_lading_number: None
    }
  }

  pub fn set_carrier_scac(&mut self, carrier_scac: String) {
    self.carrier_scac = Some(carrier_scac);
  }

  pub fn with_carrier_scac(mut self, carrier_scac: String) -> TransportationDetails {
    self.carrier_scac = Some(carrier_scac);
    self
  }

  pub fn carrier_scac(&self) -> Option<&String> {
    self.carrier_scac.as_ref()
  }

  pub fn reset_carrier_scac(&mut self) {
    self.carrier_scac = None;
  }

  pub fn set_carrier_shipment_reference_number(&mut self, carrier_shipment_reference_number: String) {
    self.carrier_shipment_reference_number = Some(carrier_shipment_reference_number);
  }

  pub fn with_carrier_shipment_reference_number(mut self, carrier_shipment_reference_number: String) -> TransportationDetails {
    self.carrier_shipment_reference_number = Some(carrier_shipment_reference_number);
    self
  }

  pub fn carrier_shipment_reference_number(&self) -> Option<&String> {
    self.carrier_shipment_reference_number.as_ref()
  }

  pub fn reset_carrier_shipment_reference_number(&mut self) {
    self.carrier_shipment_reference_number = None;
  }

  pub fn set_transportation_mode(&mut self, transportation_mode: String) {
    self.transportation_mode = Some(transportation_mode);
  }

  pub fn with_transportation_mode(mut self, transportation_mode: String) -> TransportationDetails {
    self.transportation_mode = Some(transportation_mode);
    self
  }

  pub fn transportation_mode(&self) -> Option<&String> {
    self.transportation_mode.as_ref()
  }

  pub fn reset_transportation_mode(&mut self) {
    self.transportation_mode = None;
  }

  pub fn set_bill_of_lading_number(&mut self, bill_of_lading_number: String) {
    self.bill_of_lading_number = Some(bill_of_lading_number);
  }

  pub fn with_bill_of_lading_number(mut self, bill_of_lading_number: String) -> TransportationDetails {
    self.bill_of_lading_number = Some(bill_of_lading_number);
    self
  }

  pub fn bill_of_lading_number(&self) -> Option<&String> {
    self.bill_of_lading_number.as_ref()
  }

  pub fn reset_bill_of_lading_number(&mut self) {
    self.bill_of_lading_number = None;
  }

}



