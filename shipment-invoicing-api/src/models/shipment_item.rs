/* 
 * Selling Partner API for Shipment Invoicing
 *
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ShipmentItem : The shipment item information required by a seller to issue a shipment invoice.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShipmentItem {
  /// The Amazon Standard Identification Number (ASIN) of the item.
  #[serde(rename = "ASIN")]
  ASIN: Option<String>,
  /// The seller SKU of the item.
  #[serde(rename = "SellerSKU")]
  seller_sku: Option<String>,
  /// The Amazon-defined identifier for the order item.
  #[serde(rename = "OrderItemId")]
  order_item_id: Option<String>,
  /// The name of the item.
  #[serde(rename = "Title")]
  title: Option<String>,
  /// The number of items ordered.
  #[serde(rename = "QuantityOrdered")]
  quantity_ordered: Option<f32>,
  /// The selling price of the item multiplied by the quantity ordered. Note that ItemPrice excludes ShippingPrice and GiftWrapPrice.
  #[serde(rename = "ItemPrice")]
  item_price: Option<::models::Money>,
  /// The shipping price of the item.
  #[serde(rename = "ShippingPrice")]
  shipping_price: Option<::models::Money>,
  /// The gift wrap price of the item.
  #[serde(rename = "GiftWrapPrice")]
  gift_wrap_price: Option<::models::Money>,
  /// The discount on the shipping price.
  #[serde(rename = "ShippingDiscount")]
  shipping_discount: Option<::models::Money>,
  /// The total of all promotional discounts in the offer.
  #[serde(rename = "PromotionDiscount")]
  promotion_discount: Option<::models::Money>,
  /// The list of serial numbers.
  #[serde(rename = "SerialNumbers")]
  serial_numbers: Option<::models::SerialNumbersList>
}

impl ShipmentItem {
  /// The shipment item information required by a seller to issue a shipment invoice.
  pub fn new() -> ShipmentItem {
    ShipmentItem {
      ASIN: None,
      seller_sku: None,
      order_item_id: None,
      title: None,
      quantity_ordered: None,
      item_price: None,
      shipping_price: None,
      gift_wrap_price: None,
      shipping_discount: None,
      promotion_discount: None,
      serial_numbers: None
    }
  }

  pub fn set_ASIN(&mut self, ASIN: String) {
    self.ASIN = Some(ASIN);
  }

  pub fn with_ASIN(mut self, ASIN: String) -> ShipmentItem {
    self.ASIN = Some(ASIN);
    self
  }

  pub fn ASIN(&self) -> Option<&String> {
    self.ASIN.as_ref()
  }

  pub fn reset_ASIN(&mut self) {
    self.ASIN = None;
  }

  pub fn set_seller_sku(&mut self, seller_sku: String) {
    self.seller_sku = Some(seller_sku);
  }

  pub fn with_seller_sku(mut self, seller_sku: String) -> ShipmentItem {
    self.seller_sku = Some(seller_sku);
    self
  }

  pub fn seller_sku(&self) -> Option<&String> {
    self.seller_sku.as_ref()
  }

  pub fn reset_seller_sku(&mut self) {
    self.seller_sku = None;
  }

  pub fn set_order_item_id(&mut self, order_item_id: String) {
    self.order_item_id = Some(order_item_id);
  }

  pub fn with_order_item_id(mut self, order_item_id: String) -> ShipmentItem {
    self.order_item_id = Some(order_item_id);
    self
  }

  pub fn order_item_id(&self) -> Option<&String> {
    self.order_item_id.as_ref()
  }

  pub fn reset_order_item_id(&mut self) {
    self.order_item_id = None;
  }

  pub fn set_title(&mut self, title: String) {
    self.title = Some(title);
  }

  pub fn with_title(mut self, title: String) -> ShipmentItem {
    self.title = Some(title);
    self
  }

  pub fn title(&self) -> Option<&String> {
    self.title.as_ref()
  }

  pub fn reset_title(&mut self) {
    self.title = None;
  }

  pub fn set_quantity_ordered(&mut self, quantity_ordered: f32) {
    self.quantity_ordered = Some(quantity_ordered);
  }

  pub fn with_quantity_ordered(mut self, quantity_ordered: f32) -> ShipmentItem {
    self.quantity_ordered = Some(quantity_ordered);
    self
  }

  pub fn quantity_ordered(&self) -> Option<&f32> {
    self.quantity_ordered.as_ref()
  }

  pub fn reset_quantity_ordered(&mut self) {
    self.quantity_ordered = None;
  }

  pub fn set_item_price(&mut self, item_price: ::models::Money) {
    self.item_price = Some(item_price);
  }

  pub fn with_item_price(mut self, item_price: ::models::Money) -> ShipmentItem {
    self.item_price = Some(item_price);
    self
  }

  pub fn item_price(&self) -> Option<&::models::Money> {
    self.item_price.as_ref()
  }

  pub fn reset_item_price(&mut self) {
    self.item_price = None;
  }

  pub fn set_shipping_price(&mut self, shipping_price: ::models::Money) {
    self.shipping_price = Some(shipping_price);
  }

  pub fn with_shipping_price(mut self, shipping_price: ::models::Money) -> ShipmentItem {
    self.shipping_price = Some(shipping_price);
    self
  }

  pub fn shipping_price(&self) -> Option<&::models::Money> {
    self.shipping_price.as_ref()
  }

  pub fn reset_shipping_price(&mut self) {
    self.shipping_price = None;
  }

  pub fn set_gift_wrap_price(&mut self, gift_wrap_price: ::models::Money) {
    self.gift_wrap_price = Some(gift_wrap_price);
  }

  pub fn with_gift_wrap_price(mut self, gift_wrap_price: ::models::Money) -> ShipmentItem {
    self.gift_wrap_price = Some(gift_wrap_price);
    self
  }

  pub fn gift_wrap_price(&self) -> Option<&::models::Money> {
    self.gift_wrap_price.as_ref()
  }

  pub fn reset_gift_wrap_price(&mut self) {
    self.gift_wrap_price = None;
  }

  pub fn set_shipping_discount(&mut self, shipping_discount: ::models::Money) {
    self.shipping_discount = Some(shipping_discount);
  }

  pub fn with_shipping_discount(mut self, shipping_discount: ::models::Money) -> ShipmentItem {
    self.shipping_discount = Some(shipping_discount);
    self
  }

  pub fn shipping_discount(&self) -> Option<&::models::Money> {
    self.shipping_discount.as_ref()
  }

  pub fn reset_shipping_discount(&mut self) {
    self.shipping_discount = None;
  }

  pub fn set_promotion_discount(&mut self, promotion_discount: ::models::Money) {
    self.promotion_discount = Some(promotion_discount);
  }

  pub fn with_promotion_discount(mut self, promotion_discount: ::models::Money) -> ShipmentItem {
    self.promotion_discount = Some(promotion_discount);
    self
  }

  pub fn promotion_discount(&self) -> Option<&::models::Money> {
    self.promotion_discount.as_ref()
  }

  pub fn reset_promotion_discount(&mut self) {
    self.promotion_discount = None;
  }

  pub fn set_serial_numbers(&mut self, serial_numbers: ::models::SerialNumbersList) {
    self.serial_numbers = Some(serial_numbers);
  }

  pub fn with_serial_numbers(mut self, serial_numbers: ::models::SerialNumbersList) -> ShipmentItem {
    self.serial_numbers = Some(serial_numbers);
    self
  }

  pub fn serial_numbers(&self) -> Option<&::models::SerialNumbersList> {
    self.serial_numbers.as_ref()
  }

  pub fn reset_serial_numbers(&mut self) {
    self.serial_numbers = None;
  }

}



