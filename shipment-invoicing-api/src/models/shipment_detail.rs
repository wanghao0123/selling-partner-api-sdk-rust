/* 
 * Selling Partner API for Shipment Invoicing
 *
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ShipmentDetail : The information required by a selling partner to issue a shipment invoice.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShipmentDetail {
  /// The Amazon-defined identifier for the warehouse.
  #[serde(rename = "WarehouseId")]
  warehouse_id: Option<String>,
  /// The Amazon-defined identifier for the order.
  #[serde(rename = "AmazonOrderId")]
  amazon_order_id: Option<String>,
  /// The Amazon-defined identifier for the shipment.
  #[serde(rename = "AmazonShipmentId")]
  amazon_shipment_id: Option<String>,
  /// The date and time when the order was created.
  #[serde(rename = "PurchaseDate")]
  purchase_date: Option<String>,
  #[serde(rename = "ShippingAddress")]
  shipping_address: Option<::models::Address>,
  #[serde(rename = "PaymentMethodDetails")]
  payment_method_details: Option<::models::PaymentMethodDetailItemList>,
  /// The identifier for the marketplace where the order was placed.
  #[serde(rename = "MarketplaceId")]
  marketplace_id: Option<String>,
  /// The seller identifier.
  #[serde(rename = "SellerId")]
  seller_id: Option<String>,
  /// The name of the buyer.
  #[serde(rename = "BuyerName")]
  buyer_name: Option<String>,
  /// The county of the buyer.
  #[serde(rename = "BuyerCounty")]
  buyer_county: Option<String>,
  #[serde(rename = "BuyerTaxInfo")]
  buyer_tax_info: Option<::models::BuyerTaxInfo>,
  #[serde(rename = "ShipmentItems")]
  shipment_items: Option<::models::ShipmentItems>
}

impl ShipmentDetail {
  /// The information required by a selling partner to issue a shipment invoice.
  pub fn new() -> ShipmentDetail {
    ShipmentDetail {
      warehouse_id: None,
      amazon_order_id: None,
      amazon_shipment_id: None,
      purchase_date: None,
      shipping_address: None,
      payment_method_details: None,
      marketplace_id: None,
      seller_id: None,
      buyer_name: None,
      buyer_county: None,
      buyer_tax_info: None,
      shipment_items: None
    }
  }

  pub fn set_warehouse_id(&mut self, warehouse_id: String) {
    self.warehouse_id = Some(warehouse_id);
  }

  pub fn with_warehouse_id(mut self, warehouse_id: String) -> ShipmentDetail {
    self.warehouse_id = Some(warehouse_id);
    self
  }

  pub fn warehouse_id(&self) -> Option<&String> {
    self.warehouse_id.as_ref()
  }

  pub fn reset_warehouse_id(&mut self) {
    self.warehouse_id = None;
  }

  pub fn set_amazon_order_id(&mut self, amazon_order_id: String) {
    self.amazon_order_id = Some(amazon_order_id);
  }

  pub fn with_amazon_order_id(mut self, amazon_order_id: String) -> ShipmentDetail {
    self.amazon_order_id = Some(amazon_order_id);
    self
  }

  pub fn amazon_order_id(&self) -> Option<&String> {
    self.amazon_order_id.as_ref()
  }

  pub fn reset_amazon_order_id(&mut self) {
    self.amazon_order_id = None;
  }

  pub fn set_amazon_shipment_id(&mut self, amazon_shipment_id: String) {
    self.amazon_shipment_id = Some(amazon_shipment_id);
  }

  pub fn with_amazon_shipment_id(mut self, amazon_shipment_id: String) -> ShipmentDetail {
    self.amazon_shipment_id = Some(amazon_shipment_id);
    self
  }

  pub fn amazon_shipment_id(&self) -> Option<&String> {
    self.amazon_shipment_id.as_ref()
  }

  pub fn reset_amazon_shipment_id(&mut self) {
    self.amazon_shipment_id = None;
  }

  pub fn set_purchase_date(&mut self, purchase_date: String) {
    self.purchase_date = Some(purchase_date);
  }

  pub fn with_purchase_date(mut self, purchase_date: String) -> ShipmentDetail {
    self.purchase_date = Some(purchase_date);
    self
  }

  pub fn purchase_date(&self) -> Option<&String> {
    self.purchase_date.as_ref()
  }

  pub fn reset_purchase_date(&mut self) {
    self.purchase_date = None;
  }

  pub fn set_shipping_address(&mut self, shipping_address: ::models::Address) {
    self.shipping_address = Some(shipping_address);
  }

  pub fn with_shipping_address(mut self, shipping_address: ::models::Address) -> ShipmentDetail {
    self.shipping_address = Some(shipping_address);
    self
  }

  pub fn shipping_address(&self) -> Option<&::models::Address> {
    self.shipping_address.as_ref()
  }

  pub fn reset_shipping_address(&mut self) {
    self.shipping_address = None;
  }

  pub fn set_payment_method_details(&mut self, payment_method_details: ::models::PaymentMethodDetailItemList) {
    self.payment_method_details = Some(payment_method_details);
  }

  pub fn with_payment_method_details(mut self, payment_method_details: ::models::PaymentMethodDetailItemList) -> ShipmentDetail {
    self.payment_method_details = Some(payment_method_details);
    self
  }

  pub fn payment_method_details(&self) -> Option<&::models::PaymentMethodDetailItemList> {
    self.payment_method_details.as_ref()
  }

  pub fn reset_payment_method_details(&mut self) {
    self.payment_method_details = None;
  }

  pub fn set_marketplace_id(&mut self, marketplace_id: String) {
    self.marketplace_id = Some(marketplace_id);
  }

  pub fn with_marketplace_id(mut self, marketplace_id: String) -> ShipmentDetail {
    self.marketplace_id = Some(marketplace_id);
    self
  }

  pub fn marketplace_id(&self) -> Option<&String> {
    self.marketplace_id.as_ref()
  }

  pub fn reset_marketplace_id(&mut self) {
    self.marketplace_id = None;
  }

  pub fn set_seller_id(&mut self, seller_id: String) {
    self.seller_id = Some(seller_id);
  }

  pub fn with_seller_id(mut self, seller_id: String) -> ShipmentDetail {
    self.seller_id = Some(seller_id);
    self
  }

  pub fn seller_id(&self) -> Option<&String> {
    self.seller_id.as_ref()
  }

  pub fn reset_seller_id(&mut self) {
    self.seller_id = None;
  }

  pub fn set_buyer_name(&mut self, buyer_name: String) {
    self.buyer_name = Some(buyer_name);
  }

  pub fn with_buyer_name(mut self, buyer_name: String) -> ShipmentDetail {
    self.buyer_name = Some(buyer_name);
    self
  }

  pub fn buyer_name(&self) -> Option<&String> {
    self.buyer_name.as_ref()
  }

  pub fn reset_buyer_name(&mut self) {
    self.buyer_name = None;
  }

  pub fn set_buyer_county(&mut self, buyer_county: String) {
    self.buyer_county = Some(buyer_county);
  }

  pub fn with_buyer_county(mut self, buyer_county: String) -> ShipmentDetail {
    self.buyer_county = Some(buyer_county);
    self
  }

  pub fn buyer_county(&self) -> Option<&String> {
    self.buyer_county.as_ref()
  }

  pub fn reset_buyer_county(&mut self) {
    self.buyer_county = None;
  }

  pub fn set_buyer_tax_info(&mut self, buyer_tax_info: ::models::BuyerTaxInfo) {
    self.buyer_tax_info = Some(buyer_tax_info);
  }

  pub fn with_buyer_tax_info(mut self, buyer_tax_info: ::models::BuyerTaxInfo) -> ShipmentDetail {
    self.buyer_tax_info = Some(buyer_tax_info);
    self
  }

  pub fn buyer_tax_info(&self) -> Option<&::models::BuyerTaxInfo> {
    self.buyer_tax_info.as_ref()
  }

  pub fn reset_buyer_tax_info(&mut self) {
    self.buyer_tax_info = None;
  }

  pub fn set_shipment_items(&mut self, shipment_items: ::models::ShipmentItems) {
    self.shipment_items = Some(shipment_items);
  }

  pub fn with_shipment_items(mut self, shipment_items: ::models::ShipmentItems) -> ShipmentDetail {
    self.shipment_items = Some(shipment_items);
    self
  }

  pub fn shipment_items(&self) -> Option<&::models::ShipmentItems> {
    self.shipment_items.as_ref()
  }

  pub fn reset_shipment_items(&mut self) {
    self.shipment_items = None;
  }

}



