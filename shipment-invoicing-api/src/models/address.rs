/* 
 * Selling Partner API for Shipment Invoicing
 *
 * The Selling Partner API for Shipment Invoicing helps you programmatically retrieve shipment invoice information in the Brazil marketplace for a selling partnerâ€™s Fulfillment by Amazon (FBA) orders.
 *
 * OpenAPI spec version: v0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Address : The shipping address details of the shipment.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Address {
  /// The name.
  #[serde(rename = "Name")]
  name: Option<String>,
  /// The street address.
  #[serde(rename = "AddressLine1")]
  address_line1: Option<String>,
  /// Additional street address information, if required.
  #[serde(rename = "AddressLine2")]
  address_line2: Option<String>,
  /// Additional street address information, if required.
  #[serde(rename = "AddressLine3")]
  address_line3: Option<String>,
  /// The city.
  #[serde(rename = "City")]
  city: Option<String>,
  /// The county.
  #[serde(rename = "County")]
  county: Option<String>,
  /// The district.
  #[serde(rename = "District")]
  district: Option<String>,
  /// The state or region.
  #[serde(rename = "StateOrRegion")]
  state_or_region: Option<String>,
  /// The postal code.
  #[serde(rename = "PostalCode")]
  postal_code: Option<String>,
  /// The country code.
  #[serde(rename = "CountryCode")]
  country_code: Option<String>,
  /// The phone number.
  #[serde(rename = "Phone")]
  phone: Option<String>,
  #[serde(rename = "AddressType")]
  address_type: Option<::models::AddressTypeEnum>
}

impl Address {
  /// The shipping address details of the shipment.
  pub fn new() -> Address {
    Address {
      name: None,
      address_line1: None,
      address_line2: None,
      address_line3: None,
      city: None,
      county: None,
      district: None,
      state_or_region: None,
      postal_code: None,
      country_code: None,
      phone: None,
      address_type: None
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> Address {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> Option<&String> {
    self.name.as_ref()
  }

  pub fn reset_name(&mut self) {
    self.name = None;
  }

  pub fn set_address_line1(&mut self, address_line1: String) {
    self.address_line1 = Some(address_line1);
  }

  pub fn with_address_line1(mut self, address_line1: String) -> Address {
    self.address_line1 = Some(address_line1);
    self
  }

  pub fn address_line1(&self) -> Option<&String> {
    self.address_line1.as_ref()
  }

  pub fn reset_address_line1(&mut self) {
    self.address_line1 = None;
  }

  pub fn set_address_line2(&mut self, address_line2: String) {
    self.address_line2 = Some(address_line2);
  }

  pub fn with_address_line2(mut self, address_line2: String) -> Address {
    self.address_line2 = Some(address_line2);
    self
  }

  pub fn address_line2(&self) -> Option<&String> {
    self.address_line2.as_ref()
  }

  pub fn reset_address_line2(&mut self) {
    self.address_line2 = None;
  }

  pub fn set_address_line3(&mut self, address_line3: String) {
    self.address_line3 = Some(address_line3);
  }

  pub fn with_address_line3(mut self, address_line3: String) -> Address {
    self.address_line3 = Some(address_line3);
    self
  }

  pub fn address_line3(&self) -> Option<&String> {
    self.address_line3.as_ref()
  }

  pub fn reset_address_line3(&mut self) {
    self.address_line3 = None;
  }

  pub fn set_city(&mut self, city: String) {
    self.city = Some(city);
  }

  pub fn with_city(mut self, city: String) -> Address {
    self.city = Some(city);
    self
  }

  pub fn city(&self) -> Option<&String> {
    self.city.as_ref()
  }

  pub fn reset_city(&mut self) {
    self.city = None;
  }

  pub fn set_county(&mut self, county: String) {
    self.county = Some(county);
  }

  pub fn with_county(mut self, county: String) -> Address {
    self.county = Some(county);
    self
  }

  pub fn county(&self) -> Option<&String> {
    self.county.as_ref()
  }

  pub fn reset_county(&mut self) {
    self.county = None;
  }

  pub fn set_district(&mut self, district: String) {
    self.district = Some(district);
  }

  pub fn with_district(mut self, district: String) -> Address {
    self.district = Some(district);
    self
  }

  pub fn district(&self) -> Option<&String> {
    self.district.as_ref()
  }

  pub fn reset_district(&mut self) {
    self.district = None;
  }

  pub fn set_state_or_region(&mut self, state_or_region: String) {
    self.state_or_region = Some(state_or_region);
  }

  pub fn with_state_or_region(mut self, state_or_region: String) -> Address {
    self.state_or_region = Some(state_or_region);
    self
  }

  pub fn state_or_region(&self) -> Option<&String> {
    self.state_or_region.as_ref()
  }

  pub fn reset_state_or_region(&mut self) {
    self.state_or_region = None;
  }

  pub fn set_postal_code(&mut self, postal_code: String) {
    self.postal_code = Some(postal_code);
  }

  pub fn with_postal_code(mut self, postal_code: String) -> Address {
    self.postal_code = Some(postal_code);
    self
  }

  pub fn postal_code(&self) -> Option<&String> {
    self.postal_code.as_ref()
  }

  pub fn reset_postal_code(&mut self) {
    self.postal_code = None;
  }

  pub fn set_country_code(&mut self, country_code: String) {
    self.country_code = Some(country_code);
  }

  pub fn with_country_code(mut self, country_code: String) -> Address {
    self.country_code = Some(country_code);
    self
  }

  pub fn country_code(&self) -> Option<&String> {
    self.country_code.as_ref()
  }

  pub fn reset_country_code(&mut self) {
    self.country_code = None;
  }

  pub fn set_phone(&mut self, phone: String) {
    self.phone = Some(phone);
  }

  pub fn with_phone(mut self, phone: String) -> Address {
    self.phone = Some(phone);
    self
  }

  pub fn phone(&self) -> Option<&String> {
    self.phone.as_ref()
  }

  pub fn reset_phone(&mut self) {
    self.phone = None;
  }

  pub fn set_address_type(&mut self, address_type: ::models::AddressTypeEnum) {
    self.address_type = Some(address_type);
  }

  pub fn with_address_type(mut self, address_type: ::models::AddressTypeEnum) -> Address {
    self.address_type = Some(address_type);
    self
  }

  pub fn address_type(&self) -> Option<&::models::AddressTypeEnum> {
    self.address_type.as_ref()
  }

  pub fn reset_address_type(&mut self) {
    self.address_type = None;
  }

}



