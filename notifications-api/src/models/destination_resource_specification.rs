/* 
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// DestinationResourceSpecification : The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct DestinationResourceSpecification {
  /// The information required to create an Amazon Simple Queue Service (SQS) queue destination.
  #[serde(rename = "sqs")]
  sqs: Option<::models::SqsResource>,
  /// The information required to create an Amazon EventBridge destination.
  #[serde(rename = "eventBridge")]
  event_bridge: Option<::models::EventBridgeResourceSpecification>
}

impl DestinationResourceSpecification {
  /// The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination.
  pub fn new() -> DestinationResourceSpecification {
    DestinationResourceSpecification {
      sqs: None,
      event_bridge: None
    }
  }

  pub fn set_sqs(&mut self, sqs: ::models::SqsResource) {
    self.sqs = Some(sqs);
  }

  pub fn with_sqs(mut self, sqs: ::models::SqsResource) -> DestinationResourceSpecification {
    self.sqs = Some(sqs);
    self
  }

  pub fn sqs(&self) -> Option<&::models::SqsResource> {
    self.sqs.as_ref()
  }

  pub fn reset_sqs(&mut self) {
    self.sqs = None;
  }

  pub fn set_event_bridge(&mut self, event_bridge: ::models::EventBridgeResourceSpecification) {
    self.event_bridge = Some(event_bridge);
  }

  pub fn with_event_bridge(mut self, event_bridge: ::models::EventBridgeResourceSpecification) -> DestinationResourceSpecification {
    self.event_bridge = Some(event_bridge);
    self
  }

  pub fn event_bridge(&self) -> Option<&::models::EventBridgeResourceSpecification> {
    self.event_bridge.as_ref()
  }

  pub fn reset_event_bridge(&mut self) {
    self.event_bridge = None;
  }

}



