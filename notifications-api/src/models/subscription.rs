/* 
 * Selling Partner API for Notifications
 *
 * The Selling Partner API for Notifications lets you subscribe to notifications that are relevant to a selling partner's business. Using this API you can create a destination to receive notifications, subscribe to notifications, delete notification subscriptions, and more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Subscription : Represents a subscription to receive notifications.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Subscription {
  /// The subscription identifier generated when the subscription is created.
  #[serde(rename = "subscriptionId")]
  subscription_id: String,
  /// The version of the payload object to be used in the notification.
  #[serde(rename = "payloadVersion")]
  payload_version: String,
  /// The identifier for the destination where notifications will be delivered.
  #[serde(rename = "destinationId")]
  destination_id: String
}

impl Subscription {
  /// Represents a subscription to receive notifications.
  pub fn new(subscription_id: String, payload_version: String, destination_id: String) -> Subscription {
    Subscription {
      subscription_id: subscription_id,
      payload_version: payload_version,
      destination_id: destination_id
    }
  }

  pub fn set_subscription_id(&mut self, subscription_id: String) {
    self.subscription_id = subscription_id;
  }

  pub fn with_subscription_id(mut self, subscription_id: String) -> Subscription {
    self.subscription_id = subscription_id;
    self
  }

  pub fn subscription_id(&self) -> &String {
    &self.subscription_id
  }


  pub fn set_payload_version(&mut self, payload_version: String) {
    self.payload_version = payload_version;
  }

  pub fn with_payload_version(mut self, payload_version: String) -> Subscription {
    self.payload_version = payload_version;
    self
  }

  pub fn payload_version(&self) -> &String {
    &self.payload_version
  }


  pub fn set_destination_id(&mut self, destination_id: String) {
    self.destination_id = destination_id;
  }

  pub fn with_destination_id(mut self, destination_id: String) -> Subscription {
    self.destination_id = destination_id;
    self
  }

  pub fn destination_id(&self) -> &String {
    &self.destination_id
  }


}



