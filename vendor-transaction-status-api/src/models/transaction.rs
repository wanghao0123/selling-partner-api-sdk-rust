/* 
 * Selling Partner API for Retail Procurement Transaction Status
 *
 * The Selling Partner API for Retail Procurement Transaction Status provides programmatic access to status information on specific asynchronous POST transactions for vendors.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Transaction : The transaction status.

#[allow(unused_imports)]
use serde_json::Value;

#[derive(Debug, Serialize, Deserialize)]
pub struct Transaction {
  /// The unique identifier returned in the 'transactionId' field in response to the post request of a specific transaction.
  #[serde(rename = "transactionId")]
  transaction_id: String,
  /// Current processing status of the transaction.
  #[serde(rename = "status")]
  status: String,
  #[serde(rename = "errors")]
  errors: Option<::models::ErrorList>
}

impl Transaction {
  /// The transaction status.
  pub fn new(transaction_id: String, status: String) -> Transaction {
    Transaction {
      transaction_id: transaction_id,
      status: status,
      errors: None
    }
  }

  pub fn set_transaction_id(&mut self, transaction_id: String) {
    self.transaction_id = transaction_id;
  }

  pub fn with_transaction_id(mut self, transaction_id: String) -> Transaction {
    self.transaction_id = transaction_id;
    self
  }

  pub fn transaction_id(&self) -> &String {
    &self.transaction_id
  }


  pub fn set_status(&mut self, status: String) {
    self.status = status;
  }

  pub fn with_status(mut self, status: String) -> Transaction {
    self.status = status;
    self
  }

  pub fn status(&self) -> &String {
    &self.status
  }


  pub fn set_errors(&mut self, errors: ::models::ErrorList) {
    self.errors = Some(errors);
  }

  pub fn with_errors(mut self, errors: ::models::ErrorList) -> Transaction {
    self.errors = Some(errors);
    self
  }

  pub fn errors(&self) -> Option<&::models::ErrorList> {
    self.errors.as_ref()
  }

  pub fn reset_errors(&mut self) {
    self.errors = None;
  }

}



